// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace Wlst.iifx
{
    /// <summary>****************************光控*****************************</summary>
    public partial class Head
    {
        /// <summary>
        /// <para>start</para>
        /// <para> 序号(必填)，默认0</para>
        /// </summary>
        public long Idx { get; set; }

        public int Ver { get; set; }

        /// <summary> 协议版本(必填,默认为协议发布⽇期6位整型)。当前版本为 180628</summary>
        public string IfName { get; set; }

        /// <summary> 接⼝名称(可选)</summary>
        public long IfDt { get; set; }

        /// <summary> 请求或返回时间(必填)</summary>
        public int IfSt { get; set; }

        /// <summary>
        /// <para> 接⼝操作状态(返回必填)</para>
        /// <para> 1-操作成功, 0-操作失败, 原因参考msg,</para>
        /// <para> 41-数据库连接失败,42-指令提交失败(socket pool),45-数据库提交失败,46-参数错误</para>
        /// <para> 99-接⼝参数暂不⽀持</para>
        /// </summary>
        public string IfMsg { get; set; }

        /// <summary> 返回填写，失败时填充详细原因(可选)</summary>
        public List<int> AddrIds { get; set; }

        /// <summary> 设备清单列表  部分接口可方便使用 INT32</summary>
        public List<long> AddrLds { get; set; }

        /// <summary>
        /// <para> 设备清单列表  部分接口可方便使用 Long</para>
        /// <para> 此次请求/应答是否使用分页，20-100 使用分页，历史记录、数据查询要求必须分页</para>
        /// </summary>
        public int PagingNum { get; set; }

        /// <summary> 分页序号,1开始</summary>
        public int PagingIdx { get; set; }

        /// <summary> 分页总数</summary>
        public int PagingTotal { get; set; }

        /// <summary> 查询记录总数，[返回时填写] ，每次查询最大返回1000组数据 ，[特殊接口除外]</summary>
        public int PagingRecordTotal { get; set; }

        /// <summary> 点击查询按钮还是页码：查询-0 页码-1</summary>
        public int PagingFlag { get; set; }

    }

    /// <summary>----------------------------------------------数据服务和前端传输格式----------------------------------------------</summary>
    public partial class MsgWithIif
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 请求指定终端指定时间段内的周设置</summary>
        public Wlst.iifx.GetRtusWeekTimeInfo GetRtusWeekTimeInfoGet { get; set; }

        /// <summary> 返回指定终端指定时间段内的周设置</summary>
        public List<Wlst.iifx.RtuWeekTimeInfo> RtuWeekTimeInfoBack { get; set; }

        /// <summary> 南瑞单灯 设置/读取经纬度以及开关灯偏移时间</summary>
        public Wlst.iifx.NRSetOrZcTudeAndDeviation NROrder1004 { get; set; }

        /// <summary> 南瑞单灯 设置控制器id以及灯头分组</summary>
        public Wlst.iifx.NRSetOrZcCtrlPara NROrder1030 { get; set; }

        /// <summary> 南瑞单灯 设置/读取组策略（时间表）</summary>
        public Wlst.iifx.NRSetOrZcTimeTable NROrder1035 { get; set; }

        /// <summary>单灯全局分组的请求与保存。</summary>
        public Wlst.iifx.SluGrpSet Post4078 { get; set; }

        public Wlst.iifx.SluGrpSet Back4078 { get; set; }

        /// <summary>查询时间段内区域亮灯率</summary>
        public Wlst.iifx.GetAreaLightRate Get1248 { get; set; }

        public Wlst.iifx.GetAreaLightRate Bak1248 { get; set; }

        /// <summary>新增区域亮灯率</summary>
        public Wlst.iifx.AddOrUpdateAreaLightRate Post4044 { get; set; }

        /// <summary>修改区域亮灯率</summary>
        public Wlst.iifx.AddOrUpdateAreaLightRate Post4045 { get; set; }

        /// <summary>删除区域亮灯率</summary>
        public Wlst.iifx.DelAreaLightRate Post4046 { get; set; }

        /// <summary>
        /// <para> ---------------------------------------------- 单灯方案管理 ----------------------------------------------</para>
        /// <para>获取区域所有的单灯分组信息</para>
        /// </summary>
        public Wlst.iifx.InfoRq Get1221 { get; set; }

        public Wlst.iifx.SluPlanGrpInfoBk Back1221 { get; set; }

        /// <summary>获取所有的单灯指令列表列表</summary>
        public Wlst.iifx.InfoRq Get1223 { get; set; }

        public Wlst.iifx.SluPlanBriefInfo Back1223 { get; set; }

        /// <summary>获取某一指令详细信息</summary>
        public Wlst.iifx.SluPlanDetailInfoRq Get1224 { get; set; }

        public Wlst.iifx.SluPlanDetailInfo Back1224 { get; set; }

        /// <summary>删除单灯指令</summary>
        public Wlst.iifx.SluPlanDetailInfoRq Post4074 { get; set; }

        /// <summary>保存单灯指令</summary>
        public Wlst.iifx.SluPlanDetailInfo Post4075 { get; set; }

        /// <summary>获取区域所有的方案列表信息</summary>
        public Wlst.iifx.InfoRq Get1225 { get; set; }

        public Wlst.iifx.SluPlanBandingInfo Back1225 { get; set; }

        /// <summary>获取某一方案详细信息</summary>
        public Wlst.iifx.SluPlanDetailInfoRq Get1226 { get; set; }

        public Wlst.iifx.SluPlanBandingDetailInfo Back1226 { get; set; }

        /// <summary>删除方案</summary>
        public Wlst.iifx.SluPlanDetailInfoRq Post4076 { get; set; }

        /// <summary>保存方案</summary>
        public Wlst.iifx.SluPlanBandingDetailInfo Post4077 { get; set; }

    }

    public partial class CommAns
    {
        public Wlst.iifx.Head Head { get; set; }

    }

    /// <summary>终端运行信息</summary>
    public partial class RtuRunningInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtuRunningInfo.RtuRunningInfoOne> Items { get; set; }

        public Wlst.iifx.RtuRunningInfo.RtuRunningError RunningError { get; set; }

        /// <summary>基本参数</summary>
        public partial class RtuRunningInfoOne
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备物理地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary>数据采集时间 数据通信时间  0无数据</summary>
            public long DateCreate { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateCreateString { get; set; }

            /// <summary> 工作状态  类型 数据 0、不用,1、 停运，2、 使用等</summary>
            public int RtuStateCode { get; set; }

            /// <summary> 当前故障数</summary>
            public int ErrorCount { get; set; }

            /// <summary> 当前所有回路的总电流</summary>
            public double CurrentSum { get; set; }

            /// <summary> 开关量输出吸合的数量</summary>
            public int SwitchOutOpenCount { get; set; }

            public string IpAddr { get; set; }

        }

        public partial class RtuRunningError
        {
            /// <summary> 终端总数</summary>
            public int RtuCount { get; set; }

            /// <summary> 使用终端数</summary>
            public int RtuUsedCount { get; set; }

            /// <summary>在线终端数</summary>
            public int RtuOnlineCount { get; set; }

            /// <summary>当前存在故障的终端数量</summary>
            public int ErrorRtuCount { get; set; }

            /// <summary> 当前所有的终端的故障总数</summary>
            public int ErrorCount { get; set; }

        }

    }

    public partial class GtOnline
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

    }

    public partial class Online
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.Online.OnlineItem> Items { get; set; }

        public partial class OnlineItem
        {
            public int RtuNum { get; set; }

            /// <summary> 终端总数</summary>
            public int RtuIsUsed { get; set; }

            /// <summary> 使用总数</summary>
            public int RtuOnline { get; set; }

            /// <summary> 在线总数</summary>
            public double RtuOnlineRate { get; set; }

            /// <summary> 在线率</summary>
            public long DateCreate { get; set; }

            /// <summary>
            /// <para> 采集时间</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------用户管理----------------------------------------------</para>
    /// <para>-----------------------------获取用户信息-----------------------------</para>
    /// </summary>
    public partial class UserInfoBk
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 用户信息列表</summary>
        public List<Wlst.iifx.UserInfoBk.UserInfo> Items { get; set; }

        /// <summary>请求的用户名列表</summary>
        public List<string> RequestUserIds { get; set; }

        /// <summary> 用户信息</summary>
        public partial class UserInfo
        {
            /// <summary> 用户id</summary>
            public string UserId { get; set; }

            /// <summary> 用户姓名</summary>
            public string UserName { get; set; }

            /// <summary> 电话</summary>
            public string UserTel { get; set; }

            /// <summary> 所属部门</summary>
            public string UserDept { get; set; }

            /// <summary> 用户角色</summary>
            public int UserRoleId { get; set; }

            /// <summary> 用户角色名称</summary>
            public string UserRoleName { get; set; }

        }

    }

    public partial class UserInfoRq
    {
        /// <summary> 需要请求的用户信息列表，若所请求用户具有管理员权限，则空表示请求所有用户，若无管理员权限则空表示请求自己用户信息</summary>
        public List<string> RequestUserIds { get; set; }

    }

    /// <summary>-----------------------------新增和修改用户-----------------------------</summary>
    public partial class AddOrUpdateUserInfo
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 用户id</summary>
        public string UserId { get; set; }

        /// <summary> 用户姓名</summary>
        public string UserName { get; set; }

        /// <summary> 电话</summary>
        public string UserTel { get; set; }

        /// <summary> 所属部门</summary>
        public string UserDept { get; set; }

        /// <summary> 用户角色</summary>
        public string UserRole { get; set; }

        /// <summary> 用户密码【增加协议默认密码123456，修改协议密码不修改】</summary>
        public string UserPw { get; set; }

        /// <summary> 用户角色[增加协议可修改，管理员可修改，自己修改角色不允许]</summary>
        public int UserRoleId { get; set; }

    }

    /// <summary> ---------------删除用户-----------------------------</summary>
    public partial class DelUserInfo
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 用户id</summary>
        public string UserId { get; set; }

    }

    /// <summary>-----------------------------重置密码-----------------------------</summary>
    public partial class ResetUserPsw
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 用户id</summary>
        public string UserId { get; set; }

        /// <summary> 用户密码</summary>
        public string UserPw { get; set; }

    }

    /// <summary>-----------------------------用户自己修改自己的密码-----------------</summary>
    public partial class UpdateUserPsw
    {
        /// <summary> 用户id</summary>
        public string UserId { get; set; }

        /// <summary> 用户old密码</summary>
        public string UserPwOld { get; set; }

        /// <summary> 用户new密码</summary>
        public string UserPwNew { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------角色管理----------------------------------------------</para>
    /// <para>-----------------------------获取角色信息-----------------------------</para>
    /// </summary>
    public partial class RoleInfoBk
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 角色信息列表</summary>
        public List<Wlst.iifx.RoleInfoBk.RoleInfo> Items { get; set; }

        /// <summary>请求的角色列表</summary>
        public List<int> RequestRoleIds { get; set; }

        /// <summary> 角色信息</summary>
        public partial class RoleInfo
        {
            /// <summary> 角色id</summary>
            public int RoleId { get; set; }

            /// <summary> 角色名</summary>
            public string RoleName { get; set; }

            /// <summary> 描述</summary>
            public string RoleDesc { get; set; }

            /// <summary>可查看的模块功能 R BS页面控制</summary>
            public List<int> ReadPage { get; set; }

            /// <summary>可操作与编辑的模块功能 WX BS页面控制</summary>
            public List<int> EditPage { get; set; }

            /// <summary>可查看的区域 R 监控区域管理</summary>
            public List<int> ReadArea { get; set; }

            /// <summary>可操作的区域 WX 监控区域管理</summary>
            public List<int> EditArea { get; set; }

        }

    }

    public partial class RoleInfoRq
    {
        /// <summary>则空表示请求所有</summary>
        public List<int> RequestRoleIds { get; set; }

    }

    /// <summary>-----------------------------新增和修改角色-----------------------------</summary>
    public partial class AddRoleInfo
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 角色信息</summary>
        public Wlst.iifx.RoleInfoBk.RoleInfo Info { get; set; }

    }

    /// <summary>-----------------------------删除角色-----------------------------</summary>
    public partial class DelRoleInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 角色id</summary>
        public int RoleId { get; set; }

    }

    /// <summary>------------------------------用户获取角色信息 ----------------------</summary>
    public partial class RoleUserInfoRq
    {
        /// <summary>用户名称</summary>
        public string RequestUserName { get; set; }

    }

    public partial class RoleUserInfoBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>角色信息</summary>
        public Wlst.iifx.RoleInfoBk.RoleInfo UserRole { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------批量操作----------------------------------------------</para>
    /// <para>-----------------------------删除自定义方案-----------------------------</para>
    /// </summary>
    public partial class DelPlanBatchOperationInfo
    {
        /// <summary> 需要删除的自定义方案</summary>
        public int PlanId { get; set; }

    }

    /// <summary>-----------------------------保存自定义方案-----------------------------</summary>
    public partial class AddPlanBatchOperationInfo
    {
        /// <summary> 方案名称</summary>
        public string PlanName { get; set; }

        /// <summary> 信息列表</summary>
        public List<Wlst.iifx.AddPlanBatchOperationInfo.PlanInfoAdd> ItemsPlan { get; set; }

        /// <summary>方案信息</summary>
        public partial class PlanInfoAdd
        {
            /// <summary>区域地址</summary>
            public int AreaId { get; set; }

            /// <summary>组地址</summary>
            public int GroupId { get; set; }

            /// <summary> 开关量输出列表 选中的</summary>
            public List<int> ItemsSwitchout { get; set; }

        }

    }

    /// <summary>-----------------------------加载自定义方案-----------------------------</summary>
    public partial class PlanBatchOperationInfo
    {
        /// <summary> 方案地址</summary>
        public int PlanId { get; set; }

        /// <summary> 方案名称</summary>
        public string PlanName { get; set; }

        /// <summary> 信息列表</summary>
        public List<Wlst.iifx.PlanBatchOperationInfo.PlanInfo> ItemsPlan { get; set; }

        /// <summary>方案信息</summary>
        public partial class PlanInfo
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 区域名称</summary>
            public string AreaName { get; set; }

            /// <summary> 组地址</summary>
            public int GroupId { get; set; }

            /// <summary> 组名称</summary>
            public string GroupName { get; set; }

            /// <summary> 开关量输出列表 选中的</summary>
            public List<int> ItemsSwitchout { get; set; }

        }

    }

    public partial class PlanBatchOperationInfoBk
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 请求的自定义方案 列表</summary>
        public List<int> PlanIds { get; set; }

        /// <summary> 批量操作方案信息</summary>
        public List<Wlst.iifx.PlanBatchOperationInfo> ItemsPlan { get; set; }

    }

    public partial class PlanBatchOperationInfoRq
    {
        /// <summary> 1、请求自定义方案的扼要信息 即ItemsPlan为空，不包含详细的设备清单，2、请求设备清单</summary>
        public int Op { get; set; }

        /// <summary> 需要请求的自定义方案 列表，为空则请求所有，否则为指定的自定义方案</summary>
        public List<int> PlanIds { get; set; }

    }

    /// <summary>
    /// <para>-----------------------------选中时间表解析-----------------------------</para>
    /// <para>提交</para>
    /// </summary>
    public partial class PlanRtuTimetableInfo
    {
        /// <summary>需要解析的选择的时间表分组</summary>
        public List<Wlst.iifx.PlanRtuTimetableInfo.PlanTimeTableInfo> ItemsSelect { get; set; }

        public partial class PlanTimeTableInfo
        {
            /// <summary> 所属区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 时间表地址</summary>
            public int TimetableId { get; set; }

        }

    }

    /// <summary>返回</summary>
    public partial class PlanRtuTimetableInfoBk
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>需要解析的选择的分组或时间表分组</summary>
        public List<Wlst.iifx.PlanRtuTimetableInfoBk.PlanGrpInfo> ItemsPlan { get; set; }

        public partial class PlanGrpInfo
        {
            /// <summary> 1、组， 2、特殊终端</summary>
            public int Op { get; set; }

            /// <summary> 所属区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 所属分组地址  或终端物理地址</summary>
            public int GroupOrRtuphy_Id { get; set; }

            /// <summary> 开关量输出列表 绑定该时间表的</summary>
            public List<int> ItemsSwitchout { get; set; }

            /// <summary> 终端逻辑地址 如果op=2</summary>
            public int RtuIdIfThisisrtu { get; set; }

            /// <summary> 组名称 或终端名称</summary>
            public string GroupOrRtuName { get; set; }

            /// <summary> 时间表地址</summary>
            public int TimetableId { get; set; }

            /// <summary> 区域名称</summary>
            public string AreaName { get; set; }

        }

    }

    /// <summary>
    /// <para>-----------------------------解析勾选的分组到操作界面-----------------------------</para>
    /// <para>提交</para>
    /// </summary>
    public partial class PlanGrpTransRtu
    {
        /// <summary>需要解析的选择的分组或时间表分组</summary>
        public List<Wlst.iifx.PlanGrpTransRtu.PlanGrpInfo> ItemsPlan { get; set; }

        public partial class PlanGrpInfo
        {
            /// <summary> 所属区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 所属分组地址 如果为特殊终端则直接添加名称之类的返回</summary>
            public int GroupOrRtuId { get; set; }

            /// <summary> 开关量输出列表 选中的</summary>
            public List<int> ItemsSwitchout { get; set; }

        }

    }

    /// <summary>返回</summary>
    public partial class PlanGrpTransRtuBk
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 方案终端信息</summary>
        public List<Wlst.iifx.PlanGrpTransRtuBk.PlanGrpTransRtuBkItem> PlanRtuItems { get; set; }

        public partial class PlanGrpTransRtuBkItem
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备物理地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 终端名称</summary>
            public string RtuName { get; set; }

            /// <summary> 工作状态  类型 数据 0、不用,1、 停运，2、 使用等</summary>
            public int RtuStateCode { get; set; }

            /// <summary> 所属区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 区域名称</summary>
            public string AreaName { get; set; }

            /// <summary> 所属组地址</summary>
            public int GroupId { get; set; }

            /// <summary> 组名称</summary>
            public string GroupName { get; set; }

            /// <summary> 开关量输出列表 选中的</summary>
            public List<int> ItemsSwitchout { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------通信协议设计：-------------------------------------------------------------------------------------------------------------------</para>
    /// <para>----------------------------------------------区域、分组 综合快速查询 应用于：区域 - 分组  -终端的 快速查询----------------------------------------------</para>
    /// </summary>
    public partial class QueryRtuBiref
    {
        /// <summary>终端模糊查询 匹配字</summary>
        public string RtuLikeQyert { get; set; }

        /// <summary>区域信息</summary>
        public int AreaId { get; set; }

        /// <summary>组信息</summary>
        public int GroupId { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备</summary>
        public int OpRtuType { get; set; }

        /// <summary>
        /// <para> 11、终端模糊查询;         请求：RtuLikeQyert、OpRtuType需要填写 ; 返回： ItemsRtu 有数据 ，备注：模糊查询针对整套系统有效</para>
        /// <para> 21、所有区域简要信息请求; 请求：OpRtuType 需要填写； 返回： ItemsArea 包含该区域的简要信息，区域下属性ItemsRtu无数据</para>
        /// <para> 22、所有区域简要信息请求; 请求：OpRtuType 需要填写； 返回： ItemsArea 包含该区域的简要信息，区域下属性ItemsArea[0].ItemsRtu有数据，其他ItemsRtu无数据</para>
        /// <para> 23、所有区域简要信息请求; 请求：OpRtuType 需要填写，</para>
        /// <para>     返回: ItemsArea 包含该区域的简要信息，区域下属性ItemsRtu无数据,</para>
        /// <para>          ItemsGroup 包含该分组的简要信息，分组下属性ItemsRtu[0]有数据，其他ItemsRtu无数据,</para>
        /// <para> 24、特定区域信息请求;     请求：AreaId、OpRtuType 需要填写 ； 返回 ：ItemsArea 包含该区域的简要信息，区域下属性ItemsRtu有数据</para>
        /// <para> 31、区域分组信息查询；     请求：AreaId、OpRtuType 需要填写； 返回：ItemsGroup 包含有分组的简要信息，分组下属性ItemsRtu有数据,</para>
        /// <para> 32、区域分组简要信息查询；     请求：AreaId、OpRtuType 需要填写； 返回：ItemsGroup 包含有分组的简要信息，分组下属性ItemsRtu无数据,</para>
        /// <para> 33、区域分组简要信息查询； 请求：AreaId、OpRtuType 需要填写； 返回：ItemsGroup 包含有分组的简要信息，分组下属性ItemsGroup[0].ItemsRtu有数据，其他ItemsRtu无数据,</para>
        /// <para> 41、特定分组的终端信息查询； 请求：AreaId、GroupId、OpRtuType 需要填写； ItemsRtu 为查询的分组的终端数据,</para>
        /// </summary>
        public int Op { get; set; }

    }

    /// <summary>此为参数查询 不支持分页</summary>
    public partial class QueryRtuBirefBk
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>查询的条件</summary>
        public Wlst.iifx.QueryRtuBiref QueryInfo { get; set; }

        /// <summary> 区域列表</summary>
        public List<Wlst.iifx.QueryRtuBirefBk.AreaInfoBrief> ItemsArea { get; set; }

        /// <summary> 分组列表</summary>
        public List<Wlst.iifx.QueryRtuBirefBk.GroupInfoBreif> ItemsGroup { get; set; }

        /// <summary> 终端列表</summary>
        public List<Wlst.iifx.QueryRtuBirefBk.RtuInfoBiref> ItemsRtu { get; set; }

        /// <summary>设备扼要信息  主设备、附属设备均在此</summary>
        public partial class RtuInfoBiref
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备物理地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 终端名称</summary>
            public string RtuName { get; set; }

            /// <summary> 设备型号  3005、3090、3006</summary>
            public int RtuModel { get; set; }

        }

        /// <summary>组信息</summary>
        public partial class GroupInfoBreif
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 组地址 -1表示未划分组的设备</summary>
            public int GroupId { get; set; }

            /// <summary> 组名称</summary>
            public string GroupName { get; set; }

            /// <summary> 终端列表</summary>
            public List<Wlst.iifx.QueryRtuBirefBk.RtuInfoBiref> ItemsRtu { get; set; }

        }

        /// <summary>区域信息</summary>
        public partial class AreaInfoBrief
        {
            /// <summary> 区域地址  0 表示 默认区域 ，若系统未设置区域 则只有默认区域</summary>
            public int AreaId { get; set; }

            /// <summary> 名称</summary>
            public string AreaName { get; set; }

            /// <summary> 终端列表</summary>
            public List<Wlst.iifx.QueryRtuBirefBk.RtuInfoBiref> ItemsRtu { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------区域、分组 请求----------------------------------------------</para>
    /// <para>设备扼要信息  主设备、附属设备均在此</para>
    /// </summary>
    public partial class RtuInfo
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 设备物理地址</summary>
        public int RtuPhyId { get; set; }

        /// <summary> 终端名称</summary>
        public string RtuName { get; set; }

        /// <summary> 设备型号  3005、3090、3006</summary>
        public int RtuModel { get; set; }

        /// <summary> 0、不用，1、停运，2、使用</summary>
        public int RtuUsed { get; set; }

        /// <summary> 0、主设备，其他、所连接设备地址</summary>
        public int RtuFid { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备</summary>
        public int RtuType { get; set; }

        /// <summary> 当前设备的操作权限 ，0、无权限，1、可查看数据，2、具备开关灯与设置等高级权限</summary>
        public int Right { get; set; }

        /// <summary>终端总电流</summary>
        public double CurrentSum { get; set; }

        /// <summary>设备故障总数</summary>
        public int ErrorCount { get; set; }

        /// <summary>终端状态；1、停运，2、不用，3、开灯[表示有电流]正常，4、开灯[表示有电流]有故障，5、关灯[表示无电流]正常，6、关灯[表示无电流]有故障，7、离线</summary>
        public int ImageType { get; set; }

        /// <summary>如果本终端为附属设备，所连接的主设备的名称  显示时显示主设备名称，若此设备为主设备，则此名称中间层填写本设备的名称</summary>
        public string RtuFname { get; set; }

        /// <summary>如果本终端为附属设备，所连接的主设备的物理地址  显示时显示主设备物理地址，若此设备为主设备，则此地址中间层填写本设备的物理地址</summary>
        public int RtuFphyId { get; set; }

        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 区域名称</summary>
        public string AreaName { get; set; }

    }

    /// <summary>区域信息</summary>
    public partial class AreaInfo
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址  0 表示 默认区域 ，若系统未设置区域 则只有默认区域</summary>
        public int AreaId { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带，空则为所有设备</summary>
        public List<int> OpRtuType { get; set; }

        /// <summary> 名称</summary>
        public string AreaName { get; set; }

        /// <summary> 终端列表</summary>
        public List<Wlst.iifx.RtuInfo> ItemsRtu { get; set; }

    }

    /// <summary>组信息</summary>
    public partial class GroupInfo
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 组地址 -1表示未划分组的设备</summary>
        public int GroupId { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带，空则为所有设备</summary>
        public List<int> OpRtuType { get; set; }

        /// <summary> 组名称</summary>
        public string GroupName { get; set; }

        /// <summary> 终端列表</summary>
        public List<Wlst.iifx.RtuInfo> ItemsRtu { get; set; }

        /// <summary> 区域mc</summary>
        public string AreaName { get; set; }

    }

    /// <summary>区域信息列表</summary>
    public partial class AreasInfo
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>
        /// <para>1、只请求区域信息，不需要终端信息 此时AreaInfo中ItemsRtu为空，2、请求区域信息与设备信息，若区域无终端则该区域不返回 默认2</para>
        /// <para>3、请求区域信息与设备信息，若区域无终端也返回该区域，且用户对该区域可操作</para>
        /// </summary>
        public int Op { get; set; }

        /// <summary> 区域信息 为本系统包含的所有的区域信息</summary>
        public List<Wlst.iifx.AreaInfo> ItemsArea { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带，空则为所有设备</summary>
        public List<int> OpRtuType { get; set; }

        /// <summary> 区域权限：0-全部 1-只能修改名称</summary>
        public int AreaRight { get; set; }

    }

    /// <summary>组信息列表</summary>
    public partial class GroupsInfo
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>
        /// <para>1、只请求组信息，不需要终端信息，此时GroupInfo中ItemsRtu为空，2、请求组信息与设备信息，若组无终端则该组不返回 默认2</para>
        /// <para>3、请求组信息与设备信息，若组无终端也返回该组，且用户对该组所在的区域可操作</para>
        /// </summary>
        public int Op { get; set; }

        /// <summary> 区域地址 需要请求的区域</summary>
        public List<int> AreaId { get; set; }

        /// <summary> 组信息</summary>
        public List<Wlst.iifx.GroupInfo> ItemsGroup { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带，空则为所有设备</summary>
        public List<int> OpRtuType { get; set; }

    }

    /// <summary>
    /// <para> ----------------- 单灯控制参数快速获取 ---------------------------------------------</para>
    /// <para>组信息列表</para>
    /// </summary>
    public partial class SluCtrlAndGrpbriefInfo
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址 需要请求的区域</summary>
        public int SluId { get; set; }

        /// <summary>需要请求的分组列表  若为空 则为全部</summary>
        public List<int> GroupIds { get; set; }

        /// <summary> 组信息</summary>
        public List<Wlst.iifx.SluCtrlAndGrpbriefInfo.SluGroupbriefInfoItem> ItemsGroup { get; set; }

        public partial class SluCtrlbriefInfoItem
        {
            /// <summary> 地址</summary>
            public int CtrlId { get; set; }

            /// <summary> 物理 显示 地址</summary>
            public int CtrlPhyId { get; set; }

            /// <summary> 名称</summary>
            public string CtrlName { get; set; }

            /// <summary>1、开灯有故障，2、开灯正常，3、关灯有故障，4、关灯正常，5、不用，6、离线</summary>
            public int ImageType { get; set; }

        }

        public partial class SluGroupbriefInfoItem
        {
            /// <summary> 组地址 0表示所有控制器 默认返回整个集中器的控制器列表，包含0组的 -1表示未分组控制器</summary>
            public int GroupId { get; set; }

            /// <summary> 组名称  0-全部 -1-未分组</summary>
            public string GroupName { get; set; }

            public List<Wlst.iifx.SluCtrlAndGrpbriefInfo.SluCtrlbriefInfoItem> Ctrls { get; set; }

        }

    }

    /// <summary>
    /// <para> ----------------- Search 快速搜索 ---------------------------------------------</para>
    /// <para>快速搜索</para>
    /// </summary>
    public partial class Search
    {
        /// <summary> 区域地址 需要请求的区域  空则为所有区域</summary>
        public List<int> AreaId { get; set; }

        /// <summary> 设备类型  1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带，空则为所有设备</summary>
        public List<int> OpRtuType { get; set; }

        /// <summary>搜索关键字 ，不能为空 ，可以为  首字母、字符、ip地址、逻辑地址、物理地址</summary>
        public string SearchKey { get; set; }

    }

    public partial class SearchBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 设备列表 符合条件的 前100条记录</summary>
        public List<Wlst.iifx.RtuInfo> ItemsRtu { get; set; }

    }

    /// <summary>
    /// <para>-----------------------------区域、分组 加入-----------------------------</para>
    /// <para>区域信息</para>
    /// </summary>
    public partial class AddToArea
    {
        /// <summary> 区域地址  0 表示 默认区域 ，需要添加到的区域</summary>
        public int AreaId { get; set; }

        /// <summary> 终端列表</summary>
        public List<int> ItemsRtu { get; set; }

    }

    /// <summary>组信息</summary>
    public partial class AddToGroup
    {
        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 组地址 -1表示未划分组的设备</summary>
        public int GroupId { get; set; }

        /// <summary> 终端列表</summary>
        public List<int> ItemsRtu { get; set; }

    }

    /// <summary>
    /// <para>-----------------------------区域、分组 更新-----------------------------</para>
    /// <para>区域信息</para>
    /// </summary>
    public partial class UpdateAreaOrGrpName
    {
        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 组地址  如果为修改区域名称 则不需要填写了</summary>
        public int GroupId { get; set; }

        /// <summary> 终端列表</summary>
        public string NameNew { get; set; }

    }

    /// <summary>组信息</summary>
    public partial class UpdateAreaOrGrpNameBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 组地址 -1表示未划分组的设备</summary>
        public int GroupId { get; set; }

        /// <summary> 终端列表</summary>
        public string NameNew { get; set; }

    }

    /// <summary>-----------------------------区域、分组 增加-----------------------------</summary>
    public partial class AddAreaOrGroupInfo
    {
        /// <summary> 新增名称</summary>
        public string NameAdd { get; set; }

        /// <summary> 区域地址 如果为增加分组的话</summary>
        public int AreaIdIfaddgroup { get; set; }

    }

    /// <summary>终端分组信息</summary>
    public partial class AddAreaOrGroupInfoBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 新增的名称</summary>
        public string NameAdd { get; set; }

        /// <summary> 分组地址 如果为增加分组的话</summary>
        public int GroupIdIfaddgroup { get; set; }

    }

    /// <summary>-----------------------------区域、分组 删除-----------------------------</summary>
    public partial class DeleteAreaOrGroupInfo
    {
        /// <summary> 区域地址默认区域无法删除   即区域 不允许删除</summary>
        public int AreaId { get; set; }

        /// <summary> 分组名称 如果为增加分组的话</summary>
        public int GroupIdIfdeletegroup { get; set; }

    }

    /// <summary>终端分组信息</summary>
    public partial class DeleteAreaOrGroupInfoBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 分组名称 如果为增加分组的话</summary>
        public int GroupIdIfdeletegroup { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------设备在线情况信息----------------------------------------------</para>
    /// <para>请求终端在线情况</para>
    /// </summary>
    public partial class RtuOnlineInfoRq
    {
        /// <summary>设备类型 0-所有 1-终端 2-单灯</summary>
        public int RtuModel { get; set; }

        /// <summary>状态 0-所有 1-使用 2-停运</summary>
        public int RtuState { get; set; }

        /// <summary>故障 0-所有 1-有故障 2-无故障</summary>
        public int RtuFault { get; set; }

        /// <summary>链路情况 0-所有 1-在线 2-离线</summary>
        public int RtuOnline { get; set; }

    }

    /// <summary>终端运行信息</summary>
    public partial class RtuOnlineInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtuOnlineInfo.RtuOnlineInfoOne> Items { get; set; }

        /// <summary>基本参数</summary>
        public partial class RtuOnlineInfoOne
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备物理地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 终端名称</summary>
            public string RtuName { get; set; }

            /// <summary> 设备类型</summary>
            public string RtuType { get; set; }

            /// <summary> 工作状态  类型 数据 0、不用,1、 停运，2、 使用等</summary>
            public int RtuStateCode { get; set; }

            /// <summary> 设置ip</summary>
            public string IpAddrSet { get; set; }

            /// <summary> 连接ip</summary>
            public string IpAddr { get; set; }

            /// <summary> 当前故障数</summary>
            public int ErrorCount { get; set; }

            /// <summary> 通信时间</summary>
            public long DateCreate { get; set; }

            /// <summary> 线路状态  类型 数据 0、离线,1、 在线，</summary>
            public int RtuOnlineCode { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>
    /// <para>通信协议设计： 设备管理-终端-运行信息</para>
    /// <para>----------------------------------------------终端最新数据----------------------------------------------</para>
    /// <para>终端最新信息</para>
    /// </summary>
    public partial class RtuMeasureInfo
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        public Wlst.iifx.RtuMeasureInfo.RtuMeasureInfoOne Items { get; set; }

        /// <summary>回路信息</summary>
        public List<Wlst.iifx.RtuMeasureInfo.RtuLoopInfo> ItemsLoop { get; set; }

        /// <summary>开关量输出信息</summary>
        public List<Wlst.iifx.RtuMeasureInfo.RtuSwitchOutInfo> ItemsSwitchOut { get; set; }

        /// <summary>标记哪些列需要显示  按照系统选项勾选的列</summary>
        public List<int> ShowColums { get; set; }

        /// <summary> 当前设备的操作权限 ，0、无权限，1、可查看数据，2、具备开关灯与设置等高级权限</summary>
        public int Right { get; set; }

        /// <summary>基本参数</summary>
        public partial class RtuMeasureInfoOne
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备物理地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 终端名称</summary>
            public string RtuName { get; set; }

            /// <summary> 终端所在组</summary>
            public int GroupId { get; set; }

            /// <summary> 终端所在组名</summary>
            public string GroupName { get; set; }

            /// <summary> 终端所在区域</summary>
            public int AreaId { get; set; }

            /// <summary> 终端所在区域名称</summary>
            public string AreaName { get; set; }

            /// <summary> 工作状态 0、不用,1、 供电停运，2、停电停运，3、供电使用，4、停电使用，5、未知</summary>
            public int RtuStateCode { get; set; }

            /// <summary>A相总电流</summary>
            public double CurrentSumA { get; set; }

            /// <summary>B相总电流</summary>
            public double CurrentSumB { get; set; }

            /// <summary>C相总电流</summary>
            public double CurrentSumC { get; set; }

            /// <summary>A相总电压</summary>
            public double VoltageSumA { get; set; }

            /// <summary>B相总电压</summary>
            public double VoltageSumB { get; set; }

            /// <summary>C相总电压</summary>
            public double VoltageSumC { get; set; }

            /// <summary>总功率</summary>
            public double PowerSum { get; set; }

            /// <summary>总因数</summary>
            public double FactorSum { get; set; }

            /// <summary>通信时间</summary>
            public long DateCreate { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateCreateString { get; set; }

        }

        public partial class RtuLoopInfo
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备回路地址</summary>
            public int RtuLoopId { get; set; }

            /// <summary> 设备回路名称</summary>
            public string RtuLoopName { get; set; }

            /// <summary> 电压</summary>
            public double Voltage { get; set; }

            /// <summary> 电流</summary>
            public double Current { get; set; }

            /// <summary> 功率</summary>
            public double Power { get; set; }

            /// <summary> 功率因数</summary>
            public double Factor { get; set; }

            /// <summary> 参考电流</summary>
            public double ReferenceCurrent { get; set; }

            /// <summary> 亮灯率</summary>
            public double BrightRate { get; set; }

            /// <summary> 电流上限</summary>
            public int CurrentUpper { get; set; }

            /// <summary> 电流下限</summary>
            public int CurrentLower { get; set; }

            /// <summary> 互感器比值</summary>
            public int MutualInductorRatio { get; set; }

            /// <summary> 检测报警 1、线路报警，2、线路正常 ，3、未知</summary>
            public int LineIsAlarm { get; set; }

            /// <summary> 线路地址 0表示未设置</summary>
            public int LineId { get; set; }

            /// <summary> 线路名称</summary>
            public string LineName { get; set; }

            /// <summary> 设备回路状态 1、吸合，2、断开</summary>
            public int RtuLoopState { get; set; }

            /// <summary> 回路状态提示：模拟量回路-吸合或断开，门开关回路-打开或正常，线路检测-报警或正常</summary>
            public string LoopIsAlarmStr { get; set; }

            /// <summary> 是否屏蔽回路  0、正常，1、屏蔽</summary>
            public int IsShieldLoop { get; set; }

            /// <summary> 回路背景色</summary>
            public string BgColor { get; set; }

        }

        public partial class RtuSwitchOutInfo
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 设备回路地址</summary>
            public int RtuSwitchoutId { get; set; }

            /// <summary> 设备回路状态 1、吸合，2、断开</summary>
            public int RtuSwitchoutState { get; set; }

            /// <summary> 使用的时间表地址  0未绑定时间表</summary>
            public int TimetableId { get; set; }

            /// <summary> 回路今日开关灯时间，开灯、关灯、开灯、关灯 顺序 ，如果存在多段则多个</summary>
            public List<int> OpencloseTime { get; set; }

            /// <summary> 使用的时间表名称</summary>
            public string TimetableName { get; set; }

            /// <summary> 输出名称</summary>
            public string RtuSwitchoutName { get; set; }

            /// <summary> 输出状态与时间表应该处于的状态是否一致  1、一致，2、不一致，3、未知</summary>
            public int RtuSwitchoutIsMatchTimetable { get; set; }

            /// <summary> 回路今日开关灯时间，开灯-关灯、开灯-关灯 顺序，如17:30 - 06:00，如果存在多段则多个</summary>
            public List<string> OpencloseTimeString { get; set; }

        }

    }

    public partial class RtusMeasureInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 手动开灯时确认方法 1、二次确认 ，2、密码确认 ，3、不验证</summary>
        public int LightOnCheck { get; set; }

        /// <summary> 手动关灯时确认方法 1、二次确认 ，2、密码确认 ，3、不验证</summary>
        public int LightOffCheck { get; set; }

        /// <summary> 设备图标是否显示故障  1、显示 ，2、不显示  默认显示</summary>
        public int GisFaultDisplay { get; set; }

        /// <summary>终端运行信息 运行信息具备数据的</summary>
        public List<Wlst.iifx.RtuMeasureInfo> ItemsRtu { get; set; }

        /// <summary>终端运行信息  自date_start时间点选测数据未应答的设备</summary>
        public List<int> ItemsNoAnsFromDateStart { get; set; }

    }

    public partial class GetRtusMeasureInfo
    {
        /// <summary>1 一般请求 2 巡测时请求数据，带页码</summary>
        public int Op { get; set; }

        /// <summary>巡测时的页码</summary>
        public int PageIdx { get; set; }

        /// <summary>终端列表 无数据则表示所有终端</summary>
        public List<int> ItemsRtu { get; set; }

        /// <summary>默认值为 0  查询自这个时间点后的选测应答的数据</summary>
        public long DateStart { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------终端巡测逻辑----------------------------------------------</para>
    /// <para>----------------------------------------------终端历史数据查询----------------------------------------------</para>
    /// </summary>
    public partial class GetRtusHisdata
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>终端列表 无数据则表示所有终端</summary>
        public List<int> ItemsRtu { get; set; }

        /// <summary> 时间</summary>
        public long DateStart { get; set; }

        /// <summary> 时间</summary>
        public long DateEnd { get; set; }

    }

    /// <summary>----------------------------------------------终端指定时间一天历史数据----------------------------------------------</summary>
    public partial class RtuMeasureDayInfo
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 时间</summary>
        public long DateCreate { get; set; }

    }

    /// <summary>终端运行一天历史数据信息</summary>
    public partial class RtuMeasureDayInfoBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        public int RtuPhyId { get; set; }

        /// <summary> 设备物理地址</summary>
        public List<Wlst.iifx.RtuMeasureDayInfoBk.RtuInfo> Items { get; set; }

        public partial class RtuLoopInfo
        {
            /// <summary> 设备回路地址</summary>
            public int RtuLoopId { get; set; }

            /// <summary> 设备回路名称</summary>
            public string RtuLoopName { get; set; }

            /// <summary> 设备回路状态 1、吸合，2、断开</summary>
            public int RtuLoopState { get; set; }

            /// <summary> 电压</summary>
            public double Voltage { get; set; }

            /// <summary> 电流</summary>
            public double Current { get; set; }

            /// <summary> 功率</summary>
            public double Power { get; set; }

            /// <summary>通信时间</summary>
            public long DateCreate { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateCreateString { get; set; }

        }

        public partial class RtuInfo
        {
            public List<Wlst.iifx.RtuMeasureDayInfoBk.RtuLoopInfo> Items { get; set; }

            /// <summary>通信时间</summary>
            public long DateCreate { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------下发  召测  ----------------------------------------------</para>
    /// <para>召测终端时钟、召测终端参数、召测终端周设置、召测版本、选测、发送周设置、对时</para>
    /// </summary>
    public partial class RtuOrderZc
    {
        /// <summary> 设备逻辑地址</summary>
        public List<int> RtuId { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------应答 召测时钟、召测版本、对时应答[仅地址有效]----------------------------------------------</para>
    /// <para>终端时钟、版本信息</para>
    /// </summary>
    public partial class AnsRtuOrderZc
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 时钟信息 or 版本信息</summary>
        public string TimeOrVersion { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------应答 发送周设置----------------------------------------------</para>
    /// <para>终端周设置</para>
    /// </summary>
    public partial class AnsRtuOrderSetWeekSet
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary>下发的周设在数据序号</summary>
        public int WeeksetId { get; set; }

        /// <summary>需要下发的周设置的总的数量</summary>
        public int OrderSum { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------应答 召测终端参数----------------------------------------------</para>
    /// <para>终端参数信息</para>
    /// </summary>
    public partial class AnsRtuOrderRtuPara
    {
        /// <summary> 心跳周期</summary>
        public int HeartBeatPeriod { get; set; }

        /// <summary>主报周期</summary>
        public int AlarmDelays { get; set; }

        /// <summary> 工作参数 报警延时（秒）</summary>
        public int ErrorDelays { get; set; }

        /// <summary> 通讯参数 主报周期</summary>
        public int ReportDataPeriod { get; set; }

        /// <summary> 电压量程</summary>
        public int VoRange { get; set; }

        /// <summary> 电压上限</summary>
        public int VoUpper { get; set; }

        /// <summary> 电压下限</summary>
        public int VoLower { get; set; }

        /// <summary> 开关量输出路数</summary>
        public int SwitchOutCount { get; set; }

        /// <summary> 开关量输入路数</summary>
        public int SwitchInCount { get; set; }

        /// <summary> 模拟量输入路数</summary>
        public int SinCount { get; set; }

        /// <summary> 终端开关量输出信息</summary>
        public List<Wlst.iifx.AnsRtuOrderRtuPara.ZcRtuSwitchOutInfo> SwitchOutInfo { get; set; }

        /// <summary> 回路信息</summary>
        public List<Wlst.iifx.AnsRtuOrderRtuPara.ZcRtuLoopInfo> LoopInfo { get; set; }

        public partial class ZcRtuSwitchOutInfo
        {
            /// <summary> 开关量序号</summary>
            public int SwitchOutId { get; set; }

            /// <summary> 开关灯时间;时分，hhmm-hhmm</summary>
            public string KOpenCloseTime { get; set; }

            /// <summary> 回路数</summary>
            public int KCount { get; set; }

            /// <summary> 开关量输出矢量</summary>
            public int SwitchOutVerctor { get; set; }

        }

        public partial class ZcRtuLoopInfo
        {
            /// <summary> 回路序号</summary>
            public int LoopId { get; set; }

            /// <summary> 回路电流量程</summary>
            public int Loop36Range { get; set; }

            /// <summary> 回路电流上限</summary>
            public int Loop36Qupper { get; set; }

            /// <summary> 回路电流下限</summary>
            public int L36Qlower { get; set; }

            /// <summary> 模拟量输入</summary>
            public int Sin36 { get; set; }

            /// <summary> 跳变报警 ； 0不报警 1报警</summary>
            public int SwitchChange { get; set; }

            /// <summary> 开关量输出40矢量</summary>
            public int SwitchIn40Vector { get; set; }

            /// <summary> 回路所属的  开关量序号 若为0 则表示为外箱门之类的，此时 仅loop_id、switch_change、sin_36 有效，其他均--</summary>
            public int SwitchOutId { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------应答 召测周设置----------------------------------------------</para>
    /// <para>终端周设置信息</para>
    /// </summary>
    public partial class AnsZcRtuWeekTimeSet
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 回路信息</summary>
        public List<Wlst.iifx.AnsZcRtuWeekTimeSet.ZcOneLoopOneWeekTime> Info { get; set; }

        public partial class ZcOneLoopOneWeekTime
        {
            /// <summary> 输出地址</summary>
            public int SwitchoutId { get; set; }

            /// <summary> 第几段</summary>
            public int SectionId { get; set; }

            /// <summary> 一周开关灯时间；开关时间 hhmm-hhmm ，周日-周六</summary>
            public List<string> OneweekTimeInfo { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------开关灯操作----------------------------------------------</para>
    /// <para>下发</para>
    /// </summary>
    public partial class RtuOpenCloseLight
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 操作信息 1、开灯，2、关灯，其他不操作</summary>
        public int OP { get; set; }

        /// <summary> 输出回路  1-16</summary>
        public List<int> SwitchoutLoops { get; set; }

    }

    /// <summary>控制中心批量操作</summary>
    public partial class RtuOpenCloseLightCenter
    {
        /// <summary> 操作信息 1、开灯，2、关灯，其他不操作</summary>
        public int OP { get; set; }

        /// <summary> 操作的设备清单</summary>
        public List<Wlst.iifx.RtuOpenCloseLightCenter.RtuOpenCloseLightCenterItem> Items { get; set; }

        public partial class RtuOpenCloseLightCenterItem
        {
            public int SwitchoutId { get; set; }

            public List<int> RtuIds { get; set; }

        }

    }

    /// <summary>应答</summary>
    public partial class AnsRtuOpenCloseLight
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 操作信息 1、开灯，2、关灯，其他不操作</summary>
        public int OP { get; set; }

        /// <summary> 输出回路  1-16</summary>
        public int SwitchoutId { get; set; }

    }

    /// <summary>----------------------------------------------终端周设置记录----------------------------------------------</summary>
    public partial class GetRtusHisweekset
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>终端列表 无数据则表示所有终端</summary>
        public List<int> ItemsRtu { get; set; }

        /// <summary> 时间</summary>
        public long DateStart { get; set; }

        /// <summary> 时间</summary>
        public long DateEnd { get; set; }

    }

    public partial class GetRtusHisweeksetbk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>终端列表 无数据则表示所有终端</summary>
        public List<Wlst.iifx.GetRtusHisweeksetbk.GetRtusHisweeksetbkItem> Itemsdata { get; set; }

        public partial class GetRtusHisweeksetbkItem
        {
            /// <summary>终端</summary>
            public int RtuId { get; set; }

            /// <summary> 设备逻辑地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary>K1-K3,K4-K6,K7-K8,20180101</summary>
            public string WeeksetType { get; set; }

            /// <summary> 时间  发送</summary>
            public long DateSnd { get; set; }

            /// <summary> 时间 应答</summary>
            public long DateAns { get; set; }

            public string Reamrk { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateSndString { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateAnsString { get; set; }

        }

    }

    /// <summary>
    /// <para>通信协议设计： 故障信息</para>
    /// <para>****************************删除故障*****************************</para>
    /// </summary>
    public partial class CurErrorDelete
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.CurErrorDelete.CurErrorItem> Items { get; set; }

        public int Op { get; set; }

        public partial class CurErrorItem
        {
            public int RtuId { get; set; }

            /// <summary> 设备逻辑地址</summary>
            public int ErrId { get; set; }

            /// <summary> 故障id</summary>
            public int TmlSubId1 { get; set; }

            /// <summary> 回路序号 或控制系序号或线路序号</summary>
            public int TmlSubId2 { get; set; }

        }

    }

    /// <summary>****************************故障自定义*****************************</summary>
    public partial class SetAlarmErrInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public List<Wlst.iifx.SetAlarmErrInfo.AlarmErrInfoView> ErrInfoView { get; set; }

        public partial class AlarmErrInfoView
        {
            public int ErrId { get; set; }

            /// <summary> 故障id</summary>
            public string ErrName { get; set; }

            /// <summary> 故障名称</summary>
            public string ErrNameCustome { get; set; }

            /// <summary> ⾃定义名称</summary>
            public string ErrRemark { get; set; }

            /// <summary> 故障解释</summary>
            public int ErrLevel { get; set; }

            /// <summary> 故障等级,1-写db,不推送,0-推送,2-推送置顶,3-</summary>
            public int EnableAlarm { get; set; }

            /// <summary> 允许报警</summary>
            public string ErrCheckKeyword { get; set; }

            /// <summary> 数字⽤关键字</summary>
            public int ErrTimeSet { get; set; }

            /// <summary> 时段报警0-全天,1-开灯,2-关灯,3-⾃定义</summary>
            public int DtErrCustomeStart { get; set; }

            /// <summary> ⾃定义时段开始 小时*60+分钟</summary>
            public int DtErrCustomeEnd { get; set; }

        }

    }

    /// <summary>****************************现存故障*****************************</summary>
    public partial class GtCurFault
    {
        public long DateStart { get; set; }

        /// <summary> 开始时间 0表示所有</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

        /// <summary> 空表示全部</summary>
        public List<int> AreaId { get; set; }

        /// <summary> 区域  若rtu_ids为空则读取此值</summary>
        public List<int> FaultCodes { get; set; }

        /// <summary> 空表示全部故障类型</summary>
        public int FaultLevel { get; set; }

        /// <summary>
        /// <para> 故障等级,1-写db,不推送,0-推送,2-推送置顶,3-全部</para>
        /// <para> 设备类型 0、所有设备，1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带</para>
        /// </summary>
        public int EquType { get; set; }

    }

    public partial class CurFault
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public List<Wlst.iifx.CurFault.CurFaultItem> Errs { get; set; }

        public partial class CurFaultItem
        {
            public long DateCreate { get; set; }

            /// <summary> 时间</summary>
            public int RtuId { get; set; }

            /// <summary> 设备逻辑地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary> 设备名称</summary>
            public int LoopId { get; set; }

            /// <summary> 回路或控制器地址</summary>
            public string LoopName { get; set; }

            /// <summary> 回路或控制器名称</summary>
            public int LampId { get; set; }

            /// <summary> 灯头地址</summary>
            public string LampName { get; set; }

            /// <summary> 灯头名称</summary>
            public int FaultId { get; set; }

            /// <summary> 故障编号</summary>
            public string FaultName { get; set; }

            /// <summary> 故障名称</summary>
            public double V { get; set; }

            /// <summary> 电压</summary>
            public double A { get; set; }

            /// <summary> 电流</summary>
            public double Upper { get; set; }

            /// <summary> 上限</summary>
            public double Lower { get; set; }

            /// <summary> 下限</summary>
            public int Count { get; set; }

            /// <summary> 在指定时间段内的报警次数</summary>
            public string Remark { get; set; }

            /// <summary>备注</summary>
            public int IsConfird { get; set; }

            /// <summary>
            /// <para> 是否已经确认 1、未确认，2、已经确认，3、无需确认[0]</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>****************************历史故障*****************************</summary>
    public partial class GtPreFault
    {
        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

        /// <summary> 空表示全部</summary>
        public List<int> AreaId { get; set; }

        /// <summary> 区域  若rtu_ids为空则读取此值</summary>
        public List<int> FaultCodes { get; set; }

        /// <summary> 空表示全部故障类型</summary>
        public int FaultLevel { get; set; }

        /// <summary>
        /// <para> 故障等级,1-写db,不推送,0-推送,2-推送置顶,3-全部</para>
        /// <para> 设备类型 0、所有设备，1、终端，2、单灯，3、光控，4、抄表，5、线路检测，6、漏电保护器,7、节能设备  请求时携带</para>
        /// </summary>
        public int EquType { get; set; }

        public Wlst.iifx.Head Head { get; set; }

    }

    public partial class PreFault
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public List<Wlst.iifx.PreFault.PreFaultItem> Errs { get; set; }

        public partial class PreFaultItem
        {
            public long DateCreate { get; set; }

            /// <summary> 时间</summary>
            public long DateDis { get; set; }

            /// <summary> 消警时间</summary>
            public int RtuId { get; set; }

            /// <summary> 设备逻辑地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary> 设备名称</summary>
            public int LoopId { get; set; }

            /// <summary> 回路或控制器地址</summary>
            public string LoopName { get; set; }

            /// <summary> 回路或控制器名称</summary>
            public int LampId { get; set; }

            /// <summary> 灯头地址</summary>
            public string LampName { get; set; }

            /// <summary> 灯头名称</summary>
            public int FaultId { get; set; }

            /// <summary> 故障编号</summary>
            public string FaultName { get; set; }

            /// <summary> 故障名称</summary>
            public double V { get; set; }

            /// <summary> 电压</summary>
            public double A { get; set; }

            /// <summary> 电流</summary>
            public double Upper { get; set; }

            /// <summary> 上限</summary>
            public double Lower { get; set; }

            /// <summary> 下限</summary>
            public string Remark { get; set; }

            /// <summary>备注</summary>
            public int IsConfird { get; set; }

            /// <summary>
            /// <para> 是否已经确认 1、未确认，2、已经确认，3、无需确认[0]</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

            /// <summary>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</summary>
            public string DateDisString { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------选项----------------------------------------------</para>
    /// <para>-----------------------------系统选项-----------------------------</para>
    /// </summary>
    public partial class SystemOptionInfo
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 系统名称</summary>
        public string SysName { get; set; }

        /// <summary> 系统经度</summary>
        public double GisLon { get; set; }

        /// <summary> 系统纬度</summary>
        public double GisLat { get; set; }

        /// <summary> 设备显示排序 1、按设备物理地址，2、按设备逻辑地址，3、按设备名称拼音，4、按分组顺序</summary>
        public int RtuOrder { get; set; }

        /// <summary> 设备树显示 1、按地理区域 ，2、按功能区域  目前系统不支持 按地理区域显示的 灰掉地理区域</summary>
        public int AreaType { get; set; }

        /// <summary> 光控显示</summary>
        public int LuxId { get; set; }

        /// <summary> 数据查询分页条数 （20-100）</summary>
        public int PageNum { get; set; }

        /// <summary> 手动开灯时确认方法 1、二次确认 ，2、密码确认 ，3、不验证</summary>
        public int LightOnCheck { get; set; }

        /// <summary> 手动关灯时确认方法 1、二次确认 ，2、密码确认 ，3、不验证</summary>
        public int LightOffCheck { get; set; }

        /// <summary> 选测失败判断时间 单位秒</summary>
        public int RtuMeasureDelay { get; set; }

        /// <summary> 运行信息列表显示 1、参考电流 ，2、亮灯率 ，3、互感器比值 ，4、线路 ，5、上限 ，6、下限 ，7、检测 ，8、历史数据列表</summary>
        public List<int> RtuRunningDisplay { get; set; }

        /// <summary> 终端轮询起始时间[分钟 hour*60+minutes]</summary>
        public int RtuTurnTime { get; set; }

        /// <summary> 终端周期执行间隔</summary>
        public int RtuInterval { get; set; }

        /// <summary> 单灯轮询起始时间[分钟 hour*60+minutes]</summary>
        public int SluTurnTime { get; set; }

        /// <summary> 单灯周期执行间隔</summary>
        public int SluInterval { get; set; }

        /// <summary> 线路检测轮询时间[分钟 hour*60+minutes]</summary>
        public int LduTurnTime { get; set; }

        /// <summary> 线路检测周期执行间隔</summary>
        public int LduInterval { get; set; }

        /// <summary> 漏电设备轮询时间[分钟 hour*60+minutes]</summary>
        public int LeakTurnTime { get; set; }

        /// <summary> 漏电周期执行间隔</summary>
        public int LeakInterval { get; set; }

        /// <summary> 节电设备轮询时间[分钟 hour*60+minutes]</summary>
        public int EsuTurnTime { get; set; }

        /// <summary> 节电周期执行间隔[分钟 hour*60+minutes]</summary>
        public int EsuInterval { get; set; }

        /// <summary> 电表轮询起始时间[分钟 hour*60+minutes]</summary>
        public int MruTurnTime { get; set; }

        /// <summary> 电表周期执行间隔[分钟 hour*60+minutes] 不可设置 1440</summary>
        public int MruInterval { get; set; }

        /// <summary> 光控轮询起始时间[分钟 hour*60+minutes] 不可设置 0</summary>
        public int LuxTurnTime { get; set; }

        /// <summary> 光控执行间隔  不可设置 2分钟</summary>
        public int LuxInterval { get; set; }

        /// <summary> 统计报警次数时间 单位：天</summary>
        public int FaultTotalDay { get; set; }

        /// <summary> 电压缺项最小值 单位：V</summary>
        public int VLoseValue { get; set; }

        /// <summary> 亮灯率报警下限值 单位：% [30-90]</summary>
        public int BrightRateLower { get; set; }

        /// <summary> 设备图标是否显示故障  1、显示 ，2、不显示  默认显示</summary>
        public int GisFaultDisplay { get; set; }

        /// <summary> 光控主报时间  秒</summary>
        public int LuxReportTime { get; set; }

    }

    /// <summary>
    /// <para>----------------------------------------------方案管理----------------------------------------------</para>
    /// <para>-----------------------------反馈时间表扼要信息、分组绑定时间表信息 供界面呈现-----------------------------</para>
    /// </summary>
    public partial class TimetablePlanBandingInfo
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 方案分组绑定信息列表</summary>
        public List<Wlst.iifx.TimetablePlanBandingInfo.TimePlanBandingInfo> ItemsBanding { get; set; }

        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 方案扼要列表</summary>
        public List<Wlst.iifx.TimetablePlanBandingInfo.TimePlanInfoBrief> ItemsPlan { get; set; }

        /// <summary> 方案与组绑定信息</summary>
        public partial class TimePlanBandingInfo
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 终端或组地址</summary>
            public int GroupOrRtuId { get; set; }

            /// <summary> 终端物理地址或组地址, 请求时发送，保存时不需要</summary>
            public int GroupOrRtuPhyId { get; set; }

            /// <summary> 终端或组名称</summary>
            public string GroupOrRtuName { get; set; }

            /// <summary> 开关量输出回路地址 1-8</summary>
            public List<int> SwitchoutId { get; set; }

            /// <summary> 方案地址  分别为K1-K8使用的方案地址 ，0表示未使用任何方案  必须填满1-8的数据</summary>
            public List<int> TimePlanId { get; set; }

        }

        /// <summary> 方案扼要信息</summary>
        public partial class TimePlanInfoBrief
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 方案地址</summary>
            public int TimePlanId { get; set; }

            /// <summary> 终端或组名称</summary>
            public string TimePlanName { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------保存方案组合信息-----------------------------</para>
    /// <para>用户绑定 终端时间方案与特设时间方案的  绑定关系</para>
    /// </summary>
    public partial class TimetablePlanBandingSpecialPlanInfoSave
    {
        /// <summary> 方案信息列表</summary>
        public List<Wlst.iifx.TimetablePlanBandingSpecialPlanInfoSave.PlanInfoBandingSpecialPlan> ItemsBanding { get; set; }

        /// <summary> 方案信息</summary>
        public partial class PlanInfoBandingSpecialPlan
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 时间表方案地址</summary>
            public int TimePlanId { get; set; }

            /// <summary> 方案地址</summary>
            public int SpecialTimePlanId { get; set; }

        }

    }

    /// <summary>
    /// <para>-----------------------------加载现存终端时间方案信息-----------------------------</para>
    /// <para>加载区域的  时间表列表  与 特设方案列表</para>
    /// </summary>
    public partial class TimetablePlanInfoBrief
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 区域地址 为空即为全部</summary>
        public List<int> AreaIds { get; set; }

        /// <summary> 方案信息列表</summary>
        public List<Wlst.iifx.TimetablePlanInfoBrief.TimePlanInfoBrief> ItemsTimePlan { get; set; }

        /// <summary> 特设方案信息</summary>
        public List<Wlst.iifx.TimetablePlanInfoBrief.SpecialTimePlanInfoBrief> ItemsSpecialPlan { get; set; }

        /// <summary> 方案扼要信息</summary>
        public partial class TimePlanInfoBrief
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 方案地址</summary>
            public int TimePlanId { get; set; }

            /// <summary> 方案名称</summary>
            public string TimePlanName { get; set; }

            /// <summary> 方案描述</summary>
            public string TimePlanDesc { get; set; }

            /// <summary> 使用特设方案</summary>
            public int SpecialPlanId { get; set; }

            /// <summary> 区域名称</summary>
            public string AreaName { get; set; }

        }

        /// <summary> 特设方案扼要信息</summary>
        public partial class SpecialTimePlanInfoBrief
        {
            /// <summary> 区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 特设方案地址</summary>
            public int PlanId { get; set; }

            /// <summary> 特设方案名称</summary>
            public string PlanName { get; set; }

            /// <summary> 开始时间</summary>
            public long DateStart { get; set; }

            /// <summary> 结束时间</summary>
            public long DateEnd { get; set; }

        }

    }

    /// <summary>-----------------------------请求的时间方案或特设方案信息-----------------------------</summary>
    public partial class RequestRtuPlanInfo
    {
        /// <summary> 区域</summary>
        public int AreaId { get; set; }

        /// <summary> 方案序号</summary>
        public int TimePlanId { get; set; }

    }

    /// <summary>-----------------------------请求返回的时间方案信息-----------------------------</summary>
    public partial class OneRtuPlanInfo
    {
        /// <summary> 区域</summary>
        public int AreaId { get; set; }

        /// <summary> 方案序号</summary>
        public int TimePlanId { get; set; }

        /// <summary> 方案名称</summary>
        public string TimePlanName { get; set; }

        /// <summary> 方案描述</summary>
        public string TimePlanDesc { get; set; }

        /// <summary> 开灯光控值</summary>
        public int LuxOnValue { get; set; }

        /// <summary> 关灯光控值</summary>
        public int LuxOffValue { get; set; }

        /// <summary> 光控设备 0 则为偏移 ，有光控则为光控</summary>
        public int LuxId { get; set; }

        /// <summary> 备用光控设备</summary>
        public int LuxBackupId { get; set; }

        /// <summary> 开灯日落偏移值</summary>
        public int LightOnOffset { get; set; }

        /// <summary> 关灯日出偏移值</summary>
        public int LightOffOffset { get; set; }

        /// <summary> 光控有效时间 10-60</summary>
        public int LuxEffective { get; set; }

        /// <summary> 包含的开关灯规则</summary>
        public List<Wlst.iifx.OneRtuPlanInfo.TimeTableOnedayPlan> ItemsSet { get; set; }

        /// <summary>辅助参数 本周日出时间，周日到周六的，时间为 hour*60+minutes</summary>
        public List<int> ItemsSunRaiseTimeThisWeek { get; set; }

        /// <summary>辅助参数 本周日落时间，周日到周六的，时间为 hour*60+minutes</summary>
        public List<int> ItemsSunSetTimeThisWeek { get; set; }

        /// <summary>辅助参数  光控设备参数</summary>
        public List<Wlst.iifx.OneRtuPlanInfo.LuxParaInfoItem> ItemsLux { get; set; }

        /// <summary>一天的开关灯的信息</summary>
        public partial class TimeTableOnedayPlan
        {
            /// <summary> 本规则那几天使用 0为周日  1-6 表示星期几</summary>
            public int DaysWeekUsed { get; set; }

            /// <summary>段序号  最多4段  3005设备只有一段</summary>
            public int SectionId { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、开灯定长</summary>
            public int TypeOn { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、关灯定长</summary>
            public int TypeOff { get; set; }

            /// <summary>开灯最后时限</summary>
            public int TimeOn { get; set; }

            /// <summary>关灯最后时限</summary>
            public int TimeOff { get; set; }

        }

        /// <summary>光控设备信息</summary>
        public partial class LuxParaInfoItem
        {
            /// <summary>光控设备地址</summary>
            public int LuxId { get; set; }

            /// <summary>如果光控为主设备，则主设备的物理地址，如果为辅助设备则连接的主设备的物理地址</summary>
            public int LuxPhyId { get; set; }

            /// <summary>光控设备名称</summary>
            public string LuxName { get; set; }

        }

    }

    /// <summary>-----------------------------增加或修改时间方案信息-----------------------------</summary>
    public partial class AddOrUpdateRtuPlanInfo
    {
        /// <summary> 区域</summary>
        public int AreaId { get; set; }

        /// <summary> 方案序号 为0 即为增加</summary>
        public int TimePlanId { get; set; }

        /// <summary> 方案名称</summary>
        public string TimePlanName { get; set; }

        /// <summary> 方案描述</summary>
        public string TimePlanDesc { get; set; }

        /// <summary> 开灯光控值</summary>
        public int LuxOnValue { get; set; }

        /// <summary> 关灯光控值</summary>
        public int LuxOffValue { get; set; }

        /// <summary> 光控设备 0 则为偏移 ，有光控则为光控</summary>
        public int LuxId { get; set; }

        /// <summary> 备用光控设备</summary>
        public int LuxBackupId { get; set; }

        /// <summary> 开灯日落偏移值</summary>
        public int LightOnOffset { get; set; }

        /// <summary> 关灯日出偏移值</summary>
        public int LightOffOffset { get; set; }

        /// <summary> 光控有效时间 10-60</summary>
        public int LuxEffective { get; set; }

        /// <summary> 包含的开关灯规则</summary>
        public List<Wlst.iifx.AddOrUpdateRtuPlanInfo.TimeTableOnedayPlan> ItemsSet { get; set; }

        /// <summary>一天的开关灯的信息</summary>
        public partial class TimeTableOnedayPlan
        {
            /// <summary> 本规则那几天使用 0为周日  1-6 表示星期几</summary>
            public int DaysWeekUsed { get; set; }

            /// <summary>段序号  最多4段  3005设备只有一段</summary>
            public int SectionId { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、开灯定长</summary>
            public int TypeOn { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、关灯定长</summary>
            public int TypeOff { get; set; }

            /// <summary>开灯最后时限</summary>
            public int TimeOn { get; set; }

            /// <summary>关灯最后时限</summary>
            public int TimeOff { get; set; }

        }

    }

    /// <summary>-----------------------------请求返回的特设方案信息-----------------------------</summary>
    public partial class OneSpecialRtuTimePlanInfo
    {
        /// <summary> 区域</summary>
        public int AreaId { get; set; }

        /// <summary> 方案序号  为0 即为增加</summary>
        public int SpecialPlanId { get; set; }

        /// <summary> 方案名称</summary>
        public string SpecialPlanName { get; set; }

        /// <summary> 方案描述</summary>
        public string SpecialPlanDesc { get; set; }

        /// <summary> 开灯光控值</summary>
        public int LuxOnValue { get; set; }

        /// <summary> 关灯光控值</summary>
        public int LuxOffValue { get; set; }

        /// <summary> 光控设备</summary>
        public int LuxId { get; set; }

        /// <summary> 备用光控设备</summary>
        public int LuxBackupId { get; set; }

        /// <summary> 开灯日落偏移值</summary>
        public int LightOnOffset { get; set; }

        /// <summary> 关灯日出偏移值</summary>
        public int LightOffOffset { get; set; }

        /// <summary> 光控有效时间</summary>
        public int LuxEffective { get; set; }

        /// <summary> 开始时间</summary>
        public long DateStart { get; set; }

        /// <summary> 结束时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 特设方案信息列表</summary>
        public List<Wlst.iifx.OneSpecialRtuTimePlanInfo.SpecialTimePlanInfo> ItemsSpecial { get; set; }

        /// <summary> 特设方案绑定列表</summary>
        public List<int> ItemsBanding { get; set; }

        /// <summary>辅助参数 一年的日出日落时间，时间为 hour*60+minutes</summary>
        public List<Wlst.iifx.OneSpecialRtuTimePlanInfo.SunSetRiseInfoItem> ItemsSunRiseSet { get; set; }

        /// <summary>辅助参数  光控设备参数</summary>
        public List<Wlst.iifx.OneRtuPlanInfo.LuxParaInfoItem> ItemsLux { get; set; }

        /// <summary> 特设方案控制信息</summary>
        public partial class SpecialTimePlanInfo
        {
            /// <summary>  日期 用tick 如20180309 则使用  20180309 12：00 的时间标记该天</summary>
            public long Date { get; set; }

            /// <summary>段序号  最多4段  3005设备只有一段</summary>
            public int SectionId { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、开灯定长</summary>
            public int TypeOn { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、关灯定长</summary>
            public int TypeOff { get; set; }

            /// <summary>开灯最后时限</summary>
            public int TimeOn { get; set; }

            /// <summary>关灯最后时限</summary>
            public int TimeOff { get; set; }

        }

        public partial class SunSetRiseInfoItem
        {
            /// <summary>月</summary>
            public int Month { get; set; }

            /// <summary>日</summary>
            public int Day { get; set; }

            /// <summary>日出时间</summary>
            public int Sunrise { get; set; }

            /// <summary>日落时间</summary>
            public int Sunset { get; set; }

        }

    }

    /// <summary>-----------------------------增加或修改特设方案信息-----------------------------</summary>
    public partial class AddOrUpdateSpecialRtuTimePlanInfo
    {
        /// <summary> 区域</summary>
        public int AreaId { get; set; }

        /// <summary> 方案序号  为0 即为增加</summary>
        public int SpecialPlanId { get; set; }

        /// <summary> 方案名称</summary>
        public string SpecialPlanName { get; set; }

        /// <summary> 方案描述</summary>
        public string SpecialPlanDesc { get; set; }

        /// <summary> 开灯光控值</summary>
        public int LuxOnValue { get; set; }

        /// <summary> 关灯光控值</summary>
        public int LuxOffValue { get; set; }

        /// <summary> 光控设备</summary>
        public int LuxId { get; set; }

        /// <summary> 备用光控设备</summary>
        public int LuxBackupId { get; set; }

        /// <summary> 开灯日落偏移值</summary>
        public int LightOnOffset { get; set; }

        /// <summary> 关灯日出偏移值</summary>
        public int LightOffOffset { get; set; }

        /// <summary> 光控有效时间</summary>
        public int LuxEffective { get; set; }

        /// <summary> 开始时间</summary>
        public long DateStart { get; set; }

        /// <summary> 结束时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 特设方案信息列表</summary>
        public List<Wlst.iifx.AddOrUpdateSpecialRtuTimePlanInfo.SpecialTimePlanInfo> ItemsSpecial { get; set; }

        /// <summary> 特设方案控制信息</summary>
        public partial class SpecialTimePlanInfo
        {
            /// <summary>  日期 用tick 如20180309 则使用  20180309 12：00 的时间标记该天</summary>
            public long Date { get; set; }

            /// <summary>段序号  最多4段  3005设备只有一段</summary>
            public int SectionId { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、开灯定长</summary>
            public int TypeOn { get; set; }

            /// <summary>1、光控，2、偏移，3、定时，4、关灯定长</summary>
            public int TypeOff { get; set; }

            /// <summary>开灯最后时限</summary>
            public int TimeOn { get; set; }

            /// <summary>关灯最后时限</summary>
            public int TimeOff { get; set; }

        }

    }

    /// <summary>
    /// <para>-----------------------------删除-----------------------------</para>
    /// <para>删除</para>
    /// </summary>
    public partial class DeleteTimetablePlanInfo
    {
        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 方案序号</summary>
        public int PlanId { get; set; }

    }

    /// <summary>
    /// <para>通信协议设计： 系统数据查询</para>
    /// <para>****************************操作记录查询*****************************</para>
    /// </summary>
    public partial class GetRecordTypes
    {
        public int RecordsTypeIn { get; set; }

    }

    public partial class GetRecordTypesBk
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.GetRecordTypesBk.RecordTypesItem> Items { get; set; }

        public partial class RecordTypesItem
        {
            public int TypeId { get; set; }

            /// <summary> 操作编号</summary>
            public string TypeName { get; set; }

        }

    }

    /// <summary>****************************操作记录查询*****************************</summary>
    public partial class GtOpRecord
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

        /// <summary> 空表示全部</summary>
        public List<int> AreaId { get; set; }

        /// <summary> 区域  若rtu_ids为空则读取此值 此为空则表示整个系统</summary>
        public List<int> RecordTypes { get; set; }

    }

    public partial class OpRecord
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public List<Wlst.iifx.OpRecord.OpRecordItem> Items { get; set; }

        public partial class OpRecordItem
        {
            public long DateCreate { get; set; }

            /// <summary> 时间</summary>
            public int RtuId { get; set; }

            /// <summary> 设备地址</summary>
            public int RtuPhyid { get; set; }

            /// <summary> 设备地址</summary>
            public string RtuName { get; set; }

            /// <summary> 设备名称</summary>
            public int RtuFid { get; set; }

            /// <summary> 设备父设备地址</summary>
            public string RtuFname { get; set; }

            /// <summary> 父设备名称</summary>
            public string OpTypeName { get; set; }

            /// <summary> 操作类别名称</summary>
            public string OpName { get; set; }

            /// <summary>
            /// <para> 操作名称</para>
            /// <para>		optional int32 op_id = 7; // 操作id</para>
            /// </summary>
            public string OpUser { get; set; }

            /// <summary> 操作用户 或 名称</summary>
            public int OrderTypeId { get; set; }

            /// <summary> 1、用户下发，2、用户设置，3、设备应答</summary>
            public string OrderTypeName { get; set; }

            /// <summary> 用户下发，2、用户设置，3、设备应答</summary>
            public string Content { get; set; }

            /// <summary>内容</summary>
            public string Remark { get; set; }

            /// <summary>
            /// <para> 备注</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>
    /// <para>通信协议设计： 统计信息</para>
    /// <para>----------------------------------------------系统运行情况----------------------------------------------</para>
    /// </summary>
    public partial class SysInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SysInfo.SysInfoView> SysInfoField { get; set; }

        /// <summary>服务器运行情况</summary>
        public List<Wlst.iifx.SysInfo.AppInfoView> AppOursInfo { get; set; }

        /// <summary>关键进行运行情况</summary>
        public List<Wlst.iifx.SysInfo.AppInfoView> AppAllInfo { get; set; }

        public partial class SysInfoView
        {
            public string PcIp { get; set; }

            /// <summary> 服务器IP</summary>
            public string PcName { get; set; }

            /// <summary> 故障名称</summary>
            public string NetState { get; set; }

            /// <summary> 网络情况</summary>
            public int MemoryUsed { get; set; }

            /// <summary> 使用内存  M</summary>
            public int MemoryTotal { get; set; }

            /// <summary> 内存总数 M</summary>
            public int CpuUsed { get; set; }

            /// <summary> CPU使用情况  99 则代表  99%</summary>
            public int NetUsed { get; set; }

            /// <summary> 网络使用情况  3  则需显示 3%</summary>
            public string DtCreate { get; set; }

        }

        public partial class AppInfoView
        {
            public string PcIp { get; set; }

            /// <summary> 服务器IP</summary>
            public string AppName { get; set; }

            /// <summary> 进程名称</summary>
            public string State { get; set; }

            /// <summary> 进程状态</summary>
            public int MemoryUsed { get; set; }

            /// <summary> 使用内存  M</summary>
            public int ThreadUsed { get; set; }

            /// <summary> 线程数量</summary>
            public int CpuUsed { get; set; }

            /// <summary> CPU使用情况  99 则代表  99%</summary>
            public int HandleUsed { get; set; }

            /// <summary> 句柄数量</summary>
            public string DtCreate { get; set; }

            /// <summary> 数据采集时间  2018-6-12 18:29:15</summary>
            public int CpuTime { get; set; }

            /// <summary> CPU时间  单位为秒</summary>
            public string StartTime { get; set; }

            /// <summary>  时间  单位为秒</summary>
            public int Pid { get; set; }

        }

    }

    /// <summary>----------------------------------------------终端控制成功率----------------------------------------------</summary>
    public partial class GtControlSuccessRate
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

        /// <summary> 空表示全部终端</summary>
        public int OperateType { get; set; }

    }

    public partial class ControlSuccessRate
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.ControlSuccessRate.ControlSuccessRateItem> Items { get; set; }

        public partial class ControlSuccessRateItem
        {
            public int OperateType { get; set; }

            /// <summary> 操作类型 1、开灯，2、关灯</summary>
            public double LuxValue { get; set; }

            /// <summary> 光照度值</summary>
            public int OperateLoopNum { get; set; }

            /// <summary> 操作回路数</summary>
            public int OperateSuccessLoopNum { get; set; }

            /// <summary> 操作成功回路数</summary>
            public double OperateSuccessRate { get; set; }

            /// <summary> 成功率</summary>
            public long DateCreate { get; set; }

            /// <summary> 执行时间</summary>
            public int OperateRtuNum { get; set; }

            /// <summary>
            /// <para>操作终端数</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>----------------------------------------------终端能耗统计 一天所有设备按天统计----------------------------------------------</summary>
    public partial class GtRtuElecDay
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

    }

    public partial class RtuElecDay
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtuElecDay.RtuElecTotal> Items { get; set; }

        public partial class RtuElecTotal
        {
            public int RtuSumTotal { get; set; }

            /// <summary> 终端数</summary>
            public double ElecTotal { get; set; }

            /// <summary> 总耗电量</summary>
            public double ElecAverage { get; set; }

            /// <summary> 平均耗电量</summary>
            public long DateCreate { get; set; }

            /// <summary>
            /// <para> 执行时间</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>----------------------------------------------终端能耗统计 按终端统计指定日期的 ----------------------------------------------</summary>
    public partial class GtRtuElecRtu
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

    }

    public partial class RtuElecRtu
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtuElecRtu.RtuElecItem> Items { get; set; }

        public partial class RtuElecItem
        {
            public int RtuId { get; set; }

            /// <summary> 终端id</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary> 终端名称</summary>
            public double ElecValue { get; set; }

            /// <summary> 耗电量</summary>
            public int Days { get; set; }

            /// <summary> 统计天数</summary>
            public double ElecAverage { get; set; }

        }

    }

    /// <summary>----------------------------------------------终端报警处理统计----------------------------------------------</summary>
    public partial class GtFaultStatisticsDay
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

    }

    public partial class FaultStatisticsDay
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.FaultStatisticsDay.FaultStatistics> Items { get; set; }

        public partial class FaultStatistics
        {
            public int RtuSumTotal { get; set; }

            /// <summary> 终端数</summary>
            public double FaultRtuNum { get; set; }

            /// <summary> 故障终端数</summary>
            public double FaultRtuRate { get; set; }

            /// <summary> 终端故障率</summary>
            public double FaultNum { get; set; }

            /// <summary> 故障次数</summary>
            public double FaultRepairTime { get; set; }

            /// <summary> 总故障处理时间  ,消警时间-报警时间</summary>
            public double FaultRepairTimeAverage { get; set; }

            /// <summary> 平均故障处理时间</summary>
            public long DateCreate { get; set; }

            /// <summary>
            /// <para> 执行时间</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>----------------------------------------------终端报警处理时间统计----------------------------------------------</summary>
    public partial class GtFaultStatisticsRtu
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

    }

    public partial class FaultStatisticsRtu
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.FaultStatisticsRtu.FaultStatisticsItem> Items { get; set; }

        public partial class FaultStatisticsItem
        {
            public int RtuId { get; set; }

            /// <summary> 终端id</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary> 终端名称</summary>
            public int FaultNum { get; set; }

            /// <summary> 故障次数</summary>
            public double FaultRepairTime { get; set; }

            /// <summary> 故障处理时间  ,消警时间-报警时间</summary>
            public double FaultRepairTimeAverage { get; set; }

            /// <summary> 平均故障处理时间</summary>
            public double RunTime { get; set; }

            /// <summary> 正常运行时间</summary>
            public double FaultTime { get; set; }

            /// <summary> 故障时间</summary>
            public int Days { get; set; }

        }

    }

    /// <summary>----------------------------------------------终端峰值统计----------------------------------------------</summary>
    public partial class GtRtuDataStatistics
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

        /// <summary> 空表示全部终端</summary>
        public int PeakType { get; set; }

        /// <summary> 峰值类型 1、电压最大值，2、电压最小值，3、电流最大值，4、电流最小值，5、功率最大值，6、功率最小值，-1、全部</summary>
        public double Diff { get; set; }

    }

    public partial class RtuDataStatistics
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtuDataStatistics.RtuDataStatisticsItem> Items { get; set; }

        public partial class RtuDataStatisticsItem
        {
            public int RtuId { get; set; }

            /// <summary> 终端id</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary> 终端名称</summary>
            public int LoopId { get; set; }

            /// <summary> 回路id</summary>
            public int PeakTypeId { get; set; }

            /// <summary> 峰值类型id</summary>
            public string PeakType { get; set; }

            /// <summary> 峰值类型</summary>
            public int Value { get; set; }

            /// <summary>峰值</summary>
            public double ValueAverage { get; set; }

            /// <summary> 平均</summary>
            public double ValueDeviationRate { get; set; }

            /// <summary> 偏差比例</summary>
            public long DateCreate { get; set; }

            /// <summary>
            /// <para> 执行时间</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

            public string LoopName { get; set; }

        }

    }

    /// <summary>----------------------------------------------单灯亮灯率统计----------------------------------------------</summary>
    public partial class GtSluLightOnRate
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> RtuIds { get; set; }

    }

    public partial class SluLightOnRate
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluLightOnRate.SluLightOnRateItem> Items { get; set; }

        public partial class SluLightOnRateItem
        {
            public int SluNum { get; set; }

            /// <summary> 终端总数</summary>
            public int SluCtrlCount { get; set; }

            /// <summary> 控制器总数[灯杆]</summary>
            public int SluLampCount { get; set; }

            /// <summary> 灯头总数</summary>
            public double SluLightRate { get; set; }

            /// <summary> 单灯亮灯率</summary>
            public long DateCreate { get; set; }

            /// <summary> 采集时间</summary>
            public int SluLampShouldLighton { get; set; }

            /// <summary> 灯头应亮灯数</summary>
            public int SluLampLighton { get; set; }

            /// <summary>
            /// <para> 灯头实际亮灯数</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>
    /// <para>通信协议设计： 设备管理</para>
    /// <para>****************************设备型号*****************************</para>
    /// </summary>
    public partial class EquipmentInfoType
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<int> EquIds { get; set; }

        /// <summary>请求的设备，1、终端，2、单灯，3、漏电</summary>
        public List<Wlst.iifx.EquipmentInfoTypeItem> ItemType { get; set; }

    }

    public partial class EquipmentInfoTypeItem
    {
        public int EquId { get; set; }

        /// <summary>设备类型</summary>
        public int TypeId { get; set; }

        /// <summary>设备型号</summary>
        public string TypeName { get; set; }

    }

    /// <summary>****************************新增设备*****************************</summary>
    public partial class EquipmentInfoAdd
    {
        public int ThisEquimentAttachRtuId { get; set; }

        /// <summary> 如果增加的为主设备则为0 ，如果为附属设备则该地址为附属设备附属到的主设备地址</summary>
        public int PhyId { get; set; }

        /// <summary>增加的设备的物理地址 默认1</summary>
        public int EquipmentMode { get; set; }

        /// <summary>设备模型：601-节能， 3005-六路终端设备，3006-八路终端设备， 3090-六路防盗的六路终端设备，1090-两路线路防盗设备，30920- 3090型终端设备作为485附属设备接入终端的虚拟型号，2090-单灯集中器设备，2091-广州南瑞单灯设备， 1080-光控设备，1050-电表设备，9001-漏电设备</summary>
        public int AreaId { get; set; }

        /// <summary> 增加新终端到的区域地址</summary>
        public int GroupId { get; set; }

        /// <summary>增加新终端到的组地址</summary>
        public string EquName { get; set; }

    }

    public partial class EquipmentInfoUpdate
    {
        public int RtuId { get; set; }

        /// <summary>增加的设备的物理地址 默认1</summary>
        public int RtuPhyId { get; set; }

        /// <summary>增加的设备的物理地址 默认1</summary>
        public int EquipmentMode { get; set; }

        /// <summary>设备模型：601-节能， 3005-六路终端设备，3006-八路终端设备， 3090-六路防盗的六路终端设备，1090-两路线路防盗设备，30920- 3090型终端设备作为485附属设备接入终端的虚拟型号，2090-单灯集中器设备，2091-广州南瑞单灯设备，1080-光控设备，1050-电表设备，9001-漏电设备</summary>
        public int GroupId { get; set; }

        /// <summary>增加新终端到的组地址</summary>
        public string EquName { get; set; }

    }

    public partial class EquipmentInfoBk
    {
        public Wlst.iifx.Head Head { get; set; }

        public int RtuId { get; set; }

    }

    /// <summary>****************************删除设备*****************************</summary>
    public partial class EquipmentInfoDelete
    {
        public int RtuId { get; set; }

    }

    public partial class EquipmentInfoDeleteBk
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<int> RtuIds { get; set; }

    }

    /// <summary>
    /// <para>****************************终端参数信息*****************************</para>
    /// <para>基本参数</para>
    /// </summary>
    public partial class RtuEquipmentBase
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary> 设备物理地址</summary>
        public int RtuPhyId { get; set; }

        /// <summary> 设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 工作状态  类型 数据 0、不用,1、 停运，2、 使用等</summary>
        public int RtuStateCode { get; set; }

        /// <summary> 设备的实际工作状态  类型 数据  1、 停运，2、 使用,0、未知 若实际状态与设置状态不符则会自动下发</summary>
        public int RtuRealState { get; set; }

        /// <summary> 设备型号  3005 601等</summary>
        public int RtuModel { get; set; }

        /// <summary> 设备安装信息</summary>
        public string RtuInstallAddr { get; set; }

        /// <summary> 唯一识别码 其他未知的参数信息</summary>
        public string RtuArgu { get; set; }

        /// <summary> 备注信息</summary>
        public string RtuRemark { get; set; }

        /// <summary> 建立时间</summary>
        public long DateCreate { get; set; }

        /// <summary> 数据最后更新时间</summary>
        public long DateUpdate { get; set; }

        /// <summary> 唯一识别码</summary>
        public string Idf { get; set; }

        /// <summary> 电压上限</summary>
        public int VoltageAlarmUpperlimit { get; set; }

        /// <summary> 电压下限</summary>
        public int VoltageAlarmLowerlimit { get; set; }

        /// <summary> 是否开关量输入状态有电流来判断</summary>
        public bool IsSwitchinputJudgebyA { get; set; }

        /// <summary> 终端使用类型1、路灯，2、亮化，3、广告，4、其他 默认1</summary>
        public int RtuUsedType { get; set; }

        /// <summary>总电流过载 0未设置</summary>
        public double Aoverload { get; set; }

        /// <summary>总电流过载 0未设置</summary>
        public double AoverAlittle { get; set; }

        /// <summary> Ip地址</summary>
        public string StaticIp { get; set; }

        /// <summary> 手机号码</summary>
        public string MobileNo { get; set; }

        /// <summary> 模块序列号</summary>
        public string ModuleSn { get; set; }

        /// <summary> 是否有电能模块 0 无 1 有</summary>
        public int IsHasElec { get; set; }

        /// <summary> ABC三相电流互感比</summary>
        public List<int> PhaseRadio { get; set; }

    }

    /// <summary> 参数</summary>
    public partial class RtuPara
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public Wlst.iifx.RtuEquipmentBase Baseinfo { get; set; }

        public List<Wlst.iifx.RtuPara.RtuAnalogParameter> LoopsInfo { get; set; }

        /// <summary>照明回路参数</summary>
        public List<Wlst.iifx.RtuPara.RtuSwitchInputParameter> InputsInfo { get; set; }

        /// <summary>门类的输入参数</summary>
        public List<Wlst.iifx.RtuPara.RtuSwitchOutputParameter> OutputsInfo { get; set; }

        /// <summary>开关量输出参数</summary>
        public int RtuId { get; set; }

        /// <summary> 当前设备的操作权限 ，0、无权限，1、可查看数据，2、具备开关灯与设置等高级权限</summary>
        public int Right { get; set; }

        /// <summary> 模拟量参数表</summary>
        public partial class RtuAnalogParameter
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 回路序号</summary>
            public int LoopId { get; set; }

            /// <summary> 回路名称</summary>
            public string LoopName { get; set; }

            /// <summary> 电流量程</summary>
            public int CurrentRange { get; set; }

            /// <summary> 电流报警上限</summary>
            public int CurrentAlarmUpperlimit { get; set; }

            /// <summary> 电流报警下限</summary>
            public int CurrentAlarmLowerlimit { get; set; }

            /// <summary> 开关量输入矢量</summary>
            public int VectorSwitchIn { get; set; }

            /// <summary> 电压相位代码  0A 1B 2C</summary>
            public int VoltagePhaseCode { get; set; }

            /// <summary> 开关量输出序号</summary>
            public int SwitchOutputId { get; set; }

            /// <summary> 互感器比值</summary>
            public int MutualInductorRatio { get; set; }

            /// <summary> 矢量  模拟量矢量</summary>
            public int VectorMoniliang { get; set; }

            /// <summary> 开关量 是否跳变报警</summary>
            public bool IsAlarmHop { get; set; }

            /// <summary> 开关量输入 是否为常闭状态</summary>
            public bool IsSwitchStateClose { get; set; }

            /// <summary> 是否屏蔽回路  0、正常，1、屏蔽，2 、隐藏</summary>
            public int IsShieldLoop { get; set; }

            /// <summary> 如果屏蔽小电流，则屏蔽值</summary>
            public double ShieldLittleA { get; set; }

            /// <summary> 回路背景色</summary>
            public string BgColor { get; set; }

        }

        /// <summary> 终端开关量输入参数表(外箱门)</summary>
        public partial class RtuSwitchInputParameter
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 开关量序号</summary>
            public int LoopId { get; set; }

            /// <summary> 开关量输入名称</summary>
            public string SwitchName { get; set; }

            /// <summary> 接触器状态是否常闭</summary>
            public bool IsSwitchStateClose { get; set; }

            /// <summary> 是否跳变报警</summary>
            public bool IsAlarmHop { get; set; }

            /// <summary> 矢量</summary>
            public int SwitchVector { get; set; }

            /// <summary> 回路背景色</summary>
            public string BgColor { get; set; }

        }

        /// <summary> 终端开关量输出参数表</summary>
        public partial class RtuSwitchOutputParameter
        {
            /// <summary> 设备逻辑地址</summary>
            public int RtuId { get; set; }

            /// <summary> 开关量输出序号</summary>
            public int SwitchId { get; set; }

            /// <summary> 开关量输出名称</summary>
            public string SwitchName { get; set; }

            /// <summary> 矢量</summary>
            public int SwitchVecotr { get; set; }

        }

    }

    /// <summary> 参数</summary>
    public partial class RqRtuPara
    {
        public int RtuId { get; set; }

    }

    /// <summary>****************************单灯集中器数据*****************************</summary>
    public partial class GtSludataCon
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>分页需要</summary>
        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> SluIds { get; set; }

    }

    public partial class ReplygtSludataCon
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.ReplygtSludataCon.DataSluCon> ItemsData { get; set; }

        /// <summary> 单灯集中器选测数据</summary>
        public partial class DataSluCon
        {
            /// <summary> 数据发生时间  与回路数据联合查询组合成最新数据</summary>
            public long DateCreate { get; set; }

            public string DateCreateStr { get; set; }

            public int SluId { get; set; }

            /// <summary>设备显示需要的物理地址</summary>
            public int SluPhyId { get; set; }

            /// <summary>设备名称</summary>
            public string RtuName { get; set; }

            /// <summary> 复位次数 大前天</summary>
            public int Rest3 { get; set; }

            /// <summary> 复位次数 前天</summary>
            public int Rest2 { get; set; }

            /// <summary> 复位次数 昨天</summary>
            public int Rest1 { get; set; }

            /// <summary> 复位次数 今天</summary>
            public int Rest0 { get; set; }

            /// <summary> 停运 0-正常，1-停运</summary>
            public bool IsSluStop { get; set; }

            /// <summary> 允许主报 0-禁止主报，1-允许主报</summary>
            public bool IsEnableAlarm { get; set; }

            /// <summary> 开机申请 0-非开机，1-开机</summary>
            public bool IsPowerOn { get; set; }

            /// <summary> gprs通讯 0-485,1-gprs</summary>
            public bool IsGprs { get; set; }

            /// <summary> 集中器参数错误</summary>
            public bool IsConcentratorArgsError { get; set; }

            /// <summary> 控制器参数错误</summary>
            public bool IsCtrlArgsError { get; set; }

            /// <summary> zigbee模块出错</summary>
            public bool IsZigbeeError { get; set; }

            /// <summary> 电力载波模块出错</summary>
            public bool IsCarrierError { get; set; }

            /// <summary> fram出错</summary>
            public bool IsFramError { get; set; }

            /// <summary> 蓝牙模块出错</summary>
            public bool IsBluetoothError { get; set; }

            /// <summary> 硬件时钟出错</summary>
            public bool IsTimerError { get; set; }

            /// <summary> 未知控制器</summary>
            public int UnknowCtrlCount { get; set; }

            /// <summary> 通信信道 -10为当前值</summary>
            public int CommunicationChannel { get; set; }

            /// <summary>集中器的方案信息</summary>
            public List<Wlst.iifx.ReplygtSludataCon.DataSluConPlanInfo> ItemsPlan { get; set; }

            /// <summary> 单灯分组id</summary>
            public int GroupId { get; set; }

            /// <summary> 单灯分组名称</summary>
            public string GroupName { get; set; }

            /// <summary> 单灯区域id</summary>
            public int AreaId { get; set; }

            /// <summary> 单灯区域名称</summary>
            public string AreaName { get; set; }

        }

        public partial class DataSluConPlanInfo
        {
            /// <summary>定时  经纬度 等，直接显示</summary>
            public string Type { get; set; }

            /// <summary>指令类型 1-定时，2-日落经纬度，3-日出经纬度 ,11 - 光控，12 隧道灯</summary>
            public int OpeMethod { get; set; }

            /// <summary>操作时间  07:09 格式</summary>
            public string Time { get; set; }

            /// <summary> OpeMethod=1 ：定时时间 （hour*60+minutes） ，2或3：偏移值</summary>
            public int OpeArgu { get; set; }

            /// <summary>开灯  关灯 调光</summary>
            public string Ope { get; set; }

            /// <summary> 操作类型 1-开灯，2-关灯，3-调光</summary>
            public int CmdType { get; set; }

            /// <summary>操作：  灯1、2</summary>
            public string Lampinfo { get; set; }

            /// <summary> 需要操作的灯头，按照灯头顺序排序：0、不操作，、1 操作 。如列表[0、0、1、1] 则表示灯3灯4 将进行操作</summary>
            public List<int> LoopCanDo { get; set; }

            /// <summary>控制器： 全部 ，隔一亮一  ，组：1、2、3</summary>
            public string Ctrlinfo { get; set; }

            /// <summary>控制器组地址</summary>
            public List<int> Ctrlgrp { get; set; }

        }

    }

    /// <summary>选测集中器数据等</summary>
    public partial class SluOrderZc
    {
        /// <summary> 设备逻辑地址</summary>
        public List<int> SluIds { get; set; }

    }

    /// <summary>选测集中器数据等</summary>
    public partial class GetSluOrderZcdata
    {
        /// <summary> 设备逻辑地址</summary>
        public List<int> SluIds { get; set; }

        /// <summary>查询数据的起始时间  0则表示全部</summary>
        public long DateCtreatStart { get; set; }

        /// <summary>返回数据是否需要把集中器的当日操作方案携带返回 1、需要，0、不需要[巡测的时候不需要的]</summary>
        public int IsNeedPlaninfo { get; set; }

    }

    /// <summary>选测集中器数据等</summary>
    public partial class GetSluOrderZcCtrldata
    {
        /// <summary> 设备逻辑地址</summary>
        public int SluId { get; set; }

        /// <summary>空则表示全部</summary>
        public List<int> SluCtrlIds { get; set; }

        /// <summary>查询数据的起始时间  0则表示全部</summary>
        public long DateCtreatStart { get; set; }

        /// <summary>返回数据是否需要把集中器的当日操作方案携带返回 1、需要，0、不需要[巡测的时候不需要的]</summary>
        public int IsNeedPlaninfo { get; set; }

    }

    /// <summary>地图功能获取控制器信息</summary>
    public partial class GetCtrldata
    {
        /// <summary> 集中器物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>控制器条形码</summary>
        public long CtrlBarCode { get; set; }

    }

    public partial class ReplygtSludataMeasure
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 手动开灯时确认方法 1、二次确认 ，2、密码确认 ，3、不验证</summary>
        public int LightOnCheck { get; set; }

        /// <summary> 手动关灯时确认方法 1、二次确认 ，2、密码确认 ，3、不验证</summary>
        public int LightOffCheck { get; set; }

        /// <summary> 设备图标是否显示故障  1、显示 ，2、不显示  默认显示</summary>
        public int GisFaultDisplay { get; set; }

        public List<Wlst.iifx.ReplygtSludataCon.DataSluCon> SluData { get; set; }

    }

    /// <summary>
    /// <para>****************************单灯控制器数据*****************************</para>
    /// <para>单灯选测数据</para>
    /// </summary>
    public partial class SluCtrlDataMeasure
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

        /// <summary> 条形码</summary>
        public long BarCodeId { get; set; }

        public Wlst.iifx.SluCtrlDataMeasure.DataSluCtrl Info { get; set; }

        public List<Wlst.iifx.SluCtrlDataMeasure.DataSluCtrlLamp> Items { get; set; }

        /// <summary>单灯的方案信息</summary>
        public List<Wlst.iifx.ReplygtSludataCon.DataSluConPlanInfo> ItemsPlan { get; set; }

        /// <summary> 单灯控制器选测数据</summary>
        public partial class DataSluCtrl
        {
            /// <summary> 数据发生时间  与回路数据联合查询组合成最新数据</summary>
            public long DateCreate { get; set; }

            public string DateCreateStr { get; set; }

            /// <summary> 控制器地址 排序地址</summary>
            public int OrderId { get; set; }

            /// <summary> 日 时:分  数据在控制器中生成的时间</summary>
            public long DateTimeCtrl { get; set; }

            public string DateTimeCtrlStr { get; set; }

            /// <summary> 温度</summary>
            public int Temperature { get; set; }

            /// <summary> 状态 0-正常，1-电压越上限，2-电压越下限，3-通讯故障</summary>
            public int Status { get; set; }

            /// <summary> 已校准 0-未校准，1-已校准</summary>
            public bool IsAdjust { get; set; }

            /// <summary> 工作参数设置 0-未设置，1-已设置</summary>
            public bool IsWorkingArgsSet { get; set; }

            /// <summary> 禁止主动报警 0-允许，1-禁止</summary>
            public bool IsNoAlarm { get; set; }

            /// <summary> 停运 0-正常，1-停运</summary>
            public bool IsCtrlStop { get; set; }

            /// <summary> EEPROM故障 0-正常，1-故障</summary>
            public bool IsEepromError { get; set; }

            /// <summary> 温度传感器故障 0-正常，1-故障</summary>
            public bool IsTemperatureSensor { get; set; }

        }

        /// <summary>单灯灯头最新数据</summary>
        public partial class DataSluCtrlLamp
        {
            /// <summary> 灯头序号</summary>
            public int LampId { get; set; }

            public long DateCtrlCreate { get; set; }

            public string DateCtrlCreateStr { get; set; }

            /// <summary> 0 正常，1电压越上线，2 电压越下限，3 通信故障</summary>
            public int State { get; set; }

            /// <summary> 功率状态 0-正常，1-功率越上限，2-功率越下限，3-通信异常</summary>
            public int PowerStatus { get; set; }

            /// <summary> 灯具漏电 0-正常，1-漏电</summary>
            public bool IsLeakage { get; set; }

            /// <summary> 故障 0-正常，1-光源故障，2-补偿电容故障，3-意外灭灯，4-意外亮灯，5-自熄灯，6-控制器断电告警（苏州）,7-继电器故障</summary>
            public int Fault { get; set; }

            /// <summary> 工作状态 0-正常亮灯，1-一档节能，2-二档节能，3-关灯</summary>
            public int StateWorkingOn { get; set; }

            /// <summary> 电压</summary>
            public double Voltage { get; set; }

            /// <summary> 电流</summary>
            public double Current { get; set; }

            /// <summary> 有功功率</summary>
            public double ActivePower { get; set; }

            /// <summary> 功率因数</summary>
            public double PowerFactor { get; set; }

            public double Electricity { get; set; }

            public double ElectricityTotal { get; set; }

            /// <summary> 开灯时间</summary>
            public double ActiveTime { get; set; }

            public double ActiveTimeTotal { get; set; }

            /// <summary>节能档位</summary>
            public int PowerLevel { get; set; }

        }

    }

    /// <summary>  历史数据查询</summary>
    public partial class GtSludataLamp
    {
        public Wlst.iifx.Head Head { get; set; }

        public int SluId { get; set; }

        /// <summary> 集中器地址</summary>
        public List<int> SluCtrlIds { get; set; }

        /// <summary> 空表示全部</summary>
        public int LampId { get; set; }

        /// <summary> 灯头地址 ，0 表示所有灯头的数据</summary>
        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

    }

    public partial class ReplygtSludataLamp
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluCtrlDataMeasure> Data { get; set; }

    }

    public partial class ReplygtSludataLampMeasure
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluCtrlDataMeasure> Data { get; set; }

    }

    /// <summary>
    /// <para>****************************单灯控制器物理数据*****************************</para>
    /// <para>单灯控制器物理信息</para>
    /// </summary>
    public partial class CtrlPhyinfo
    {
        /// <summary> 信号强度</summary>
        public int SignalStrength { get; set; }

        /// <summary> 路由级数 电力载波 0-6,zigbee 0-10</summary>
        public int Routing { get; set; }

        /// <summary> 所在相位 0-无法确定，1-A，2-B，3-C</summary>
        public int Phase { get; set; }

        /// <summary> 通信成功次数 1-16</summary>
        public int UsefulCommunicate { get; set; }

        /// <summary> 通信总次数 1-16</summary>
        public int AllCommunicate { get; set; }

        /// <summary> 控制器回路</summary>
        public int CtrlLoop { get; set; }

        /// <summary> 节能方式 0-无控制，1-只有开关灯，2-一档节能，3-二档节能，4-RS485，5-PWM</summary>
        public int PowerSaving { get; set; }

        /// <summary> 漏电流测量 0-无，1-有</summary>
        public bool HasLeakage { get; set; }

        /// <summary> 温度采集 0-无，1-有</summary>
        public bool HasTemperature { get; set; }

        /// <summary> 时钟 0-无，1-有</summary>
        public bool HasTimer { get; set; }

        /// <summary> 型号 0-unknow,1-wj2090j</summary>
        public int Model { get; set; }

        /// <summary>数据生成时间 如果为历史数据查询的话有效</summary>
        public long DtCreate { get; set; }

        public string DateCreateStr { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

    }

    /// <summary>  历史数据查询</summary>
    public partial class GtSludataCtrpPhyInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public int SluId { get; set; }

        /// <summary> 集中器地址</summary>
        public List<int> SluCtrlIds { get; set; }

        /// <summary> 空表示全部</summary>
        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

    }

    public partial class ReplygtSludataCtrpPhyInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.CtrlPhyinfo> Data { get; set; }

    }

    /// <summary>
    /// <para>SluOrderZc</para>
    /// <para>  巡测</para>
    /// </summary>
    public partial class ReplygtSluPhydataLampMeasure
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.CtrlPhyinfo> Data { get; set; }

    }

    /// <summary>
    /// <para>****************************单灯辅助数据*****************************</para>
    /// <para>单灯辅助数据</para>
    /// </summary>
    public partial class AssistCtrlData
    {
        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

        /// <summary> 控制器条形码</summary>
        public long BarCodeId { get; set; }

        /// <summary> 控制器灯杆编码</summary>
        public string LampCode { get; set; }

        /// <summary>日 时</summary>
        public long DateTime { get; set; }

        public string DateTimeStr { get; set; }

        /// <summary> 漏电流 / 100 0xff为满量程，此时=2.55A</summary>
        public double LeakageCurrent { get; set; }

        /// <summary> 灯数据 依次为灯1灯2 灯3 灯4</summary>
        public List<Wlst.iifx.AssistCtrlData.LightData> LightDataField { get; set; }

        public partial class LightData
        {
            public int LampId { get; set; }

            /// <summary> 最大电压</summary>
            public double MaxVoltage { get; set; }

            /// <summary> 最大电流</summary>
            public double MaxCurrent { get; set; }

            /// <summary> 电量</summary>
            public double Electricity { get; set; }

        }

    }

    /// <summary>
    /// <para>SluOrderZc</para>
    /// <para>  巡测</para>
    /// </summary>
    public partial class ReplygtSluAssistCtrlDataMeasure
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.AssistCtrlData> Data { get; set; }

    }

    /// <summary>
    /// <para>****************************集中器读取单灯的参数*****************************</para>
    /// <para>SluOrderZc</para>
    /// <para>  巡测</para>
    /// <para> 读取集中器中控制器的参数信息</para>
    /// </summary>
    public partial class SluCtrlParaRead
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        public List<Wlst.iifx.SluCtrlParaRead.SluCtrlParaReadItem> Items { get; set; }

        public partial class SluCtrlParaReadItem
        {
            /// <summary> 控制器物理地址</summary>
            public int PhyId { get; set; }

            /// <summary> 控制器所属组（5个）</summary>
            public List<int> CtrlGroup { get; set; }

            /// <summary> 控制器条码</summary>
            public long CtrlBarcode { get; set; }

            /// <summary> 控制器灯杆编码</summary>
            public string LampCode { get; set; }

            /// <summary> 控制器路由（前4级通信控制器编号1,2,3...)</summary>
            public List<int> CtrlRoute { get; set; }

            /// <summary> 开灯序号</summary>
            public int CtrlOrder { get; set; }

            /// <summary> 功率上限</summary>
            public int UppperPowerLimit { get; set; }

            /// <summary> 功率下限</summary>
            public int LowerPowerLimit { get; set; }

            /// <summary> 控制器上电开灯 true-开灯，false-关灯 依次为灯一灯二，，，</summary>
            public List<bool> CtrlPowerTurnon { get; set; }

            /// <summary> 控制器状态 false-停运，true-投运</summary>
            public bool CtrlStatus { get; set; }

            /// <summary> 控制器主报 false-禁止主报，true-允许主报</summary>
            public bool CtrlEnableAlarm { get; set; }

            /// <summary> 控制器物理矢量</summary>
            public List<int> CtrlVector { get; set; }

            /// <summary> 额定功率</summary>
            public List<int> RatedPower { get; set; }

        }

    }

    /// <summary>****************************单灯开关灯、调光操作**********************************</summary>
    public partial class SluRightOperators
    {
        public List<Wlst.iifx.SluRightOperators.SluRightOperator> OperatorItems { get; set; }

        /// <summary> 即时操作</summary>
        public partial class SluRightOperator
        {
            public int SluId { get; set; }

            /// <summary> 地址类型 0、全部，1、隔一亮一[0,2,4,6...]，2、隔一亮一[1,3,5,7...]，3、隔二亮一[1,4,7...]，4、组：组地址列表填入Addrs中， 11-控制器地址，控制器地址填入 Addrs中</summary>
            public int AddrType { get; set; }

            /// <summary> 组或控制器地址列表</summary>
            public List<int> Addrs { get; set; }

            /// <summary> 需要操作的灯头，按照灯头顺序排序：0、不操作，、1 操作 。如列表[0、0、1、1] 则表示灯3灯4 将进行操作</summary>
            public List<int> LoopCanDo { get; set; }

            /// <summary> 操作类型 1-开灯，2-关灯，3-调光</summary>
            public int CmdType { get; set; }

            /// <summary> 如果CmdType为3 ，此处填写调光值  0-100</summary>
            public int Scale { get; set; }

        }

    }

    /// <summary>及时操作应答</summary>
    public partial class SluRightOperatorReply
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        public List<Wlst.iifx.SluRightOperatorReply.SluRightOperatorReplyItem> Items { get; set; }

        /// <summary>及时操作应答</summary>
        public partial class SluRightOperatorReplyItem
        {
            public int SluId { get; set; }

            /// <summary> 地址类型 0、全部，1、隔一亮一[0,2,4,6...]，2、隔一亮一[1,3,5,7...]，3、隔二亮一[1,4,7...]，4、组：组地址列表填入Addrs中， 11-控制器地址，控制器地址填入 Addrs中</summary>
            public int AddrType { get; set; }

            /// <summary> 组或控制器地址列表</summary>
            public int Addrs { get; set; }

            public int Nindex { get; set; }

            /// <summary>
            /// <para>系统分配的序号</para>
            /// <para>硬件返回状态字节</para>
            /// </summary>
            public int Status { get; set; }

            /// <summary> 1、中间层收到数据，2、设备收到数据</summary>
            public int Op { get; set; }

        }

    }

    /// <summary>------------------------------------召测集中器时间方案</summary>
    public partial class SluTimeRead
    {
        public Wlst.iifx.Head Head { get; set; }

        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 集中器中时间方案信息</summary>
        public List<Wlst.iifx.SluTimeRead.SluTimeReadItem> Iems { get; set; }

        public partial class SluTimeReadItem
        {
            /// <summary> 当前记录</summary>
            public int Index { get; set; }

            /// <summary> 记录数量</summary>
            public int DataCount { get; set; }

            /// <summary> （集中器：操作顺序 0-广播，1-依次）（控制器：数据类型 0-base，1-adv）</summary>
            public int OperationOrder { get; set; }

            /// <summary> 指令类型 0-清除(发送到控制器时无此值)，1-定时，2-经纬度，3-即时</summary>
            public int OperationType { get; set; }

            /// <summary> 周设置 【周日到周六  1 设置有，0未设置】</summary>
            public List<bool> WeekSet { get; set; }

            /// <summary> 定时 hh:mm->int32 或偏移量 依据 operation_type定</summary>
            public int TimerOrOff { get; set; }

            /// <summary> 地址类型 0、全部，1、隔一亮一[0,2,4,6...]，2、隔一亮一[1,3,5,7...]，3、隔二亮一[1,4,7...]，4、组：组地址列表填入Addrs中， 11-控制器地址，控制器地址填入 Addrs中 ，12 其他</summary>
            public int AddrType { get; set; }

            /// <summary> 组或控制器地址列表</summary>
            public List<int> Addr { get; set; }

            public string AddrTypeAndAddrToString { get; set; }

            /// <summary> 需要操作的灯头，按照灯头顺序排序：0、不操作，、1 操作 。如列表[0、0、1、1] 则表示灯3灯4 将进行操作</summary>
            public List<int> LoopCanDo { get; set; }

            /// <summary> 操作类型 1-开灯，2-关灯，3-调光</summary>
            public int CmdType { get; set; }

            /// <summary> 如果CmdType为3 ，调光值  0-100</summary>
            public int Scale { get; set; }

            /// <summary> pwm频率 /100为发送值</summary>
            public int Rate { get; set; }

        }

    }

    /// <summary>
    /// <para>****************************召测与设置参数**********************************</para>
    /// <para>-----------重置以及初始化</para>
    /// </summary>
    public partial class ResetAndInit
    {
        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        public bool ReConcentrator { get; set; }

        public bool HardReZigbee { get; set; }

        public bool SoftReZigbee { get; set; }

        public bool ReCarrier { get; set; }

        public bool InitAll { get; set; }

        public bool ClearData { get; set; }

        public bool ClearArgs { get; set; }

        public bool ClearTask { get; set; }

    }

    /// <summary>重置以及初始化数据返回</summary>
    public partial class ResetAndInitReply
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary> 1-6、发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 16、复位集中器</summary>
        public Wlst.iifx.ResetAndInit ZcSetResetAndInit { get; set; }

    }

    /// <summary>-------------集中器参数设置以及召测</summary>
    public partial class SluSetAndRead
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>
        /// <para> 1-4 复位网络1到4,5 设置集中器巡测，6 设置集中器报警和投运停运，7 设置集中器参数，</para>
        /// <para> 8 设置集中器报警参数，9 设置控制器域名，10 设置时钟；11 召测集中器参数，</para>
        /// <para> 12 召测控制器域名修改信息，13 召测集中器报警参数，14 召测软件版本，15 召测时钟</para>
        /// </summary>
        public int Op { get; set; }

    }

    /// <summary>召测数据返回</summary>
    public partial class SluSetAndReadReplyOne
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>
        /// <para> 1-4 复位网络1到4,5 设置集中器巡测，6 设置集中器报警和投运停运，7 设置集中器参数，</para>
        /// <para> 8 设置集中器报警参数，9 设置控制器域名</para>
        /// </summary>
        public int Op { get; set; }

        /// <summary> 1-9、发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 如果操作失败 显示操作失败原因</summary>
        public string Info { get; set; }

    }

    /// <summary>召测数据返回</summary>
    public partial class SluSetAndReadReplyTwo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary> 10 设置时钟；  15 召测时钟</summary>
        public int Op { get; set; }

        /// <summary> 1-6、发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 10、15、召测集中器时钟</summary>
        public Wlst.iifx.SluSetAndReadReplyTwo.JzqTimeInfo ZcJzqTime { get; set; }

        /// <summary> 如果操作失败 显示操作失败原因</summary>
        public string Info { get; set; }

        public partial class JzqTimeInfo
        {
            /// <summary> 操作标识0-设置时钟，1-读取时钟tmpx</summary>
            public int OptMark { get; set; }

            /// <summary> 时间（c#需加1970-1-1）tmpx</summary>
            public long DateTime { get; set; }

            /// <summary> 强制对时tmpx</summary>
            public int ForceTimer { get; set; }

            /// <summary> 错误标识 时间数据错误tmpx</summary>
            public bool DtformatError { get; set; }

            /// <summary> 错误标识 时钟超差tmpx</summary>
            public bool TimerError { get; set; }

            /// <summary> 错误标识 对时失败tmpx</summary>
            public bool TimeFault { get; set; }

        }

    }

    /// <summary>召测数据返回  召测集中器参数，</summary>
    public partial class SluSetAndReadReplyThree
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 11、召测集中器参数</summary>
        public Wlst.iifx.SluSetAndReadReplyThree.JzqPara ZcJzqPara { get; set; }

        /// <summary> 如果操作失败 显示操作失败原因</summary>
        public string Info { get; set; }

        public partial class JzqPara
        {
            /// <summary> 控制器数量tmpx</summary>
            public int Ctrls { get; set; }

            /// <summary> 域名tmpx</summary>
            public int DomainName { get; set; }

            /// <summary> 电压上限tmpx</summary>
            public int UpperVoltageLimit { get; set; }

            /// <summary> 电压下限tmpx</summary>
            public int LowerVoltageLimit { get; set; }

            /// <summary> 64位地址tmpx</summary>
            public long MacAddr { get; set; }

        }

    }

    /// <summary>召测数据返回   召测集中器报警参数</summary>
    public partial class SluSetAndReadReplyFour
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary> 发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 13、召测集中器报警参数</summary>
        public Wlst.iifx.SluSetAndReadReplyFour.JzqAlarmPara ZcJzqAlarmPara { get; set; }

        /// <summary> 如果操作失败 显示操作失败原因</summary>
        public string Info { get; set; }

        public partial class JzqAlarmPara
        {
            /// <summary> 通讯失败次数tmpx</summary>
            public int CommunicationFailures { get; set; }

            /// <summary> 功率因数tmpx</summary>
            public int PowerFactor { get; set; }

            /// <summary> 通信信道(仅包含启用的通道)tmpx</summary>
            public int CommunicationChannel { get; set; }

            /// <summary> 电流最大量程tmpx</summary>
            public double CurrentRange { get; set; }

            /// <summary> 有功最大量程tmpx</summary>
            public int PowerRange { get; set; }

            /// <summary> 集中器自动控制功能 1-自动补发，0-不补发tmpx</summary>
            public int AutoMode { get; set; }

            /// <summary> 经度tmpx</summary>
            public double Longitude { get; set; }

            /// <summary> 纬度tmpx</summary>
            public double Latitude { get; set; }

            /// <summary> 载波路由模式 1-标准，2-扩展，3-III代，4-IV代，5-自适应tmpx</summary>
            public int CarrierRoutingMode { get; set; }

            /// <summary> 蓝牙模块pin码，默认62547600tmpx</summary>
            public int BluetoothPin { get; set; }

            /// <summary> 蓝牙安全模式 0-无，1-安全模式1,2-安全模式2tmpx</summary>
            public int BluetoothMode { get; set; }

            /// <summary> 集中器通讯类型,concentrator communication type 0-gprs，1-485tmpx</summary>
            public int Cct { get; set; }

        }

    }

    /// <summary>召测数据返回  召测控制器域名修改信息，14</summary>
    public partial class SluSetAndReadReplyFive
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary> 发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 12、召测控制器域名修改信息，最多256个 每一个表示域名修改结果 按位置1-256</summary>
        public List<bool> ZcCtrlDomainChangeInfo { get; set; }

        /// <summary> 如果操作失败 显示操作失败原因</summary>
        public string Info { get; set; }

    }

    /// <summary>召测数据返回  召测软件版本</summary>
    public partial class SluSetAndReadReplySix
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary> 发送指令 是否成功。</summary>
        public bool IsSuccessfull { get; set; }

        /// <summary> 14、召测软件版本</summary>
        public string ZcSoftVersion { get; set; }

        /// <summary> 如果操作失败 显示操作失败原因</summary>
        public string Info { get; set; }

    }

    /// <summary>
    /// <para>召测时间方案 读取ReadTimetable 即可</para>
    /// <para>召测基本参数指令1： 读取ReadTimer ReadVer  ReadGroup  ，接着发指令2：ReadArgs  ReadSunrise</para>
    /// <para>即时选测 读取 ReadCtrldata  ReadData</para>
    /// <para>-------------------------------------------------------------------------------------------召测控制器参数  选测数据、运行参数、组地址、版本、日出日落等</para>
    /// </summary>
    public partial class SluCtrlArgsRead
    {
        public int SluId { get; set; }

        public int CtrlId { get; set; }

        /// <summary>1、即时选测运行信息，2、召测控制器基本信息，3、读取控制器存储的时间方案</summary>
        public int Op { get; set; }

    }

    /// <summary>即时选测</summary>
    public partial class SluCtrlArgsReplyOne
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

        /// <summary>控制器物理地址</summary>
        public int CtrPhyId { get; set; }

        /// <summary>控制器选测数据</summary>
        public Wlst.iifx.SluCtrlArgsReplydata.CtrlData CtrlDataField { get; set; }

        /// <summary>控制器数据（新）</summary>
        public List<Wlst.iifx.SluCtrlArgsReplydata.CtrlDataNew> CtrlDataNewField { get; set; }

    }

    public partial class SluCtrlArgsReplyTwo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

        /// <summary>控制器物理地址</summary>
        public int CtrPhyId { get; set; }

        /// <summary>控制器时钟</summary>
        public long CtrlTime { get; set; }

        /// <summary>控制器组地址</summary>
        public List<int> CtrlGroup { get; set; }

        /// <summary>控制器版本</summary>
        public Wlst.iifx.SluCtrlArgsReplydata.CtrlVer CtrlVerField { get; set; }

    }

    public partial class SluCtrlArgsReplyThree
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

        /// <summary>控制器物理地址</summary>
        public int CtrPhyId { get; set; }

        /// <summary>控制器运行参数</summary>
        public Wlst.iifx.SluCtrlArgsReplydata.CtrlPara CtrlParaField { get; set; }

        /// <summary>控制器当日日出日落</summary>
        public Wlst.iifx.SluCtrlArgsReplydata.CtrlSunriseset CtrlSunrisesetField { get; set; }

    }

    public partial class SluCtrlArgsReplyFour
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 集中器地址</summary>
        public int SluId { get; set; }

        /// <summary>设备显示需要的物理地址</summary>
        public int SluPhyId { get; set; }

        /// <summary>设备名称</summary>
        public string RtuName { get; set; }

        /// <summary> 控制器地址 逻辑地址</summary>
        public int CtrlId { get; set; }

        public string CtrlName { get; set; }

        /// <summary>控制器物理地址</summary>
        public int CtrPhyId { get; set; }

        /// <summary>控制器本地参数</summary>
        public List<Wlst.iifx.SluCtrlArgsReplydata.CtrlRuntime> CtrlRuntimeField { get; set; }

    }

    public partial class SluCtrlArgsReplydata
    {
        public partial class CtrlData
        {
            /// <summary>电压 /100</summary>
            public double Voltage { get; set; }

            /// <summary>电流 /100</summary>
            public List<double> Current { get; set; }

            /// <summary>有功功率 /10</summary>
            public List<double> ActivePower { get; set; }

            /// <summary>无功功率 /10</summary>
            public List<double> ReactivePower { get; set; }

            /// <summary>最大电压 /100</summary>
            public double MaxVoltage { get; set; }

            /// <summary>最大电流 /100</summary>
            public List<double> MaxCurrent { get; set; }

            /// <summary>累计电量</summary>
            public List<double> TotalElectricity { get; set; }

            /// <summary>温度 0xff无效</summary>
            public int Temperature { get; set; }

            /// <summary>漏电流 /100</summary>
            public double LeakageCurrent { get; set; }

            /// <summary>时钟故障</summary>
            public int TimerError { get; set; }

            /// <summary>控制器状态  20180518 xiuzheng</summary>
            public Wlst.iifx.SluCtrlArgsReplydata.CtrlStatus CtrlStatus { get; set; }

            /// <summary>灯状态</summary>
            public List<Wlst.iifx.SluCtrlArgsReplydata.LightStatus> LightStatus { get; set; }

            /// <summary>自复位次数</summary>
            public int ReCount { get; set; }

        }

        public partial class CtrlDataNew
        {
            /// <summary>电压 /100</summary>
            public List<double> Voltage { get; set; }

            /// <summary>电流 /100</summary>
            public List<double> Current { get; set; }

            /// <summary>有功功率 /10</summary>
            public List<double> ActivePower { get; set; }

            /// <summary>运行时间</summary>
            public List<int> RunTime { get; set; }

            /// <summary>相位，0-无法确认,1-a,2-b,3-c</summary>
            public int Phase { get; set; }

            /// <summary>累计电量</summary>
            public List<double> TotalElectricity { get; set; }

            /// <summary>漏电流 /100</summary>
            public double LeakageCurrent { get; set; }

            /// <summary>时钟故障</summary>
            public int TimerError { get; set; }

            /// <summary>控制器状态</summary>
            public Wlst.iifx.SluCtrlArgsReplydata.CtrlStatus CtrlStatus { get; set; }

            /// <summary>灯状态</summary>
            public List<Wlst.iifx.SluCtrlArgsReplydata.LightStatus> LightStatus { get; set; }

            /// <summary>自复位次数</summary>
            public int ReCount { get; set; }

            /// <summary>功率因数</summary>
            public List<double> PowerFactor { get; set; }

        }

        public partial class CtrlPara
        {
            /// <summary>域名</summary>
            public int DomainName { get; set; }

            /// <summary>控制器状态 false-停运，true-投运</summary>
            public bool CtrlStatus { get; set; }

            /// <summary>控制器主报 false-禁止主报，true-允许主报</summary>
            public bool CtrlEnableAlarm { get; set; }

            /// <summary>控制器上电开灯 true-开灯，false-关灯</summary>
            public List<bool> CtrlPowerTurnon { get; set; }

            /// <summary>控制器1-4回路矢量</summary>
            public List<int> CtrlVector { get; set; }

            /// <summary>经度</summary>
            public double Longitude { get; set; }

            /// <summary>纬度</summary>
            public double Latitude { get; set; }

            /// <summary>1-4回路额定功率</summary>
            public List<int> RatedPower { get; set; }

        }

        public partial class CtrlVer
        {
            /// <summary>控制器回路</summary>
            public int CtrlLoop { get; set; }

            /// <summary>节能方式</summary>
            public int EnergySaving { get; set; }

            /// <summary>有漏电模块</summary>
            public bool ElectricLeakageModule { get; set; }

            /// <summary>有温度检测模块</summary>
            public bool TemperatureModule { get; set; }

            /// <summary>有时钟</summary>
            public bool TimerModule { get; set; }

            /// <summary>型号 0-unknow,1-wj2090j</summary>
            public string CtrlType { get; set; }

            /// <summary>软件版本</summary>
            public string Ver { get; set; }

        }

        public partial class CtrlSunriseset
        {
            /// <summary>当日日出日落时间 hhmm->int32</summary>
            public int Sunrise { get; set; }

            public int SunSet { get; set; }

        }

        public partial class CtrlRuntime
        {
            /// <summary>本地控制数据类型0-基本类型（6字节），1-扩展类型（6+20字节）</summary>
            public int DataType { get; set; }

            /// <summary>输出类型0-继电器，1-pwm输出，2-485</summary>
            public int OutputType { get; set; }

            /// <summary>操作类型1-定时操作，2-经纬度操作，3-即时操作</summary>
            public int OperateType { get; set; }

            /// <summary>有效日期，0-6～周日-周6</summary>
            public List<int> DateEnable { get; set; }

            /// <summary>开关灯操作时间 hhmm->int32</summary>
            public int OperateTime { get; set; }

            /// <summary>操作偏移 -720~+720</summary>
            public int OperateOff { get; set; }

            /// <summary>继电器操作回路1-4 0-不操作，3-开灯，5-一档节能，a-二档节能，c-关灯</summary>
            public List<int> RelayOperate { get; set; }

            /// <summary>PWM操作回路</summary>
            public List<int> PwmLoop { get; set; }

            /// <summary>PWM操作占空比</summary>
            public int PwmPower { get; set; }

            /// <summary>PWM频率 (1~255) * 100</summary>
            public int PwmBaudrate { get; set; }

            /// <summary>485波特率 0-300,1-600,2-1200,3-2400,4-4800,5-9600,6-19200</summary>
            public int Rs485Baudrate { get; set; }

            /// <summary>485校验位 0-无校验，1-奇校验，2-偶校验</summary>
            public int Rs485Check { get; set; }

        }

        public partial class DataMark
        {
            /// <summary>选测</summary>
            public bool ReadCtrlDataField { get; set; }

            /// <summary>读取时钟</summary>
            public bool ReadTimer { get; set; }

            /// <summary>读取运行参数</summary>
            public bool ReadCtrlParaField { get; set; }

            /// <summary>读取组地址</summary>
            public bool ReadGroup { get; set; }

            /// <summary>读取版本</summary>
            public bool ReadVer { get; set; }

            /// <summary>读取当天日出日落</summary>
            public bool ReadSunrise { get; set; }

            /// <summary>读取本地参数（新）</summary>
            public bool ReadCtrlRuntimeField { get; set; }

            /// <summary>读取控制器数据（新）</summary>
            public bool ReadCtrlDataNewField { get; set; }

        }

        public partial class CtrlStatus
        {
            /// <summary>状态 0-正常，1-电压越上限，2-电压越下限，3-通讯故障</summary>
            public int Status { get; set; }

            /// <summary>已校准 0-未校准，1-已校准</summary>
            public bool Adjust { get; set; }

            /// <summary>工作参数设置 0-未设置，1-已设置</summary>
            public bool WorkingArgs { get; set; }

            /// <summary>禁止主动报警 0-允许，1-禁止</summary>
            public bool NoAlarm { get; set; }

            /// <summary>停运 0-正常，1-停运</summary>
            public bool OffLine { get; set; }

            /// <summary>EEPROM故障 0-正常，1-故障</summary>
            public bool EepromError { get; set; }

            /// <summary>温度传感器故障 0-正常，1-故障</summary>
            public bool TemperatureSensor { get; set; }

        }

        public partial class LightStatus
        {
            /// <summary>功率状态 0-正常，1-功率越上限，2-功率越下限</summary>
            public int PowerStatus { get; set; }

            /// <summary>灯具漏电 0-正常，1-漏电</summary>
            public bool Leakage { get; set; }

            /// <summary>故障 0-正常，1-光源故障，2-补偿电容故障，3-意外灭灯，4-意外亮灯，5-自熄灯，6-控制器断电告警（苏州）,7-继电器故障</summary>
            public int Fault { get; set; }

            /// <summary>工作状态 0-正常亮灯，1-一档节能，2-二档节能，3-关灯</summary>
            public int WorkingOn { get; set; }

        }

    }

    /// <summary> ---------------------------------------------------------- 光控历史数据查询----------------------------------------------------------</summary>
    public partial class LuxDataRq
    {
        public int LuxId { get; set; }

        /// <summary>时间为毫秒</summary>
        public long DtStartTime { get; set; }

        /// <summary>时间为毫秒</summary>
        public long DtEndTime { get; set; }

    }

    public partial class LuxDataBk
    {
        public Wlst.iifx.Head Head { get; set; }

        public int LuxId { get; set; }

        /// <summary>时间为毫秒</summary>
        public long DtStartTime { get; set; }

        /// <summary>时间为毫秒</summary>
        public long DtEndTime { get; set; }

        public List<Wlst.iifx.LuxDataBk.LuxDataItem> Info { get; set; }

        public int LuxShowPhyId { get; set; }

        public string LuxName { get; set; }

        public partial class LuxDataItem
        {
            /// <summary> 时间为毫秒</summary>
            public long DateCreate { get; set; }

            /// <summary> 时间</summary>
            public string DateCreateStr { get; set; }

            /// <summary>采集的光控值</summary>
            public double LuxValue { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------------------- 时间表报表查询----------------------------------------------------------</para>
    /// <para>应答时间表报表执行情况</para>
    /// </summary>
    public partial class TimeTableReportRecordBk
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.TimeTableReportRecordBk.TimeTableReportRecordItem> Items { get; set; }

        public partial class TimeTableReportRecordItem
        {
            /// <summary>区域地址</summary>
            public int AreaId { get; set; }

            /// <summary> 区域名称</summary>
            public int AreaName { get; set; }

            /// <summary> 时间表地址序号</summary>
            public int TimeTableId { get; set; }

            /// <summary> 时间表名称</summary>
            public string TimeTableName { get; set; }

            /// <summary> 记录写入的时间</summary>
            public long DateCreate { get; set; }

            /// <summary> 记录写入的时间</summary>
            public string DateCreateStr { get; set; }

            /// <summary> 记录写入的时间 唯一标示 查询详细数据时需要携带此时间</summary>
            public long DateCreateCs { get; set; }

            /// <summary> 时间表操作的时间</summary>
            public long DateOpeTime { get; set; }

            /// <summary> 时间表操作的时间</summary>
            public string DateOpeTimeStr { get; set; }

            /// <summary>操作的光控值  "定时" or  光控值 保留2位小数</summary>
            public string Lux { get; set; }

            /// <summary> 操作的回路总数</summary>
            public int RtuLoopsOpes { get; set; }

            /// <summary> 成功的回路数</summary>
            public int RtuLoopsSuccess { get; set; }

            /// <summary> 失败的回路数</summary>
            public int RtuLoopsFailed { get; set; }

            /// <summary> 是否为开灯 1 开灯；0 关灯</summary>
            public bool IsOpenLight { get; set; }

            /// <summary> 开灯  、关灯</summary>
            public string IsOpenLightStr { get; set; }

        }

    }

    public partial class TimeTableReportRecordRq
    {
        /// <summary>区域地址   为0 则表示全部区域</summary>
        public int AreaId { get; set; }

        /// <summary>查询为 0 则表示 全部</summary>
        public int TimeTableId { get; set; }

        /// <summary> 0 全部，1 开灯，2 关灯</summary>
        public int IsOpenLight { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

    }

    public partial class TimeTableReportRecordDetailRq
    {
        /// <summary>区域地址</summary>
        public int AreaId { get; set; }

        /// <summary>时间表地址</summary>
        public int TimeTableId { get; set; }

        /// <summary> 0 全部，1 开灯，2 关灯</summary>
        public int IsOpenLight { get; set; }

        /// <summary>时间 c#的时间的</summary>
        public long DateCreateCs { get; set; }

    }

    public partial class TimeTableReportRecordDetailBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 详细结果</summary>
        public List<Wlst.iifx.TimeTableReportRecordDetailBk.RtuOpInfo> Items { get; set; }

        public partial class RtuOpInfo
        {
            public int RtuId { get; set; }

            public int RtuPhyId { get; set; }

            public string RtuName { get; set; }

            /// <summary>成功回路列表</summary>
            public List<int> LoopsSuccess { get; set; }

            /// <summary>失败回路列表</summary>
            public List<int> LoopsFaileds { get; set; }

        }

    }

    /// <summary> ---------------------------------------------------------- 周设置下发记录查询----------------------------------------------------------</summary>
    public partial class RecordWeekTimeBk
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 详细结果</summary>
        public List<Wlst.iifx.RecordWeekTimeBk.RtuOpInfo> Items { get; set; }

        public partial class RtuOpInfo
        {
            public int RtuId { get; set; }

            public int RtuPhyId { get; set; }

            public string RtuName { get; set; }

            /// <summary>下发的时间</summary>
            public long DateCreate { get; set; }

            /// <summary>应答的时间</summary>
            public long DateReply { get; set; }

            /// <summary>下发的时间</summary>
            public string DateCreateStr { get; set; }

            /// <summary>应答的时间</summary>
            public string DateReplyStr { get; set; }

            public long UserName { get; set; }

        }

    }

    public partial class RecordWeekTimeRq
    {
        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        /// <summary> 为空 则查询全部</summary>
        public List<int> RtuId { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------------------- 日出日落查询----------------------------------------------------------</para>
    /// <para>日出日落信息</para>
    /// </summary>
    public partial class SunRiseSetInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 数据</summary>
        public List<Wlst.iifx.SunRiseSetInfo.SunRiseItem> Items { get; set; }

        public partial class SunRiseItem
        {
            public int DateMonth { get; set; }

            public int DateDay { get; set; }

            public int TimeSunrise { get; set; }

            public int TimeSunset { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------------------短消息报警记录 ----------------------------------------------------------</para>
    /// <para>短消息报警记录查询</para>
    /// </summary>
    public partial class MsgRecordRq
    {
        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        /// <summary>为空则查询所有</summary>
        public long UserPhoneNumber { get; set; }

    }

    /// <summary>短消息报警记录查询</summary>
    public partial class MsgRecordBk
    {
        public List<Wlst.iifx.MsgRecordBk.MsgRecordItem> Items { get; set; }

        public partial class MsgRecordItem
        {
            /// <summary> 生成时间</summary>
            public long DateCreate { get; set; }

            /// <summary>生成时间</summary>
            public string DateCreateStr { get; set; }

            /// <summary> 信息</summary>
            public string Msg { get; set; }

            /// <summary> 用户名</summary>
            public string UserName { get; set; }

            /// <summary> 用户电话号码</summary>
            public long UserPhoneNumber { get; set; }

            /// <summary> 短信发送状态  1 发送成功，2  发送失败</summary>
            public int MsgState { get; set; }

            /// <summary> 备注</summary>
            public string Remark { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 单灯方案管理 分组管理 ----------------------------------------------</para>
    /// <para>  单灯方案分组 请求</para>
    /// </summary>
    public partial class InfoRq
    {
        public int AreaId { get; set; }

        /// <summary>依据不同协议  代表不同的值</summary>
        public int OpArgu { get; set; }

    }

    /// <summary>  单灯方案分组 请求</summary>
    public partial class SluPlanGrpInfoBk
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluPlanGrpInfoBk.SluPlanGrpItemInfo> Items { get; set; }

        /// <summary>单灯集中器选中的分组信息结构</summary>
        public partial class SluCtrlGrpSelectedItem
        {
            /// <summary>分组地址</summary>
            public int SluCtrlGrpId { get; set; }

            /// <summary>分组</summary>
            public string SluCtrlGrpName { get; set; }

            /// <summary>分组是否被选中</summary>
            public bool IsSelectd { get; set; }

        }

        /// <summary>单个集中器 选中的分组信息</summary>
        public partial class SluPlanCtrlGrpSluItemInfo
        {
            public int SluId { get; set; }

            public string SluName { get; set; }

            public int SluPhyId { get; set; }

            /// <summary>分组地址列表  选中的分组排前，未选中排后  ，界面默认仅显示6个分组 选中最多6个分组</summary>
            public List<Wlst.iifx.SluPlanGrpInfoBk.SluCtrlGrpSelectedItem> GrpItems { get; set; }

        }

        /// <summary>基本参数</summary>
        public partial class SluPlanGrpItemInfo
        {
            public int AreaId { get; set; }

            public string AreaName { get; set; }

            public int GrpId { get; set; }

            public string GrpName { get; set; }

            /// <summary> 设备分组信息</summary>
            public List<Wlst.iifx.SluPlanGrpInfoBk.SluPlanCtrlGrpSluItemInfo> Items { get; set; }

        }

    }

    /// <summary>
    /// <para>修改分组名称   UpdateAreaOrGrpName</para>
    /// <para>返回  UpdateAreaOrGrpNameBk</para>
    /// <para>删除分组  DeleteAreaOrGroupInfo</para>
    /// <para>返回  DeleteAreaOrGroupInfoBk</para>
    /// <para>  单灯方案分组 保存</para>
    /// </summary>
    public partial class SluPlanGrpSave
    {
        public int AreaId { get; set; }

        public int GrpId { get; set; }

        public string GrpName { get; set; }

        public List<Wlst.iifx.SluPlanGrpSave.SluGrpSaveSelectedItem> Items { get; set; }

        /// <summary>单灯集中器选中的分组信息结构</summary>
        public partial class SluGrpSaveSelectedItem
        {
            public int SluId { get; set; }

            /// <summary>勾选的分组地址列表</summary>
            public List<int> SluCtrlGrpIds { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 单灯方案管理 指令管理 ----------------------------------------------</para>
    /// <para>  单灯指令列表</para>
    /// </summary>
    public partial class SluPlanBriefInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public int AreaId { get; set; }

        public List<Wlst.iifx.SluPlanBriefInfo.SluPlanItemBriefInfo> Items { get; set; }

        /// <summary>单灯方案扼要信息</summary>
        public partial class SluPlanItemBriefInfo
        {
            public int AreaId { get; set; }

            public int TimePlanId { get; set; }

            public string TimePlanName { get; set; }

            public long DateCreate { get; set; }

            public string TimePlanDesc { get; set; }

        }

    }

    public partial class SluPlanDetailInfoRq
    {
        public int AreaId { get; set; }

        public int PlanId { get; set; }

    }

    /// <summary>  单灯指令详细信息</summary>
    public partial class SluPlanDetailInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public int AreaId { get; set; }

        public int TimePlanId { get; set; }

        public string TimePlanName { get; set; }

        public long DateCreate { get; set; }

        public string TimePlanDesc { get; set; }

        public bool TimePlanIsuesd { get; set; }

        /// <summary> 一周需要操作的时间 0周日 1 周一  如果包含就操作 不包含就不操作</summary>
        public List<int> UsedWeekSet { get; set; }

        /// <summary> 需要操作的灯头，按照灯头顺序排序：0、不操作，、1 操作 。如列表[0、0、1、1] 则表示灯3灯4 将进行操作</summary>
        public List<int> LoopCanDo { get; set; }

        /// <summary> 操作类型 1-开灯，2-关灯，3-调光</summary>
        public int CmdType { get; set; }

        /// <summary> 如果CmdType为3 ，此处填写调光值  0-100</summary>
        public int Scale { get; set; }

        /// <summary> 指令类型 1-定时，2-日落经纬度，3-日出经纬度 ,11 - 光控，12 隧道灯</summary>
        public int OpeMethod { get; set; }

        /// <summary> OpeMethod=1 ：定时时间 （hour*60+minutes） ，2或3：偏移值</summary>
        public int OpeArgu { get; set; }

        /// <summary> 有效时间段开始时间</summary>
        public int TimeOfLightStartEffect { get; set; }

        /// <summary> 有效时间段结束时间</summary>
        public int TimeOfLightEndEffect { get; set; }

        /// <summary> 光控有效起始值</summary>
        public int LuxStartEffect { get; set; }

        /// <summary> 光控有效结束值</summary>
        public int LuxEndEffect { get; set; }

        /// <summary> 光控开灯所使用的光控地址</summary>
        public int LightUsedRtuId { get; set; }

        /// <summary>系统反馈的光控设备列表 保存的时候不需要填入此参数</summary>
        public List<Wlst.iifx.SluPlanDetailInfo.LuxInfo> Luxitems { get; set; }

        /// <summary>光控信息</summary>
        public partial class LuxInfo
        {
            public int LuxId { get; set; }

            public int LuxPhyId { get; set; }

            public string LuxName { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 单灯方案管理 绑定管理 ----------------------------------------------</para>
    /// <para>  单灯绑定列表</para>
    /// </summary>
    public partial class SluPlanBandingInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public int AreaId { get; set; }

        public List<Wlst.iifx.SluPlanBandingInfo.SluPlanBandingBriefInfo> Items { get; set; }

        /// <summary>单灯绑定信息</summary>
        public partial class SluPlanBandingBriefInfo
        {
            public int AreaId { get; set; }

            public int PlanId { get; set; }

            public string PlanName { get; set; }

            /// <summary>保存后修改的时间</summary>
            public long DateCreate { get; set; }

            public string TimePlanDesc { get; set; }

            /// <summary>是否使用</summary>
            public bool IsUesd { get; set; }

        }

    }

    /// <summary>  单灯方案详细信息</summary>
    public partial class SluPlanBandingDetailInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public int AreaId { get; set; }

        public int PlanId { get; set; }

        public string PlanName { get; set; }

        /// <summary>保存后修改的时间 每次保存更新此值</summary>
        public long DateCreate { get; set; }

        public string PlanDesc { get; set; }

        /// <summary>是否使用</summary>
        public bool IsUesd { get; set; }

        public List<Wlst.iifx.SluPlanBandingDetailInfo.TimePlanBandingGrpItem> Items { get; set; }

        public partial class TimePlanBandingGrpItem
        {
            /// <summary>分组管理中  分组地址</summary>
            public int TimePlanCtrlGrpId { get; set; }

            /// <summary>方案管理中 方案的值</summary>
            public int TimePlanId { get; set; }

            /// <summary>分组管理中  分组名称 保存的时候此值不需要的</summary>
            public string TimePlanCtrlGrpName { get; set; }

            /// <summary>方案管理中 方案名称 保存的时候此值不需要的</summary>
            public string TimePlanName { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 单灯方案下发记录查询 ----------------------------------------------</para>
    /// <para>单灯方案下发记录</para>
    /// </summary>
    public partial class SluTimePlanRecord
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluTimePlanRecord.SluSluTimePlanSendInfo> Items { get; set; }

        /// <summary>集中器方案下发记录信息</summary>
        public partial class SluSluTimePlanSendInfo
        {
            public int SluId { get; set; }

            public int SluPhyId { get; set; }

            public string SluName { get; set; }

            /// <summary>方案下发时间</summary>
            public long DateCreate { get; set; }

            public string DateCreateString { get; set; }

            /// <summary>应答时间  下发时应答时间为 0</summary>
            public long DateReply { get; set; }

            public string DateReplyString { get; set; }

            /// <summary>操作用户</summary>
            public string UserName { get; set; }

            /// <summary>备注</summary>
            public string Remark { get; set; }

        }

    }

    /// <summary>请求单灯方案下发记录</summary>
    public partial class GtSluTimePlanRecord
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>调用接口时 作为参数  可不填入数据的，接口返回服务器端填写使用</summary>
        public long DateStart { get; set; }

        /// <summary> 开始时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 结束时间</summary>
        public List<int> SluIds { get; set; }

    }

    /// <summary> ---------------------------------------------- 单灯参数管理 ----------------------------------------------</summary>
    public partial class SluCtrlParaRq
    {
        public int SluId { get; set; }

    }

    public partial class SluPara
    {
        /// <summary>返回时 携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        public int SluId { get; set; }

        /// <summary>基础集中器参数</summary>
        public Wlst.iifx.SluPara.SluParameter Para { get; set; }

        /// <summary>控制器参数信息</summary>
        public List<Wlst.iifx.SluPara.SluCtrlPara> ItemsCtrls { get; set; }

        /// <summary>控制器分组信息</summary>
        public List<Wlst.iifx.SluPara.SluCtrlGroupPara> ItemsGrp { get; set; }

        /// <summary>当前设备的操作权限 ，0、无权限，1、可查看数据，2、具备开关灯与设置等高级权限</summary>
        public int Right { get; set; }

        /// <summary>集中器参数</summary>
        public partial class SluParameter
        {
            /// <summary>集中器地址</summary>
            public int RtuId { get; set; }

            /// <summary>集中器物理地址</summary>
            public int PhyId { get; set; }

            /// <summary> 设备名称</summary>
            public string RtuName { get; set; }

            /// <summary> 是否投运</summary>
            public bool IsUsed { get; set; }

            /// <summary> zigbee 地址</summary>
            public long ZigbeeAddress { get; set; }

            /// <summary> zigbee域名  1-65383，  电力再载波则为 1-6</summary>
            public int DomainName { get; set; }

            /// <summary> zigbee启用的信道，数值为  1-16，存在于该列表中则启用，不存在则不启用</summary>
            public List<int> ChannelUsed { get; set; }

            /// <summary>
            /// <para> 设备型号  2090等</para>
            /// <para>optional int32 RtuModel=8;</para>
            /// <para> 是否是zigbee单灯 1 是，0 线路载波</para>
            /// </summary>
            public int IsZigbee { get; set; }

            /// <summary> 1 -PWM ;2 -485  保留暂时不用</summary>
            public int PowerAdjustType { get; set; }

            /// <summary> 功率调节频率或波特率</summary>
            public int PowerAdjustBound { get; set; }

            /// <summary> Ip地址</summary>
            public string StaticIp { get; set; }

            /// <summary> 手机号码</summary>
            public string MobileNo { get; set; }

            /// <summary> 关联的RTU地址 终端物理地址</summary>
            public int RelatedRtuPhyId { get; set; }

            /// <summary> 安装日期</summary>
            public long DateCreate { get; set; }

            /// <summary> 备注信息</summary>
            public string RtuRemark { get; set; }

            /// <summary> 广州南瑞单灯设备识别地址</summary>
            public long Imei { get; set; }

            /// <summary> 开灯偏移，-60～60(分钟)</summary>
            public int OnDeviation { get; set; }

            /// <summary> 关灯偏移，-60～60(分钟)</summary>
            public int OffDeviation { get; set; }

        }

        /// <summary>控制器参数信息</summary>
        public partial class SluCtrlPara
        {
            /// <summary> 1-999 逻辑地址 参数保存的时候必须携带发送过来的此地址  =0 为新增</summary>
            public int CtrlId { get; set; }

            /// <summary> 地址  1-256 物理地址</summary>
            public int CtrlPhyId { get; set; }

            /// <summary> 父节点地址  即集中控制器地址</summary>
            public int SluId { get; set; }

            public string LampCode { get; set; }

            /// <summary> 条形码</summary>
            public long BarCodeId { get; set; }

            /// <summary> 设备名称  末端灯号等 保留暂时不用</summary>
            public string RtuName { get; set; }

            /// <summary> 是否停运</summary>
            public bool IsUsed { get; set; }

            /// <summary> 是否主动报警</summary>
            public bool IsAlarmAuto { get; set; }

            /// <summary> 灯头数  如1控2（1个控制器控制2个灯头）则为2</summary>
            public int LightCount { get; set; }

            /// <summary> 是否上电后自动开灯 1-2-3-4</summary>
            public List<bool> IsAutoOpenLightWhenElec4 { get; set; }

            /// <summary> 额定功率： 0-未设置；1、20；2、100；3、120,4、150,5、200,6、250,7、300,8、400,9、600,10、800,11、1000,12、1500,13、2000，14、50,15,75</summary>
            public List<int> PowerRate { get; set; }

            /// <summary> 路由1-2-3-4  保留暂时不用</summary>
            public List<int> RoutePass { get; set; }

        }

        /// <summary>集中器下的控制器分组分组信息</summary>
        public partial class SluCtrlGroupPara
        {
            /// <summary> 组地址  0表示为新增的分组</summary>
            public int GrpId { get; set; }

            /// <summary> 组名称</summary>
            public string GrpName { get; set; }

            /// <summary> 控制器设备清单  服务器返回时候携带解析好的 便于客户端呈现</summary>
            public List<Wlst.iifx.SluPara.SluCtrlGroupPara.SluCtrlBriefPara> Items { get; set; }

            /// <summary>控制器设备清单  客户端保存时候填写控制器的 逻辑地址即可</summary>
            public List<int> ItemsCtrls { get; set; }

            /// <summary>分组中的控制器器扼要信息</summary>
            public partial class SluCtrlBriefPara
            {
                /// <summary> 1-999 逻辑地址 参数保存的时候必须携带发送过来的此地址</summary>
                public int CtrlId { get; set; }

                /// <summary> 地址  1-256 物理地址</summary>
                public int CtrlPhyId { get; set; }

                /// <summary>灯杆编码 保存时候不需要</summary>
                public string LampCode { get; set; }

                /// <summary> 条形码 保存时候不需要</summary>
                public long BarCodeId { get; set; }

                /// <summary> 灯头数  如1控2则为2  保存时候不需要</summary>
                public int LightCount { get; set; }

            }

        }

    }

    /// <summary>
    /// <para>1、经纬度不再呈现， 采用系统默认设置的经纬度。由客户端CS设置。</para>
    /// <para>2、连续通信失败、功率因数低于、电压报警上限、下限 不再呈现，由中间层采用配置文件进行配置，默认依次为：5,0.6,300,170</para>
    /// <para>3、允许巡测、允许主动报警、自动补发指令、启动开关灯巡测[已经不再使用] 不再呈现，由中间层采用配置文件进行配置，默认均为 true.</para>
    /// <para>4、蓝牙pin码  中间层配置 ？默认 62547600 ？  需讨论</para>
    /// <para>1、回路矢量不再显示，默认1-4.</para>
    /// <para>2、功率上下限不再显示，默认 180,10  ，通过中间层配置文件进行默认配置。</para>
    /// <para>3、开灯序号 不再显示，默认按照物理地址。[追灯效果]</para>
    /// <para> ---------------------------------------------- 用户字体使用功能----------------------------------------------</para>
    /// <para>请求用户字体信息</para>
    /// </summary>
    public partial class UserShowFontRq
    {
        public Wlst.iifx.Head Head { get; set; }

        public string UserId { get; set; }

    }

    /// <summary>保存和返回用户字体信息</summary>
    public partial class UserShowFontInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public Wlst.iifx.UserShowFontInfo.UserShowFont UserSfo { get; set; }

        public partial class UserShowFont
        {
            public string UserId { get; set; }

            public List<int> FontIndexs { get; set; }

            public List<int> Fonts { get; set; }

        }

    }

    /// <summary>删除用户字体信息</summary>
    public partial class DeleteUserShowFontInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public string UserId { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 请求选中设备的上联和下联设备信息----------------------------------------------</para>
    /// <para>请求终端当前状态</para>
    /// </summary>
    public partial class GetEquRelated
    {
        /// <summary>设备逻辑地址</summary>
        public int RtuId { get; set; }

    }

    /// <summary>返回该设备的上联和下联设备信息</summary>
    public partial class RelatedRtus
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtuInfo> RtuItems { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 请求终端当前状态功能----------------------------------------------</para>
    /// <para>请求终端当前状态</para>
    /// </summary>
    public partial class GetRtusState
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>请求参数携带一个时间，在此之后的终端状态才返回</summary>
        public long DateStart { get; set; }

    }

    /// <summary>返回状态发生变化的终端</summary>
    public partial class RtusState
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.RtusState.RtuStateInfo> RtuItems { get; set; }

        public partial class RtuStateInfo
        {
            public int RtuId { get; set; }

            public int RtuPhyId { get; set; }

            public string RtuName { get; set; }

            /// <summary>终端状态；1、停运，2、不用，3、开灯[表示有电流]正常，4、开灯[表示有电流]有故障，5、关灯[表示无电流]正常，6、关灯[表示无电流]有故障，7、离线</summary>
            public int RtuState { get; set; }

            /// <summary>终端开关量输出回路数据 1-吸合 2-断开</summary>
            public List<int> RtuSwitchoutState { get; set; }

            /// <summary>终端模拟量回路数据 1-有电流 2-无电流</summary>
            public List<int> RtuAnaloopState { get; set; }

        }

    }

    /// <summary> ---------------------------------------------- 单灯状态读取----------------------------------------------</summary>
    public partial class SluStatusRead
    {
        /// <summary>slu 如果为空 则为全部</summary>
        public List<int> SluId { get; set; }

        /// <summary>更新的时间</summary>
        public long Time { get; set; }

    }

    public partial class SluStatusReturn
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluStatusReturn.SluStatus> SluStatusField { get; set; }

        public partial class SluStatus
        {
            public int SluId { get; set; }

            public List<Wlst.iifx.SluStatusReturn.SluStatus.SluCtrlStatus> CtrlStatus { get; set; }

            public partial class SluCtrlStatus
            {
                public int CtrlId { get; set; }

                public int PhyId { get; set; }

                public long BarCode { get; set; }

                /// <summary> 0、关灯  ，1、开灯 [功率>10]</summary>
                public int Status { get; set; }

            }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 请求终端回路的历史数据功能----------------------------------------------</para>
    /// <para>请求终端回路历史数据</para>
    /// </summary>
    public partial class GetRtuLoopHistory
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>终端地址</summary>
        public int RtuId { get; set; }

        /// <summary>终端回路地址</summary>
        public int LoopId { get; set; }

        /// <summary> 起始时间</summary>
        public long DateStart { get; set; }

        /// <summary> 结束时间</summary>
        public long DateEnd { get; set; }

    }

    /// <summary>返回终端回路历史数据</summary>
    public partial class RtuLoopHistory
    {
        public Wlst.iifx.Head Head { get; set; }

        public int RtuId { get; set; }

        public int RtuPhyId { get; set; }

        public string RtuName { get; set; }

        /// <summary> 设备回路地址</summary>
        public int RtuLoopId { get; set; }

        /// <summary> 设备回路名称</summary>
        public string RtuLoopName { get; set; }

        /// <summary>终端回路数据</summary>
        public List<Wlst.iifx.RtuLoopHistory.RtuLoopData> LoopItems { get; set; }

        public partial class RtuLoopData
        {
            /// <summary> 电压</summary>
            public double Voltage { get; set; }

            /// <summary> 电流</summary>
            public double Current { get; set; }

            /// <summary> 功率</summary>
            public double Power { get; set; }

            /// <summary> 功率因数</summary>
            public double Factor { get; set; }

            /// <summary> 亮灯率</summary>
            public double BrightRate { get; set; }

            /// <summary>0 正常，1 下限 2 上限 3 量程</summary>
            public int AOverRange { get; set; }

            /// <summary>0 正常，1 下限 2 上限 3 量程</summary>
            public int VOverRange { get; set; }

            /// <summary> 设备回路状态 1、吸合，2、断开</summary>
            public int SwitchInState { get; set; }

            /// <summary>发生时间</summary>
            public long DateCreate { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 请求日出日落时间功能----------------------------------------------</para>
    /// <para>请求日出日落时间</para>
    /// </summary>
    public partial class SunRiseSetTime
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 日出时间 为 hour*60+minutes</summary>
        public int SunRise { get; set; }

        /// <summary> 日落时间 为 hour*60+minutes</summary>
        public int SunSet { get; set; }

        /// <summary> 日出时间str 05:53</summary>
        public string SunRiseStr { get; set; }

        /// <summary> 日落时间str 18:01</summary>
        public string SunSetStr { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------- 主页显示功能----------------------------------------------</para>
    /// <para>请求当前故障top5的类型和数量</para>
    /// </summary>
    public partial class TopCurFaultInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> top5故障列表</summary>
        public List<Wlst.iifx.TopCurFaultInfo.TopCurFaultItem> CurErrs { get; set; }

        public partial class TopCurFaultItem
        {
            /// <summary> 故障编号</summary>
            public int FaultId { get; set; }

            /// <summary> 故障名称</summary>
            public string FaultName { get; set; }

            /// <summary> 故障数量</summary>
            public int FaultCount { get; set; }

        }

    }

    /// <summary>请求开关灯时间</summary>
    public partial class OpenCloseTimeInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 日出时间 为 hour*60+minutes</summary>
        public int SunRise { get; set; }

        /// <summary> 日落时间 为 hour*60+minutes</summary>
        public int SunSet { get; set; }

        /// <summary> 日出时间str 05:53</summary>
        public string SunRiseStr { get; set; }

        /// <summary> 日落时间str 18:01</summary>
        public string SunSetStr { get; set; }

        /// <summary> 开灯时间 为 hour*60+minutes</summary>
        public int OpenTime { get; set; }

        /// <summary> 关灯时间 为 hour*60+minutes</summary>
        public int CloseTime { get; set; }

        /// <summary> 开灯时间str 05:53</summary>
        public string OpenTimeStr { get; set; }

        /// <summary> 关灯时间str 18:01</summary>
        public string CloseTimeStr { get; set; }

    }

    /// <summary>请求亮灯率趋势</summary>
    public partial class BrightRateTrendInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.BrightRateTrendInfo.BrightRateTrendItem> Items { get; set; }

        public partial class BrightRateTrendItem
        {
            public double OperateSuccessRate { get; set; }

            /// <summary> 成功率</summary>
            public long DateCreate { get; set; }

            /// <summary>
            /// <para> 执行时间</para>
            /// <para>日期</para>
            /// </summary>
            public int Day { get; set; }

            /// <summary>操作成功路数</summary>
            public int OperateSuccessLoopNum { get; set; }

        }

    }

    /// <summary>返回终端、单灯在线率走势</summary>
    public partial class EquOnlineInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.EquOnlineInfo.EquOnlineItem> OnlineItems { get; set; }

        public partial class EquOnlineItem
        {
            /// <summary> 在线率</summary>
            public double OnlineRate { get; set; }

            /// <summary> 数据时间</summary>
            public long DateCreate { get; set; }

            /// <summary> 时分 15:04</summary>
            public string TimeStr { get; set; }

        }

    }

    /// <summary>返回故障响应率</summary>
    public partial class FaultResponseInfo
    {
        public List<Wlst.iifx.FaultResponseInfo.FaultResponseItem> FaultResponseItems { get; set; }

        public partial class FaultResponseItem
        {
            /// <summary> 故障类型 0-推送,1-写db,不推送,2-推送置顶</summary>
            public int FaultLevel { get; set; }

            /// <summary> 响应率</summary>
            public double ResponseRate { get; set; }

        }

    }

    /// <summary>返回最新故障</summary>
    public partial class NewFaultInfo
    {
        public List<Wlst.iifx.NewFaultInfo.NewFaultItem> NewFaultItems { get; set; }

        public partial class NewFaultItem
        {
            public long DateCreate { get; set; }

            /// <summary> 时间</summary>
            public int RtuId { get; set; }

            /// <summary> 设备逻辑地址</summary>
            public int RtuPhyId { get; set; }

            /// <summary> 设备物理地址</summary>
            public string RtuName { get; set; }

            /// <summary> 设备名称</summary>
            public int LoopId { get; set; }

            /// <summary> 回路或控制器地址</summary>
            public string LoopName { get; set; }

            /// <summary> 回路或控制器名称</summary>
            public int LampId { get; set; }

            /// <summary> 灯头地址</summary>
            public string LampName { get; set; }

            /// <summary> 灯头名称</summary>
            public int FaultId { get; set; }

            /// <summary> 故障编号</summary>
            public string FaultName { get; set; }

            /// <summary> 故障名称</summary>
            public int PriorityLevel { get; set; }

            /// <summary>
            /// <para> 故障类型 0-推送,1-写db,不推送,2-推送置顶</para>
            /// <para>时间 YYYY-MM-DD HH:MM:SS 如 2018-10-10 15:22:03</para>
            /// </summary>
            public string DateCreateString { get; set; }

        }

    }

    /// <summary>返回终端、集中器、控制器活跃率</summary>
    public partial class EquActiveInfo
    {
        public List<Wlst.iifx.EquActiveInfo.EquActiveItem> EquActiveItems { get; set; }

        public partial class EquActiveItem
        {
            /// <summary> 活跃率</summary>
            public double ActiveRate { get; set; }

            /// <summary> 设备类型 1-终端 2-集中器 3-控制器</summary>
            public int EquType { get; set; }

            /// <summary> 设备总数</summary>
            public int EquCount { get; set; }

            /// <summary> 在线总数</summary>
            public int EquOnlineCount { get; set; }

        }

    }

    /// <summary>返回主页显示信息</summary>
    public partial class HomePageData
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>开关灯时间</summary>
        public Wlst.iifx.OpenCloseTimeInfo OpenCloseTime { get; set; }

        /// <summary>当前故障top5的类型和数量</summary>
        public Wlst.iifx.TopCurFaultInfo TopCurFault { get; set; }

        /// <summary>故障响应率</summary>
        public Wlst.iifx.FaultResponseInfo FaultReponse { get; set; }

        /// <summary>最新故障</summary>
        public Wlst.iifx.NewFaultInfo NewFault { get; set; }

        /// <summary>设备活跃率</summary>
        public Wlst.iifx.EquActiveInfo EquActive { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------- URL获取----------------------------------------------</para>
    /// <para>获取系统URL</para>
    /// </summary>
    public partial class SysUrlInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 地图url、业务url、websocket url</summary>
        public List<string> Urls { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------- ArcGis地图功能----------------------------------------</para>
    /// <para>获取设备点位信息</para>
    /// </summary>
    public partial class GisGetTableInfo
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>请求的表名称</summary>
        public List<string> TableNames { get; set; }

        /// <summary>应答的表信息</summary>
        public List<Wlst.iifx.GisGetTableInfo.GisTableInfo> TableInfos { get; set; }

        /// <summary>终端运行信息</summary>
        public partial class GisTableInfo
        {
            /// <summary>图层名称</summary>
            public string TableName { get; set; }

            /// <summary>属性信息</summary>
            public List<string> ColumName { get; set; }

        }

    }

    /// <summary>
    /// <para>返回 CommAns</para>
    /// <para>删除点位信息</para>
    /// </summary>
    public partial class GisDeleteElement
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>图层名称</summary>
        public string TableName { get; set; }

        /// <summary>列名称信息   列名称[数据库内名称]</summary>
        public List<string> ColumNames { get; set; }

        /// <summary>列值信息  与colum_names一一对应的</summary>
        public List<string> ColumValues { get; set; }

    }

    /// <summary>
    /// <para>返回 CommAns</para>
    /// <para>添加点位信息</para>
    /// </summary>
    public partial class GisAddElement
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>图层名称</summary>
        public string TableName { get; set; }

        /// <summary>列名称信息   列名称[数据库内名称]</summary>
        public List<string> ColumNames { get; set; }

        /// <summary>列值信息  与colum_names一一对应的</summary>
        public List<string> ColumValues { get; set; }

        /// <summary>经度信息  单个点添加  填写一个即可 ，连线则起始到结束的经度列表</summary>
        public List<double> GisX { get; set; }

        /// <summary>纬度信息 单个点添加  填写一个即可 ，连线则起始到结束的纬度列表</summary>
        public List<double> GisY { get; set; }

    }

    /// <summary>
    /// <para>返回 CommAns</para>
    /// <para>更新点位信息</para>
    /// </summary>
    public partial class GisUpdateElement
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>图层名称</summary>
        public string TableName { get; set; }

        /// <summary>列名称信息   列名称[数据库内名称]   主键为标记位 bh的字段</summary>
        public List<string> ColumNames { get; set; }

        /// <summary>列值信息  与colum_names一一对应的   主键为标记位 bh的字段</summary>
        public List<string> ColumValues { get; set; }

        /// <summary>经度信息  单个点修改  填写一个即可 ，不支持连线的修改</summary>
        public List<double> GisX { get; set; }

        /// <summary>纬度信息 单个点添加  填写一个即可 ，不支持连线的修改</summary>
        public List<double> GisY { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------漏电设备----------------------------------------</para>
    /// <para>终端运行信息</para>
    /// </summary>
    public partial class LeakPara
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.LeakPara.LeakParaItem> Items { get; set; }

        /// <summary>漏电逻辑地址  请求时携带此参数 即可</summary>
        public int LeakId { get; set; }

        /// <summary>漏电名称</summary>
        public string LeakName { get; set; }

        /// <summary>漏电物理地址</summary>
        public int LeakPhyId { get; set; }

        /// <summary>漏电连接设备逻辑地址</summary>
        public int LeakFid { get; set; }

        /// <summary>漏电连接设备物理地址 (保存时不用填写)</summary>
        public int LeakFphyId { get; set; }

        /// <summary>漏电连接设备名称 (保存时不用填写)</summary>
        public string LeakFname { get; set; }

        /// <summary> 漏电线路信息</summary>
        public partial class LeakParaItem
        {
            /// <summary> 线路序号</summary>
            public int LineId { get; set; }

            /// <summary> 线路名称</summary>
            public string LineName { get; set; }

            /// <summary> 是否使用 默认使用</summary>
            public bool IsUsed { get; set; }

            /// <summary> 1、漏电检测模式，2、温度检测模式</summary>
            public int LeakMode { get; set; }

            /// <summary> 1、自动分闸，2、自动报警</summary>
            public int AutoBreakOrAutoAlarm { get; set; }

            /// <summary>
            /// <para> 如果漏电模式：a 如果为自动分闸 则为分闸漏电上限值，b如果为自动报警则为漏电报警上限值；</para>
            /// <para>如果为温度检测模式：a 如果为自动分闸则为分闸温度上限值，b 如果为自动报警则为温度报警上限值</para>
            /// </summary>
            public int UpperAlarmOrBreakforLeakOrTemperature { get; set; }

            /// <summary> 如果为自动分闸模式 则为回路自动分闸延迟时间</summary>
            public int TimeDelayforBreak { get; set; }

        }

    }

    /// <summary>****************************漏电历史数据查询、最新数据查询*****************************</summary>
    public partial class RequestLeakData
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        /// <summary>查询全部的时候要求结束时间不能大于起始时间+1小时</summary>
        public List<int> RtuId { get; set; }

        /// <summary>漏电值 大于 默认为0  不判断</summary>
        public int LeakA { get; set; }

        /// <summary>是否报警  1、报警 ，0、未启用此设置</summary>
        public int IsLeakAlarm { get; set; }

        /// <summary>按上限值查询  默认0  不查询此值</summary>
        public int LeakUppper { get; set; }

        /// <summary>返回的数据</summary>
        public List<Wlst.iifx.RequestLeakData.LeakNewData> Items { get; set; }

        /// <summary> 终端设备最新数据；与服务器交互数据</summary>
        public partial class LeakNewData
        {
            /// <summary> 终端地址</summary>
            public int LeakId { get; set; }

            /// <summary>该设备的数据记录</summary>
            public List<Wlst.iifx.RequestLeakData.LeakNewData.LeakNewDataItem> Items { get; set; }

            public partial class LeakNewDataItem
            {
                /// <summary> 数据发生时间</summary>
                public long DateCreate { get; set; }

                /// <summary> 终端地址</summary>
                public int LeakId { get; set; }

                /// <summary> 回路序号</summary>
                public int LeakLineId { get; set; }

                /// <summary> 1、漏电检测模式，2、温度检测模式</summary>
                public int LeakMode { get; set; }

                /// <summary> 1、自动分闸，2、自动报警</summary>
                public int AutoBreakOrAutoAlarm { get; set; }

                /// <summary> 闸状态：1、分闸状态，2、合闸状态</summary>
                public int StateofOnOff { get; set; }

                /// <summary> 报警状态 1、报警  2、无警</summary>
                public int StateofAlarm { get; set; }

                /// <summary>
                /// <para>上限值</para>
                /// <para> 如果漏电模式：a 如果为自动分闸 则为分闸漏电上限值，b如果为自动报警则为漏电报警上限值；</para>
                /// <para>如果为温度检测模式：a 如果为自动分闸则为分闸温度上限值，b 如果为自动报警则为温度报警上限值</para>
                /// </summary>
                public int UpperAlarmOrBreakforLeakOrTemperature { get; set; }

                /// <summary> 如果为自动分闸模式 则为回路自动分闸延迟时间  主动报警模式无意义</summary>
                public int TimeDelayforBreak { get; set; }

                /// <summary> 报警值  当设备检测到温度或漏电大于设定的上限值时  设备回记录发生报警时刻的数据</summary>
                public int AlarmValueLeakOrTemperature { get; set; }

                /// <summary> 当前值  系统选测设备数据时的当前漏电值或温度值</summary>
                public int CurrentLeakOrTemperature { get; set; }

                /// <summary> 连接终端地址</summary>
                public int LeakFId { get; set; }

                /// <summary> 连接终端名称</summary>
                public string LeakFname { get; set; }

                /// <summary> 连接终端物理地址</summary>
                public int LeakFphyid { get; set; }

            }

        }

    }

    public partial class LeakOrders
    {
        /// <summary>漏电逻辑地址</summary>
        public List<int> RtuId { get; set; }

        /// <summary> 1、设置漏电地址，2、设置漏电运行参数， 3、手动分合闸，4、设置检测门限值，5、 设置时钟，6、复位，  11、选测，12、召测时钟、13 召测参数，14 查询漏电检测器最近事件；</summary>
        public int Op { get; set; }

        /// <summary>漏电回路序号</summary>
        public List<int> LeakLineId { get; set; }

        /// <summary>2分闸，1、合闸</summary>
        public int OrderBreaktype { get; set; }

    }

    public partial class LeakZcWorkArgs
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>召测的参数</summary>
        public List<Wlst.iifx.LeakZcWorkArgs.LeakZcWorkArgsItem> Items { get; set; }

        /// <summary>漏电逻辑地址</summary>
        public int LeakId { get; set; }

        /// <summary>漏电名称</summary>
        public string LeakName { get; set; }

        /// <summary>漏电物理地址</summary>
        public int LeakPhyId { get; set; }

        /// <summary>漏电连接设备逻辑地址</summary>
        public int LeakFid { get; set; }

        /// <summary>漏电连接设备物理地址</summary>
        public int LeakFphyId { get; set; }

        /// <summary>漏电连接设备名称</summary>
        public string LeakFname { get; set; }

        public partial class LeakZcWorkArgsItem
        {
            public int LeakId { get; set; }

            public int LeakLineId { get; set; }

            /// <summary>启用标志  0-不启用，1-启用</summary>
            public int IsUsed { get; set; }

            /// <summary>工作模式 ，0-报警不动作，1-报警并动作</summary>
            public int AlarmWithOption { get; set; }

            /// <summary>设置的报警：漏电报警【毫安】/温度报警【摄氏度】</summary>
            public int ValueSet { get; set; }

            /// <summary>操作延时</summary>
            public int TimeDelayOpe { get; set; }

            /// <summary>启用标志  0-不启用，1-启用</summary>
            public int IsUsedSet { get; set; }

            /// <summary>工作模式 ，0-报警不动作，1-报警并动作</summary>
            public int AlarmWithOptionSet { get; set; }

            /// <summary>设置的报警：漏电报警【毫安】/温度报警【摄氏度】</summary>
            public int ValueSetSet { get; set; }

            /// <summary>操作延时</summary>
            public int TimeDelayOpeSet { get; set; }

            /// <summary>启用标志   数据库与召测是否一致  1、一致 ，2、不一致</summary>
            public int IsUsedRight { get; set; }

            /// <summary>工作模式   数据库与召测是否一致  1、一致 ，2、不一致</summary>
            public int AlarmWithOptionSetField { get; set; }

            /// <summary>设置的报警  数据库与召测是否一致  1、一致 ，2、不一致</summary>
            public int ValueSetSetField { get; set; }

            /// <summary>操作延时  数据库与召测是否一致  1、一致 ，2、不一致</summary>
            public int TimeDelayOpeSetField { get; set; }

        }

    }

    /// <summary>
    /// <para> ---------------------------------------------光控设备----------------------------------------</para>
    /// <para>光控参数</para>
    /// </summary>
    public partial class LuxPara
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>光控逻辑地址  请求时携带此参数 即可</summary>
        public int LuxId { get; set; }

        /// <summary>光控名称</summary>
        public string LuxName { get; set; }

        /// <summary>光控物理地址</summary>
        public int LuxPhyId { get; set; }

        /// <summary>光控连接设备逻辑地址</summary>
        public int LuxFid { get; set; }

        /// <summary>光控连接设备物理地址</summary>
        public int LuxFphyId { get; set; }

        /// <summary>光控连接设备名称</summary>
        public string LuxFname { get; set; }

        /// <summary>通信方式 0 保留，1 电台，2 串口232，3 串口485，4 Zigbee，5 电力载波，6 Socket</summary>
        public int LuxCommTypeCode { get; set; }

        /// <summary>
        /// <para>光控工作模式 0 每隔5秒主报(主站模式)，1 选测应答 ，2 根据设定的时间主动上报，默认10秒，GPRS通信，</para>
        /// <para>3 根据设定的时间主动上报，默认10秒，485通信， 4-按自定义间隔主动上报（GPRS通信）(新)</para>
        /// </summary>
        public int LuxWorkMode { get; set; }

        /// <summary>光控量程</summary>
        public int LuxRange { get; set; }

    }

    /// <summary>光控数据查询</summary>
    public partial class RequestLuxData
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        public List<int> LuxId { get; set; }

        /// <summary>返回的数据</summary>
        public List<Wlst.iifx.RequestLuxData.LuxDataItem> Items { get; set; }

        /// <summary> 光控设备数据</summary>
        public partial class LuxDataItem
        {
            /// <summary> 数据发生时间</summary>
            public long DateCreate { get; set; }

            /// <summary> 光控地址</summary>
            public int LuxId { get; set; }

            /// <summary> 光控名称</summary>
            public string LuxName { get; set; }

            /// <summary> 光控物理地址</summary>
            public int LuxPhyId { get; set; }

            /// <summary> 采集的光控值</summary>
            public double LuxValue { get; set; }

        }

    }

    /// <summary>光控指令</summary>
    public partial class LuxOrders
    {
        /// <summary>光控逻辑地址</summary>
        public int LuxId { get; set; }

        /// <summary>光控物理地址</summary>
        public int LuxPhyId { get; set; }

        /// <summary> 1 选测，2 召测模式，3 召测主报时间，4 召测版本，12 设置模式 25，13 设置主报时间38，15 设置光控运行模式 36、37</summary>
        public int Op { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------电表设备----------------------------------------</para>
    /// <para>电表参数</para>
    /// </summary>
    public partial class MruPara
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>电表逻辑地址  请求时携带此参数 即可</summary>
        public int MruId { get; set; }

        /// <summary>电表名称</summary>
        public string MruName { get; set; }

        /// <summary>电表物理地址</summary>
        public int MruPhyId { get; set; }

        /// <summary>电表连接设备逻辑地址</summary>
        public int MruFid { get; set; }

        /// <summary>电表连接设备物理地址</summary>
        public int MruFphyId { get; set; }

        /// <summary>电表连接设备名称</summary>
        public string MruFname { get; set; }

        /// <summary>电表波特率 直接写入 1200,2400,4800 值</summary>
        public int MruBaudrate { get; set; }

        /// <summary>电表变比</summary>
        public int MruRatio { get; set; }

        /// <summary>电表类型 1 ：1997协议；2 ：2007 协议</summary>
        public int MruType { get; set; }

        /// <summary>电表地址</summary>
        public int MruAddr1 { get; set; }

        /// <summary>电表地址</summary>
        public int MruAddr2 { get; set; }

        /// <summary>电表地址</summary>
        public int MruAddr3 { get; set; }

        /// <summary>电表地址</summary>
        public int MruAddr4 { get; set; }

        /// <summary>电表地址</summary>
        public int MruAddr5 { get; set; }

        /// <summary>电表地址</summary>
        public int MruAddr6 { get; set; }

    }

    /// <summary>
    /// <para>****************************电表数据查询*****************************</para>
    /// <para>电表数据查询</para>
    /// </summary>
    public partial class RequestMruData
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        public List<int> MruId { get; set; }

        /// <summary>返回的数据</summary>
        public List<Wlst.iifx.RequestMruData.MruDataItem> Items { get; set; }

        /// <summary> 电表设备数据</summary>
        public partial class MruDataItem
        {
            /// <summary> 抄表时间</summary>
            public long DateCreate { get; set; }

            /// <summary> 抄表时间str</summary>
            public string StrDateCreate { get; set; }

            /// <summary> 电表地址</summary>
            public int MruId { get; set; }

            /// <summary> 电表名称</summary>
            public string MruName { get; set; }

            /// <summary> 电表物理地址</summary>
            public int MruPhyId { get; set; }

            /// <summary> 电表连接设备逻辑地址</summary>
            public int MruFid { get; set; }

            /// <summary> 电表连接设备物理地址</summary>
            public int MruFphyId { get; set; }

            /// <summary>电表连接设备名称</summary>
            public string MruFname { get; set; }

            /// <summary> 抄表时间类型：0 当前时间；1上月时间；2上上月时间</summary>
            public int DateType { get; set; }

            /// <summary> 抄表类型：0保留；1 A相；2 B相；3 C相；4 总电量</summary>
            public int MruType { get; set; }

            /// <summary> 抄表值</summary>
            public double MruData { get; set; }

            /// <summary> 电量</summary>
            public double MruTotal { get; set; }

            /// <summary> 差值</summary>
            public string MruDiffer { get; set; }

            /// <summary> 累计差值</summary>
            public double MruTotalDiffer { get; set; }

            /// <summary> 电表表号</summary>
            public string MruNumber { get; set; }

        }

    }

    /// <summary>电表统计数据查询</summary>
    public partial class RequestMruStatisticsData
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        public List<int> MruId { get; set; }

        /// <summary> 统计类型 1- 日表 2- 月表 3- 年表</summary>
        public string StatisticsType { get; set; }

        /// <summary>返回的数据</summary>
        public List<Wlst.iifx.RequestMruStatisticsData.MruStatisticsDataItem> Items { get; set; }

        /// <summary> 电表设备统计数据</summary>
        public partial class MruStatisticsDataItem
        {
            /// <summary> 电表地址</summary>
            public int MruId { get; set; }

            /// <summary> 电表名称</summary>
            public string MruName { get; set; }

            /// <summary> 电表物理地址</summary>
            public int MruPhyId { get; set; }

            /// <summary> 电表连接设备逻辑地址</summary>
            public int MruFid { get; set; }

            /// <summary> 电表连接设备物理地址</summary>
            public int MruFphyId { get; set; }

            /// <summary>电表连接设备名称</summary>
            public string MruFname { get; set; }

            /// <summary> 抄表时间类型：0 当前时间；1上月时间；2上上月时间</summary>
            public int DateType { get; set; }

            /// <summary> 抄表类型：0保留；1 A相；2 B相；3 C相；4 总电量</summary>
            public int MruType { get; set; }

            /// <summary> 起始时间</summary>
            public long DtStartTime { get; set; }

            /// <summary> 起始时间str</summary>
            public string StrDtStartTime { get; set; }

            /// <summary> 起始抄表值</summary>
            public double MruDataStart { get; set; }

            /// <summary> 起始电量</summary>
            public double MruTotalStart { get; set; }

            /// <summary> 截止时间</summary>
            public long DtEndTime { get; set; }

            /// <summary> 截止时间str</summary>
            public string StrDtEndTime { get; set; }

            /// <summary> 截止抄表值</summary>
            public double MruDataEnd { get; set; }

            /// <summary> 截止电量</summary>
            public double MruTotalEnd { get; set; }

            /// <summary> 总抄表差额</summary>
            public double MruDifferData { get; set; }

            /// <summary> 总电量差额</summary>
            public double MruDifferTotal { get; set; }

            /// <summary> 电表表号</summary>
            public string MruNumber { get; set; }

        }

    }

    /// <summary>查询抄表失败数据</summary>
    public partial class RequestMruFailData
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        /// <summary>返回的数据</summary>
        public List<Wlst.iifx.RequestMruFailData.MruFailDataItem> Items { get; set; }

        /// <summary> 查询抄表失败数据</summary>
        public partial class MruFailDataItem
        {
            /// <summary> 电表地址</summary>
            public int MruId { get; set; }

            /// <summary> 电表名称</summary>
            public string MruName { get; set; }

            /// <summary> 电表物理地址</summary>
            public int MruPhyId { get; set; }

            /// <summary> 电表连接设备逻辑地址</summary>
            public int MruFid { get; set; }

            /// <summary> 电表连接设备物理地址</summary>
            public int MruFphyId { get; set; }

            /// <summary> 电表连接设备名称</summary>
            public string MruFname { get; set; }

            /// <summary> 电表表号</summary>
            public string MruNumber { get; set; }

        }

    }

    /// <summary>****************************电表指令*****************************</summary>
    public partial class MruOrders
    {
        /// <summary>电表逻辑地址</summary>
        public int MruId { get; set; }

        /// <summary> 1 读取电表地址，2 读取电表数据</summary>
        public int Op { get; set; }

        /// <summary> 抄表类型：0保留；1 A相；2 B相；3 C相；4 总电量</summary>
        public int DataMruType { get; set; }

        /// <summary> 抄表时间类型：0 当前时间；1上月时间；2上上月时间</summary>
        public int DataTimeType { get; set; }

    }

    /// <summary>返回抄表数据</summary>
    public partial class ReplyReadMruData
    {
        /// <summary> 抄表时间</summary>
        public long DateCreate { get; set; }

        /// <summary> 抄表时间str</summary>
        public string StrDateCreate { get; set; }

        /// <summary> 电表地址</summary>
        public int RtuId { get; set; }

        /// <summary> 抄表类型：0保留；1 A相；2 B相；3 C相；4 总电量</summary>
        public int DataMruType { get; set; }

        /// <summary> 抄表时间类型：0 当前时间；1上月时间；2上上月时间</summary>
        public int DataTimeType { get; set; }

        /// <summary> 电表变比</summary>
        public int MruRatio { get; set; }

        /// <summary> 读取的数据值</summary>
        public double MruData { get; set; }

        /// <summary> 电量</summary>
        public double MruTotal { get; set; }

    }

    /// <summary>批量抄表</summary>
    public partial class MruMeasure
    {
        /// <summary>电表逻辑地址 为空则是全部</summary>
        public List<int> MruId { get; set; }

    }

    /// <summary>
    /// <para> ---------------------------------------------线路防盗设备----------------------------------------</para>
    /// <para>防盗参数</para>
    /// </summary>
    public partial class LduPara
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>防盗逻辑地址  请求时携带此参数 即可</summary>
        public int LduId { get; set; }

        /// <summary>防盗名称</summary>
        public string LduName { get; set; }

        /// <summary>防盗物理地址</summary>
        public int LduPhyId { get; set; }

        /// <summary>防盗连接设备逻辑地址</summary>
        public int LduFid { get; set; }

        /// <summary>防盗连接设备物理地址</summary>
        public int LduFphyId { get; set; }

        /// <summary>防盗连接设备名称</summary>
        public string LduFname { get; set; }

        /// <summary>控制器参数</summary>
        public List<Wlst.iifx.LduPara.LduLinePars> ItemsPara { get; set; }

        public partial class LduLinePars
        {
            /// <summary> 集中器地址</summary>
            public int LduFid { get; set; }

            /// <summary> 回路地址 1-6</summary>
            public int LineId { get; set; }

            /// <summary> 回路1互感器比值</summary>
            public int MutualInductorRadio { get; set; }

            /// <summary> 回路1相位 0-保留，1-A相 ，2-B相 3-C相</summary>
            public int LduPhase { get; set; }

            /// <summary> 回路1开灯信号强度门限</summary>
            public int LduLightonSingleLimit { get; set; }

            /// <summary> 回路1开灯阻抗报警门限</summary>
            public int LduLightonImpedanceLimit { get; set; }

            /// <summary> 回路1亮灯率信号门限</summary>
            public int LduBrightRateAlarmLimit { get; set; }

            /// <summary> 回路1关灯信号强度门限</summary>
            public int LduLightoffSingleLimit { get; set; }

            /// <summary> 回路1关灯阻抗报警门限</summary>
            public int LduLightoffImpedanceLimit { get; set; }

            /// <summary> 回路1末端灯杆</summary>
            public string LduEndLampportSn { get; set; }

            /// <summary> 主动报警</summary>
            public bool AlarmAutoReport { get; set; }

            /// <summary> 线路短路主动告警</summary>
            public bool AlarmLineShortCircuit { get; set; }

            /// <summary> 关灯阻抗主动报警</summary>
            public bool AlarmLineLightOffImpedance { get; set; }

            /// <summary> 关灯信号强度主动告警</summary>
            public bool AlarmLineLightOffSingle { get; set; }

            /// <summary> 线路失电主动告警</summary>
            public bool AlarmLineLosePower { get; set; }

            /// <summary> 亮灯率变化主动告警</summary>
            public bool AlarmLineBrightRate { get; set; }

            /// <summary> 开灯阻抗主动报警</summary>
            public bool AlarmLineLightOpenImpedance { get; set; }

            /// <summary> 开灯信号强度主动告警</summary>
            public bool AlarmLineLightOpenSingel { get; set; }

            /// <summary> 是否使用</summary>
            public bool IsUsed { get; set; }

            /// <summary> 控制类型 0保留，1 1控1,2 1控2，3 1控3</summary>
            public int LduControlTypeCode { get; set; }

            /// <summary> 线路名称</summary>
            public string LduLineName { get; set; }

            /// <summary> 回路序号  本防盗检测设备检测的终端回路的回路序号</summary>
            public int LduLoopId { get; set; }

            /// <summary> 故障参数</summary>
            public int LduFaultParam { get; set; }

            /// <summary>
            /// <para> 原设计为通信方式，先均为 GPRS -- 0 保留，1 电台，2 串口232，3 串口485，4 Zigbee，5 电力载波，6 Socket  一般为3或6--</para>
            /// <para> 现修改为 单灯是否启用晚上开灯启用巡测 白天关灯关闭巡测 功能 1启用 0不启用该功能</para>
            /// </summary>
            public int LduCommTypeCode { get; set; }

            /// <summary> 终端模拟量回路名称</summary>
            public List<string> RtuLoopNames { get; set; }

        }

    }

    /// <summary>防盗召测参数</summary>
    public partial class LduZcPara
    {
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>防盗逻辑地址  请求时携带此参数 即可</summary>
        public int LduId { get; set; }

        /// <summary>防盗物理地址</summary>
        public int LduPhyId { get; set; }

        /// <summary>防盗连接设备逻辑地址</summary>
        public int LduFid { get; set; }

        /// <summary>控制器参数</summary>
        public List<Wlst.iifx.LduZcPara.LduLinePars> ItemsPara { get; set; }

        public partial class LduLinePars
        {
            /// <summary> 回路地址 1-6</summary>
            public int LineId { get; set; }

            /// <summary> 线路名称</summary>
            public string LduLineName { get; set; }

            /// <summary> 是否使用</summary>
            public bool IsUsed { get; set; }

            /// <summary> 回路序号  本防盗检测设备检测的终端回路的回路序号</summary>
            public int LduLoopId { get; set; }

            /// <summary>
            /// <para> 设备返回参数</para>
            /// <para> 回路1互感器比值</para>
            /// </summary>
            public int MutualInductorRadio { get; set; }

            /// <summary> 回路1相位 0-保留，1-A相 ，2-B相 3-C相</summary>
            public int LduPhase { get; set; }

            /// <summary> 回路1开灯信号强度门限</summary>
            public int LduLightonSingleLimit { get; set; }

            /// <summary> 回路1开灯阻抗报警门限</summary>
            public int LduLightonImpedanceLimit { get; set; }

            /// <summary> 回路1亮灯率信号门限</summary>
            public int LduBrightRateAlarmLimit { get; set; }

            /// <summary> 回路1关灯信号强度门限</summary>
            public int LduLightoffSingleLimit { get; set; }

            /// <summary> 回路1关灯阻抗报警门限</summary>
            public int LduLightoffImpedanceLimit { get; set; }

            /// <summary> 主动报警</summary>
            public bool AlarmAutoReport { get; set; }

            /// <summary> 线路短路主动告警</summary>
            public bool AlarmLineShortCircuit { get; set; }

            /// <summary> 关灯阻抗主动报警</summary>
            public bool AlarmLineLightOffImpedance { get; set; }

            /// <summary> 关灯信号强度主动告警</summary>
            public bool AlarmLineLightOffSingle { get; set; }

            /// <summary> 线路失电主动告警</summary>
            public bool AlarmLineLosePower { get; set; }

            /// <summary> 亮灯率变化主动告警</summary>
            public bool AlarmLineBrightRate { get; set; }

            /// <summary> 开灯阻抗主动报警</summary>
            public bool AlarmLineLightOpenImpedance { get; set; }

            /// <summary> 开灯信号强度主动告警</summary>
            public bool AlarmLineLightOpenSingel { get; set; }

            /// <summary>
            /// <para> 系统设置参数</para>
            /// <para> 回路1互感器比值</para>
            /// </summary>
            public int MutualInductorRadioSet { get; set; }

            /// <summary> 回路1相位 0-保留，1-A相 ，2-B相 3-C相</summary>
            public int LduPhaseSet { get; set; }

            /// <summary> 回路1开灯信号强度门限</summary>
            public int LduLightonSingleLimitSet { get; set; }

            /// <summary> 回路1开灯阻抗报警门限</summary>
            public int LduLightonImpedanceLimitSet { get; set; }

            /// <summary> 回路1亮灯率信号门限</summary>
            public int LduBrightRateAlarmLimitSet { get; set; }

            /// <summary> 回路1关灯信号强度门限</summary>
            public int LduLightoffSingleLimitSet { get; set; }

            /// <summary> 回路1关灯阻抗报警门限</summary>
            public int LduLightoffImpedanceLimitSet { get; set; }

            /// <summary> 主动报警</summary>
            public bool AlarmAutoReportSet { get; set; }

            /// <summary> 线路短路主动告警</summary>
            public bool AlarmLineShortCircuitSet { get; set; }

            /// <summary> 关灯阻抗主动报警</summary>
            public bool AlarmLineLightOffImpedanceSet { get; set; }

            /// <summary> 关灯信号强度主动告警</summary>
            public bool AlarmLineLightOffSingleSet { get; set; }

            /// <summary> 线路失电主动告警</summary>
            public bool AlarmLineLosePowerSet { get; set; }

            /// <summary> 亮灯率变化主动告警</summary>
            public bool AlarmLineBrightRateSet { get; set; }

            /// <summary> 开灯阻抗主动报警</summary>
            public bool AlarmLineLightOpenImpedanceSet { get; set; }

            /// <summary> 开灯信号强度主动告警</summary>
            public bool AlarmLineLightOpenSingelSet { get; set; }

        }

    }

    /// <summary>防盗数据查询</summary>
    public partial class RequestLduData
    {
        public Wlst.iifx.Head Head { get; set; }

        public long DtStartTime { get; set; }

        public long DtEndTime { get; set; }

        /// <summary> 集中控制器查询  查询该集中控制器下的线路数据,为空则是全部</summary>
        public List<int> LduId { get; set; }

        /// <summary> 控制器编号 1-6 ,若为0 则不按线路查询</summary>
        public int LineId { get; set; }

        /// <summary>返回的数据</summary>
        public List<Wlst.iifx.RequestLduData.LduLineDataItem> Items { get; set; }

        /// <summary> 线路数据</summary>
        public partial class LduLineDataItem
        {
            /// <summary> 集中器地址</summary>
            public int LduId { get; set; }

            /// <summary>防盗名称</summary>
            public string LduName { get; set; }

            /// <summary>防盗物理地址</summary>
            public int LduPhyId { get; set; }

            /// <summary>防盗连接设备逻辑地址</summary>
            public int LduFid { get; set; }

            /// <summary>防盗连接设备物理地址</summary>
            public int LduFphyId { get; set; }

            /// <summary>防盗连接设备名称</summary>
            public string LduFname { get; set; }

            /// <summary> 线路地址 1-6</summary>
            public int LineId { get; set; }

            /// <summary> 线路名称</summary>
            public string LduLineName { get; set; }

            /// <summary> 数据接收时间</summary>
            public long DateCreate { get; set; }

            public double V { get; set; }

            public double A { get; set; }

            /// <summary> 回路1有功功率</summary>
            public double PowerActive { get; set; }

            /// <summary> 回路1无功功率</summary>
            public double PowerReActive { get; set; }

            /// <summary> 回路1功率因数</summary>
            public double PowerFactor { get; set; }

            /// <summary> 回路1亮灯率</summary>
            public double BrightRate { get; set; }

            /// <summary> 回路1信号强度 脉冲</summary>
            public int Single { get; set; }

            /// <summary> 回路1阻抗</summary>
            public int Impedance { get; set; }

            /// <summary> 回路1 12s有用信号数量  阻抗数</summary>
            public int NumofUsefullSingleIn12Sec { get; set; }

            /// <summary> 回路1 12s信号数量 跳数</summary>
            public int NumofSingleIn12Sec { get; set; }

            /// <summary> 回路1检测标识 故障参数</summary>
            public int FlagDetection { get; set; }

            /// <summary> 回路1报警标识  故障数据</summary>
            public int FlagAlarm { get; set; }

            /// <summary>线路状态  0、正常，1、被盗，2、短路  不必要再做逻辑检测FlagAlarm与FlagDetection了</summary>
            public int ErrorId { get; set; }

        }

    }

    /// <summary>防盗指令</summary>
    public partial class LduOrders
    {
        /// <summary>防盗逻辑地址</summary>
        public int LduId { get; set; }

        /// <summary> 控制器编号 1-6 ，包含0或集合为空  则表示所有</summary>
        public List<int> LineIds { get; set; }

        /// <summary> 1、选测数据，2、召测参数，3、召测版本，4、召测亮灯率，11、设置参数应答，12、设置亮灯率应答，13 清除亮灯率应答</summary>
        public int Op { get; set; }

    }

    /// <summary>设置或召测亮灯率</summary>
    public partial class LduBrightLightSetOrZc
    {
        /// <summary> 集中控制器地址</summary>
        public int LduId { get; set; }

        /// <summary> 控制器亮灯率数据 cd01</summary>
        public List<Wlst.iifx.LduBrightLightSetOrZc.LduLineBrightLightData> ItemsBrightLight { get; set; }

        public partial class LduLineBrightLightData
        {
            /// <summary> 回路地址 1-6</summary>
            public int LineId { get; set; }

            /// <summary> 亮灯率</summary>
            public double BrightLightRate { get; set; }

        }

    }

    /// <summary> ---------------------------------------------- 设备备注----------------------------------------------</summary>
    public partial class EquimentRemarkRead
    {
        /// <summary>如果为空 则为全部</summary>
        public List<int> RtuId { get; set; }

    }

    public partial class EquimentRemarkReturn
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.EquimentRemarkReturn.SingleEquimentRemark> EquRemark { get; set; }

        public partial class SingleEquimentRemark
        {
            public int RtuId { get; set; }

            public string Remark1 { get; set; }

            public string Remark2 { get; set; }

            public string Remark3 { get; set; }

            public string Remark4 { get; set; }

            public string Remark5 { get; set; }

            public string Remark6 { get; set; }

            public string Remark7 { get; set; }

        }

    }

    public partial class EquimentRemarkSave
    {
        public List<Wlst.iifx.EquimentRemarkSave.SingleEquimentRemark> EquRemark { get; set; }

        public partial class SingleEquimentRemark
        {
            public int RtuId { get; set; }

            public string Remark1 { get; set; }

            public string Remark2 { get; set; }

            public string Remark3 { get; set; }

            public string Remark4 { get; set; }

            public string Remark5 { get; set; }

            public string Remark6 { get; set; }

            public string Remark7 { get; set; }

        }

    }

    /// <summary> ---------------------------------------------- NB单灯参数----------------------------------------------</summary>
    public partial class SluSglCtrlParaRead
    {
        /// <summary>如果为空 则为全部</summary>
        public List<long> Imei { get; set; }

    }

    public partial class SluSglCtrlParaReturn
    {
        public Wlst.iifx.Head Head { get; set; }

        public List<Wlst.iifx.SluSglCtrlParaReturn.SingleSluSglCtrlPara> SluSglCtrlPara { get; set; }

        public List<Wlst.iifx.SluSglCtrlParaReturn.SluSglFieldList> SluSglField { get; set; }

        public partial class SingleSluSglCtrlPara
        {
            public int CtrlId { get; set; }

            public long BarCodeId { get; set; }

            public long Imei { get; set; }

            public int Nbtype { get; set; }

            public string LampCode { get; set; }

            public string CtrlName { get; set; }

            public int IsUsed { get; set; }

            public int IsAlarmAuto { get; set; }

            public List<int> IsAutoOpenLightWhenPowerUp { get; set; }

            public List<int> VectorLoop { get; set; }

            public List<int> PowerSetting { get; set; }

            public List<int> RoutePass { get; set; }

            public int LightCount { get; set; }

            public int UpperPower { get; set; }

            public int LowerPower { get; set; }

            public double CtrlGisX { get; set; }

            public double CtrlGisY { get; set; }

            public long UpdateTime { get; set; }

            public int UplinkTimer { get; set; }

            public int UplinkReply { get; set; }

            public int FieldIndex { get; set; }

            public string FieldName { get; set; }

        }

        public partial class SluSglFieldList
        {
            public int FieldId { get; set; }

            public string FieldName { get; set; }

        }

    }

    public partial class SluSglCtrlParaSave
    {
        public List<Wlst.iifx.SluSglCtrlParaSave.SingleSluSglCtrlPara> SluSglCtrlPara { get; set; }

        public int FieldId { get; set; }

        public partial class SingleSluSglCtrlPara
        {
            public int CtrlId { get; set; }

            public long BarCodeId { get; set; }

            public long Imei { get; set; }

            public int Nbtype { get; set; }

            public string LampCode { get; set; }

            public string CtrlName { get; set; }

            public int IsUsed { get; set; }

            public int IsAlarmAuto { get; set; }

            public List<int> IsAutoOpenLightWhenPowerUp { get; set; }

            public List<int> VectorLoop { get; set; }

            public List<int> PowerSetting { get; set; }

            public List<int> RoutePass { get; set; }

            public int LightCount { get; set; }

            public int UpperPower { get; set; }

            public int LowerPower { get; set; }

            public double CtrlGisX { get; set; }

            public double CtrlGisY { get; set; }

            public int UplinkTimer { get; set; }

            public int UplinkReply { get; set; }

        }

    }

    /// <summary>
    /// <para>----------------------------------------------终端周设置查询----------------------------------------------</para>
    /// <para> 请求指定终端指定时间段内的周设置</para>
    /// </summary>
    public partial class GetRtusWeekTimeInfo
    {
        /// <summary>
        /// <para>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]</para>
        /// <para>repeated的[packed = true]只有type为数值的时候才能用</para>
        /// <para>终端列表 无数据则表示所有终端</para>
        /// </summary>
        public List<int> RtuIds { get; set; }

        /// <summary> 起始时间 java时间，可以查询一天或者几天的数据 （每个时间精确到 年月日即可）</summary>
        public long DateStart { get; set; }

        /// <summary> 结束时间 java时间，可以查询一天或者几天的数据 （每个时间精确到 年月日即可）</summary>
        public long DateEnd { get; set; }

    }

    /// <summary>单个终端查询期内周设置信息</summary>
    public partial class RtuWeekTimeInfo
    {
        /// <summary> 设备逻辑地址</summary>
        public int RtuId { get; set; }

        /// <summary>查询段内的开关灯信息</summary>
        public List<Wlst.iifx.RtuWeekTimeInfo.OneDayWeekTime> InfoItems { get; set; }

        /// <summary> 一天的开关灯信息</summary>
        public partial class OneDayWeekTime
        {
            /// <summary> 时间 java时间</summary>
            public long DtTime { get; set; }

            /// <summary> K1-Kx的第一段开关时间 hhmm-hhmm (为空表示无此段周设置)</summary>
            public List<string> WeekTimeInfo1 { get; set; }

            /// <summary> K1-Kx的第二段开关时间 hhmm-hhmm (为空表示无此段周设置)</summary>
            public List<string> WeekTimeInfo2 { get; set; }

            /// <summary> K1-Kx的第三段开关时间 hhmm-hhmm (为空表示无此段周设置)</summary>
            public List<string> WeekTimeInfo3 { get; set; }

            /// <summary> K1-Kx的第四段开关时间 hhmm-hhmm (为空表示无此段周设置)</summary>
            public List<string> WeekTimeInfo4 { get; set; }

        }

    }

    /// <summary>广州南瑞单灯设置/读取经纬度以及开关灯偏移时间</summary>
    public partial class NRSetOrZcTudeAndDeviation
    {
        public int NrSluId { get; set; }

        /// <summary>设备逻辑地址</summary>
        public int NrSluPhyId { get; set; }

        /// <summary>设备物理地址</summary>
        public string NrSluName { get; set; }

        /// <summary>设备名称</summary>
        public int Op { get; set; }

        /// <summary> 1 设置经纬度以及开关灯偏移时间，2 读取经纬度以及开关灯偏移时间， 3、设置经纬度  4、读取经纬度</summary>
        public double Longitude { get; set; }

        /// <summary> 经度</summary>
        public double Latitude { get; set; }

        /// <summary> 纬度</summary>
        public int OnDeviation { get; set; }

        /// <summary> 开灯偏移，-60～60</summary>
        public int OffDeviation { get; set; }

        /// <summary> 关灯偏移，-60～60</summary>
        public List<int> OnDo { get; set; }

        /// <summary> 开灯控制启动，最大32个值，0-关闭，1-启用</summary>
        public List<int> OffDo { get; set; }

    }

    /// <summary>广州南瑞单灯设置控制器id以及灯头分组</summary>
    public partial class NRSetOrZcCtrlPara
    {
        public int NrSluId { get; set; }

        /// <summary>设备逻辑地址</summary>
        public int NrSluPhyId { get; set; }

        /// <summary>设备物理地址</summary>
        public string NrSluName { get; set; }

        /// <summary>设备名称</summary>
        public List<int> CtrlIds { get; set; }

        /// <summary> 控制器地址，空则全部</summary>
        public List<Wlst.iifx.NRSetOrZcCtrlPara.SluitemConfig> SluitemConfigField { get; set; }

        /// <summary> 控制器配置信息</summary>
        public partial class SluitemConfig
        {
            public int SluitemCtrlId { get; set; }

            /// <summary> 控制器地址</summary>
            public string SluitemCtrlName { get; set; }

            /// <summary> 控制器名称</summary>
            public long SluitemBarCode { get; set; }

            /// <summary> 控制器标识 条形码</summary>
            public int SluitemLamps { get; set; }

            /// <summary> 控制器灯头数量，1-3</summary>
            public List<int> GroupId { get; set; }

        }

    }

    /// <summary>广州南瑞单灯设置/读取组策略（时间表）</summary>
    public partial class NRSetOrZcTimeTable
    {
        public int NrSluId { get; set; }

        /// <summary>设备逻辑地址</summary>
        public int Op { get; set; }

        /// <summary> 1 设置，2 读取</summary>
        public List<Wlst.iifx.NRSetOrZcTimeTable.GroupConfig> GroupConfigField { get; set; }

        public partial class GroupConfig
        {
            public int GroupId { get; set; }

            /// <summary> 组id,0-255</summary>
            public int CtrlByLl { get; set; }

            /// <summary> 允许经纬度控制</summary>
            public int CtrlByTimer { get; set; }

            /// <summary> 允许时控</summary>
            public List<Wlst.iifx.NRSetOrZcTimeTable.LampSetup> LampSetup { get; set; }

        }

        public partial class LampSetup
        {
            public int LampCtrl { get; set; }

            /// <summary> 0-关灯，1～99 调光 ，100 开灯</summary>
            public int LampTime { get; set; }

        }

    }

    /// <summary>单灯全局分组设置</summary>
    public partial class SluGrpSet
    {
        /// <summary> 区域地址</summary>
        public int AreaId { get; set; }

        /// <summary> 1 请求组信息，2、请求单灯集中器清单 ，3、请求单灯信息（分包请求 ）  ， 11、保存组信息 ，13、保存集中器信息 （支持分包保存）</summary>
        public int Op { get; set; }

        /// <summary> op =  3（请求）、13 （保存）需要填写的数据</summary>
        public List<Wlst.iifx.SluGrpSet.SluInfoItem> ItemsSlu { get; set; }

        /// <summary> op = 1（请求返回）、11（保存） 分组信息</summary>
        public List<Wlst.iifx.SluGrpSet.GrpInfo> ItemsGrp { get; set; }

        /// <summary>请求的清单  2（应答）、3（请求）</summary>
        public List<int> ItemsLst { get; set; }

        public partial class SluInfoItem
        {
            public int SluId { get; set; }

            /// <summary>集中器地址</summary>
            public int SluPhyId { get; set; }

            /// <summary>集中器物理地址</summary>
            public string SluName { get; set; }

            /// <summary> 集中器名称</summary>
            public List<Wlst.iifx.SluGrpSet.SluInfoItem.SluCtrlInfo> CtrlsInfo { get; set; }

            public partial class SluCtrlInfo
            {
                public int CtrlId { get; set; }

                /// <summary>地址</summary>
                public int CtrlPhyid { get; set; }

                /// <summary>地址</summary>
                public string CtrlName { get; set; }

                /// <summary> 名称</summary>
                public int LampCount { get; set; }

                /// <summary> 灯头数量  ，与 lamp_belong_grp 中的数量一致</summary>
                public List<int> LampBelongGrp { get; set; }

            }

        }

        public partial class GrpInfo
        {
            public int GrpGlobalId { get; set; }

            /// <summary>组全局唯一地址  1-  65535*65535</summary>
            public int GrpId { get; set; }

            /// <summary>组地址  1-255</summary>
            public string GrpName { get; set; }

        }

    }

    /// <summary>-----------------------------新增和修改区域亮灯率-----------------------------</summary>
    public partial class AddOrUpdateAreaLightRate
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 返回区域亮灯率</summary>
        public Wlst.iifx.AreaLightRate Info { get; set; }

    }

    /// <summary>区域亮灯率</summary>
    public partial class AreaLightRate
    {
        /// <summary> 时间</summary>
        public long DateCreate { get; set; }

        /// <summary> 日期 年月日即可 返回时填写</summary>
        public string DateCreateStr { get; set; }

        /// <summary> 区域id</summary>
        public int AreaId { get; set; }

        /// <summary> 区域名称 返回时填写</summary>
        public string AreaName { get; set; }

        /// <summary> 亮灯率</summary>
        public double LightRate { get; set; }

    }

    /// <summary> ---------------删除区域亮灯率-----------------------------</summary>
    public partial class DelAreaLightRate
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary> 时间</summary>
        public long DateCreate { get; set; }

    }

    /// <summary> ---------------查询时间段内区域亮灯率-----------------------------</summary>
    public partial class GetAreaLightRate
    {
        /// <summary> 返回时携带</summary>
        public Wlst.iifx.Head Head { get; set; }

        /// <summary>区域地址 空则全部</summary>
        public List<int> AreaIds { get; set; }

        /// <summary> 起始时间</summary>
        public long DateStart { get; set; }

        /// <summary> 结束时间</summary>
        public long DateEnd { get; set; }

        /// <summary> 返回区域亮灯率</summary>
        public List<Wlst.iifx.AreaLightRate> Items { get; set; }

    }

}
