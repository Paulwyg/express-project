<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wlst.Cr.Core</name>
    </assembly>
    <members>
        <member name="T:Wlst.Cr.Core.Behavior.AutoPopulateExportedViewsBehavior">
            <summary>
            prism region需要附加的Behavior信息，主程序识别 为了加速数据显示
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Behavior.AutoPopulateExportedViewsBehavior.DeleteRegisteredViews(Wlst.Cr.Core.CoreInterface.IIViewExport,System.Object)">
            <summary>
            删除界面View
            </summary>
            <param name="metadata"></param>
            <param name="view"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Behavior.AutoPopulateExportedViewsBehavior.RegisteredViewsContainsId(System.String)">
            <summary>
            检测重组后的View中是否包含特定ID的View
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Behavior.AutoPopulateExportedViewsBehavior.AddRegisteredViews">
            <summary>
            添加界面view
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.Behavior.ViewExportAttribute">
            <summary>
            视图导出规格 如果未设置AttachRegion 则默认导出到 DocumentRegionName.DocumentRegion 区域
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Behavior.ViewExportAttribute.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            视图导；导出类型为object
            </summary>
            <param name="id">视图唯一识别地址</param>
            <param name="attachRegion">视图需要显示的区域 默认DocumentRegion</param>
            <param name="attachNow"> 视图是否需要立即显示 默认false</param>
        </member>
        <member name="M:Wlst.Cr.Core.Behavior.ViewExportAttribute.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            视图导；导出类型为object
            </summary>
            <param name="viewType">视图类型 typeof(视图)</param>
            <param name="attachRegion">视图需要显示的区域 默认DocumentRegion</param>
            <param name="attachNow"> 视图是否需要立即显示 默认false</param>
        </member>
        <member name="P:Wlst.Cr.Core.Behavior.ViewExportAttribute.Id">
            <summary>
            View ID  如果提取的时候未int则转换为string即可
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Behavior.ViewExportAttribute.AttachNow">
            <summary>
            是否程序加载时立即显示
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Behavior.ViewExportAttribute.AttachRegion">
            <summary>
            附属Region名称
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Behavior.ViewExportAttribute.fatherId">
            <summary>
            该view如果需要附属到父view上则设置  父view Value
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.CommandCore.CommandRelay`1">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The default return value for the CanExecute method is 'true'.
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CommandCore.CommandRelay`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Wlst.Cr.Core.CommandCore.CommandRelay`1"/> class and the command can always be executed.
            </summary>
            <param name="execute">The execution logic.</param>
        </member>
        <member name="M:Wlst.Cr.Core.CommandCore.CommandRelay`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Wlst.Cr.Core.CommandCore.CommandRelay`1"/> class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="T:Wlst.Cr.Core.CommandCore.CommandRelay">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The default return value for the CanExecute method is 'true'.
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CommandCore.CommandRelay.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Wlst.Cr.Core.CommandCore.CommandRelay`1"/> class and the command can always be executed.
            </summary>
            <param name="execute">The execution logic.</param>
        </member>
        <member name="M:Wlst.Cr.Core.CommandCore.CommandRelay.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Wlst.Cr.Core.CommandCore.CommandRelay`1"/> class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="T:Wlst.Cr.Core.CoreInterface.IINavInitBeforShow">
            <summary>
            界面呈现前对界面进行处理，获取前初始化则必须实现的接口
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreInterface.IINavInitBeforShow.NavInitBeforShow(System.Object[])">
            <summary>
            界面呈现前对界面进行处理，耗时的UI显示请在 NavOnLoad中执行
            </summary>
            <param name="parsObjects"></param>
        </member>
        <member name="T:Wlst.Cr.Core.CoreInterface.IIOnHideOrClose">
            <summary>
            当用户关或隐藏页面的时候
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreInterface.IIOnHideOrClose.OnUserHideOrClosing">
            <summary>
            当用户关或隐藏页面的时候
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.CoreInterface.IIViewExport">
            <summary>
            任何视图部件需要导出则必须实现的接口
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IIViewExport.Id">
            <summary>
            部件ID
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IIViewExport.AttachNow">
            <summary>
            视图是否在模块加载时立即显示到指定的附属Region上
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IIViewExport.AttachRegion">
            <summary>
            视图需要附属到的Region名称
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IIViewExport.fatherId">
            <summary>
            该view如果需要附属到父view上则设置  父view Value
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.CoreInterface.IINavOnLoad">
            <summary>
            任何界面需要执行导航前初始化，获取前初始化则必须实现的接口
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreInterface.IINavOnLoad.NavOnLoad(System.Object[])">
            <summary>
            当导航到某页面的时候如果该页面实现了本接口则会在导航到本页面的时候立即执行本函数
            </summary>
            <param name="parsObjects"></param>
        </member>
        <member name="T:Wlst.Cr.Core.CoreInterface.IITab">
            <summary>
            如果使用继承自ContentControl的控件来生成界面，但需要显示一些信息，如页面标题，页面在容器中是否可以关闭 是否可以悬浮等等信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IITab.Title">
            <summary>
            a title for this form
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IITab.CanClose">
            <summary>
            <c>True</c> if this instance can CanClose; otherwise, <c>False</c>.
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IITab.CanUserPin">
            <summary>
            <c>True</c> if this instance can pin; otherwise, <c>False</c>.
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IITab.CanFloat">
            <summary>
            <c>True</c> if this pane can float; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IITab.CanDockInDocumentHost">
            <summary>
            <c>True</c> if this instance can dock in the document host; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreInterface.IITab.Index">
            <summary>
            需要设置的显示位置 针对终端树有效
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.CoreServices.AsynObservableCollectionAdd">
            <summary>
            异步添加数据
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.AsynObservableCollectionAdd.Insert``1(System.Collections.ObjectModel.ObservableCollection{``0},``0,System.Int32)">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item"></param>
            <param name="index"> 为0或不写入则为add</param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManageExtend.win_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            viewid *10 + 1 left,+2 right
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManageExtend.win_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            viewid*10+3 : height  viewid*10+4 : winth 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManageExtend.ShowViewByIdAttachRegion(System.Int32,System.Boolean)">
            <summary>
            Show View By ViewId and ViewAttachRegion
            </summary>
            <param name="show">是显示页面 或 关闭页面</param>
            <param name="viewId">页面Id值 </param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManageExtend.DoTaskB(System.Object[])">
            <summary>
            
            </summary>
            <param name="argu"></param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManageExtend.ShowViewByIdAttachRegionWithArgu(System.Int32,System.Object[])">
            <summary>
            Show View By ViewId and ViewAttachRegion
            </summary>
            <param name="argu">参数</param>
            <param name="viewId">页面Id值 </param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManageExtend.ShowViewByIdAttachRegionWithArgu(System.Type,System.Object[])">
            <summary>
            Show View By ViewId and ViewAttachRegion
            </summary>
            <param name="argu">参数</param>
            <param name="viewType">页面类型 </param>
        </member>
        <member name="T:Wlst.Cr.Core.CoreServices.SystemOption">
            <summary>
            提供数字形式的 保存模式
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.SystemOption.GetOption(System.Int32)">
            <summary>
            获取选项
            </summary>
            <param name="opid"></param>
            <returns>不存在 返回 -1</returns>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.XmlOptionSvr.UpdateDesc">
            <summary>
            系统可供设置的选项
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.XmlOptionSvr.SaveXmlDesc(System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            一个模块 仅允许保存一个选项文件 
            </summary>
            <param name="infodesc">描述信息 </param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.XmlOptionSvr.GetOptionInt(System.Int32)">
            <summary>
            获取指定模块的指定序列的  设置选项  无设置则返回 -1
            </summary>
            <param name="key"></param>
            <returns>设置了则返回 设置值  否则返回 -1</returns>
        </member>
        <member name="T:Wlst.Cr.Core.CoreServices.ObservableObject">
            <summary>
            实现INotifyPropertyChanged接口的底层类，可继承直接使用OnPropertyChanged等函数
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreServices.ObservableObject.Error">
            <summary>
            IDataErrorInfo成员
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreServices.ObservableObject.Item(System.String)">
            <summary>
            获取错误属性
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.ObservableObject.VerifyPropertyName(System.String)">
            <summary>
            Warns the developer if this Object does not have a public property with
            the specified name. This method does not exist in a Release build.
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.CoreServices.RegionManage">
            <summary>
            管理Prism的所有Region区域的管理 ，页面的获取与导航
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.DispatcherInvoke(System.Action{System.Object},System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.CoreServices.RegionManage.IsNewViewInDocumentRegionPopup">
            <summary>
            主显示区域的界面是否 在新窗口中显示
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.CoreServices.RegionManage.IsNewViewInDocumentRegionPopupUseDefaultWin">
            <summary>
            弹出窗口使用默认的系统窗口
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreServices.RegionManage.RegionManagerInstances">
            <summary>
            获取IRegionManager实例
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.CoreServices.RegionManage.IsSystemMainViewActive">
            <summary>
            主界面是否已经激活  指主界面是否已经按照设计者要求已经显示 login界面手动赋值
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.DoTaskA(System.Tuple{System.String,System.Boolean})">
            <summary>
            
            </summary>
            <param name="tuple"></param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.ShowViewByIdAttachRegion(System.Int32,System.Boolean)">
            <summary>
            Show View By ViewId and ViewAttachRegion
            </summary>
            <param name="show">是显示页面 或 关闭页面</param>
            <param name="viewId">页面Id值 </param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.DoTaskB(System.Object[])">
            <summary>
            
            </summary>
            <param name="argu"></param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.ShowViewByIdAttachRegionWithArgu(System.Int32,System.Object[])">
            <summary>
            Show View By ViewId and ViewAttachRegion
            </summary>
            <param name="argu">参数</param>
            <param name="viewId">页面Id值 </param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.ShowViewByIdAttachRegionWithArgu(System.Type,System.Object[])">
            <summary>
            Show View By ViewId and ViewAttachRegion
            </summary>
            <param name="argu">参数</param>
            <param name="viewType">页面类型 </param>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.GetViewById(System.Int32,System.Object[])">
            <summary>
            通过页面Id获取页面实例; 页面必须继承自 ContentControl ；如果页面需要执行初始化则必须实现IINavOnLoad 接口 NavOnLoad方法实现参数初始化 ；
            </summary>
            <param name="viewId"></param>
            <param name="args"></param>
            <returns>无法查阅则返回 null</returns>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.GetViewByIdDisConnectFather(System.Int32,System.Object[])">
            <summary>
            通过页面Id获取页面实例; 页面必须继承自 ContentControl ；如果页面需要执行初始化则必须实现IINavOnLoad 接口 NavOnLoad方法实现参数初始化 ；
            </summary>
            <param name="viewId"></param>
            <param name="args"></param>
            <returns>无法查阅则返回 null</returns>
        </member>
        <member name="M:Wlst.Cr.Core.CoreServices.RegionManage.RegionWetherHasThisIdView(System.Int32,System.String)">
            <summary>
            指定Id页面是否已经显示于指定的区域
            </summary>
            <param name="viewId"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="T:Wlst.Cr.Core.CoreServices.DocumentRegionName">
            <summary>
            One Region declair in  Core Module  as  some view should use this region
            程序预定义的一个区域 可以不使用本区域
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.CoreServices.DocumentRegionName.DocumentRegion">
            <summary>
            DocumentRegion
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged">
            <summary>
             继承此类来实现事件数据处理；需要完成加入监听的事件地址与类型，并重写ExPublishedEvent函数
            如果监听的事件过滤复杂可使用：
            EventPublisher.AddEventSubScriptionTokener(Assembly.GetExecutingAssembly().GetName().ToString(), FundEventHandler,FundOrderFilter);
            来处理
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.#ctor">
            <summary>
            继承此类来实现事件数据处理；需要完成加入监听的事件地址与类型，并重写ExPublishedEvent函数
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.InitEventPri">
            <summary>
            执行数据初始化并注册事件
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.UnsubscribeEvent">
            <summary>
            取消 注册事件处理函数
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.EventFilterTipeAndId">
            <summary>
            事件监听的类型与地址
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.AddEventFilterInfo(System.Int32,System.String,System.Boolean)">
            <summary>
            为过滤事件提供添加过滤属性
            </summary>
            <param name="eventId"></param>
            <param name="eventType">默认DocumentRegion</param>
            <param name="runInUi">是否在主UI线程运行 </param>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.FundOrderFilter(Wlst.Cr.Coreb.EventHelper.PublishEventArgs)">
            <summary>
            事件过滤
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.FundOrderFilterForExtendCheck(Wlst.Cr.Coreb.EventHelper.PublishEventArgs)">
            <summary>
            若存在特殊的需要添加判断的  若返回false  所有检查都将不通过  否则继续监测
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.EventHandlerHelper.EventHandlerHelperExtendNotifyProperyChanged.ExPublishedEvent(Wlst.Cr.Coreb.EventHelper.PublishEventArgs)">
            <summary>
            如果使用本类作为继承，需要处理事件函数，则需要实现本类并处理注册了的事件
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Wlst.Cr.Core.EventHandlerHelper.PublishEventType">
            <summary>
            事件发布 Core预定义的几个字段 使用者可自定义字段
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.EventHandlerHelper.PublishEventType.None">
            <summary>
            Core.CoreServices.PublishEventArgs.None
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.EventHandlerHelper.PublishEventType.Core">
            <summary>
            程序内部发布事件 Core.CoreServices.PublishEventArgs.Core
            参数未知 
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.EventHandlerHelper.PublishEventType.Sevr">
            <summary>
            程序内部发布时间  Core.CoreServices.PublishEventArgs.Sevr
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.EventHandlerHelper.PublishEventType.ReCn">
            <summary>
            系统断线后重新连接到服务器后，发布成功连接事件；可能连接断开已经很久了，系统保留的缓存数据需要重新请求;
            事件发布Id默认 100  Core.CoreServices.PublishEventArgs.ReCn
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.EventHandlerHelper.PublishEventType.SvAv">
            <summary>
            系统主界面激活 事件发布Id默认 101  Core.CoreServices.SystemMainViewActive
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.ComponentHold.ViewComponentHolding">
            <summary>
            View基础部件持有 
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.Count">
            <summary>
            获取部件数量
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.ContainsComponent(System.String)">
            <summary>
            获取是否已经包含该部件
            </summary>
            <param name="id">View ID</param>
            <returns></returns>
        </member>
        <member name="P:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.GetAllViewsID">
            <summary>
            获取所有菜单部件ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.GetViewById(System.String)">
            <summary>
            获取指定id值的部件
            </summary>
            <param name="id"></param>
            <returns>存在则返回部件 不存在则返回null</returns>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.GetViewAttachRegionById(System.String)">
            <summary>
            获取视图 应该显示的区域 无法获取则显示到默认区域 DocumentRegion
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.GetChildViewsByFatherId(System.Int32)">
            <summary>
            获取某一父节点view下的所有子view
            </summary>
            <param name="fatherId">父view  Value</param>
            <returns>子view集合  无则 null</returns>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.GetViewMetadataById(System.String)">
            <summary>
            获取View  Metadata
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.Clean">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.AddViewItem(Wlst.Cr.Core.CoreInterface.IIViewExport,System.Object,System.Boolean)">
            <summary>
            有则更新无则增加
            </summary>
            <param name="value">View</param>
            <param name="publishEvent">是否需要发布事件</param>
            <param name="metadata">View metadata</param>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.UpdateViewItem(System.String,System.Object,System.Boolean)">
            <summary>
            更新菜单基础部件 有则更新无则增加
            </summary>
            <param name="value">View </param>
            <param name="publishEvent">是否需要发布事件</param>
            <param name="id"> View ID</param>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.UpdateViewMetadataItem(Wlst.Cr.Core.CoreInterface.IIViewExport)">
            <summary>
            更新菜单基础部件 有则更新无则增加
            </summary>
            <param name="metadata"> View metadata</param>
        </member>
        <member name="M:Wlst.Cr.Core.ComponentHold.ViewComponentHolding.DeleteViewItem(System.String,System.Boolean)">
            <summary>
            删除部件
            </summary>
            <param name="Id">需要删除的View ID</param>
            <param name="publishEvent">是否需要发布删除事件</param>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.AssemblyConfig">
            <summary>
            Company=Cetc50;ModuleName=CoreModuleConfig;ModuleId=7;AutoLoad=2;DependsOnModuleNames=a,b,c,d
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.AssemblyConfig.CompanyUpper">
            <summary>
            公司名字大写
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.AssemblyConfig.ModuleName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.AssemblyConfig.ModuleId">
            <summary>
            模块Id
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.AssemblyConfig.AutoLoad">
            <summary>
            启动设置
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.AssemblyConfig.DependsOnModuleNames">
            <summary>
            依赖模块集
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.AssemblyConfig.IsCetc">
            <summary>
            是否为Cetc
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.AssemblyConfig.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="config">Company=Cetc50;ModuleName=CoreModuleConfig;ModuleId=7;AutoLoad=2;DependsOnModuleNames=a,b,c,d</param>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.ModuleLoadSqu">
            <summary>
            模块加载顺序
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.ModuleLoadSqu.AutoLoad">
            <summary>
            在程序运行的时候立即加载 1
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.Modularity.ModuleLoadSqu.LoadByUserSet">
            <summary>
            根据用户设置 在启动后再动态加载 3
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.assembly">
            <summary>
            获取程序集
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.VersionInfo">
            <summary>         
             版本信息        
              </summary>         
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.CompanyInfo">
            <summary>
            公司信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.ProductInfo">
            <summary>
            产品信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.TitleInfo">
            <summary>
            标题信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.NameInfo">
            <summary>
            标题信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.CopyrightInfo">
            <summary>
            版权信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.AssemblyInfo.DescriptionInfo">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.IIModuleItemInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.IIModuleItemInfo.AssemblyInfo">
            <summary>
            通过路径获取到的模块程序集
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.IIModuleItemInfo.Catalog">
            <summary>
            通过路径获取到的程序集处理后的catalog
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.IIModuleItemInfo.AssemblyConfigInfo">
            <summary>
            模块的配置信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.IIModuleItemInfo.IsLoaded">
            <summary>
            模块是否已经加载
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.IIModuleItemInfo.IsAutoLoadAfterLogin">
            <summary>
            是否需要在程序登陆成功时立即加载
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.FirstLoad(System.Boolean)">
            <summary>
            获取自动加载列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.LoadModuleItem(System.Int32)">
            <summary>
            提供外部加载模块
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.LoadModuleItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            提供外部加载模块
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.ModuleItems">
            <summary>
            提供外部读取模块信息
            </summary>
        </member>
        <member name="E:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.CollectionChanged">
            <summary>
            提供外部通知模块内项数发生变法
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.SetModuleItemAutoLoad(System.Int32,System.Boolean)">
            <summary>
            设置模块的自加载设置
            </summary>
        </member>
        <member name="E:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.OnModuleLoadedStateChanged">
            <summary>
            当模块加载状态发生变法
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.GetModuleInfoByName(System.String)">
            <summary>
            通过名称获取模块
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.AddModuelItem(System.Reflection.Assembly)">
            <summary>
            动态增加程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.AddModuelItem(System.String)">
            <summary>
            动态增加程序集
            </summary>
            <param name="assemblyPath"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.RemoveItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            删除指定项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.RemoveItem(System.Int32)">
            <summary>
            删除指定项
            </summary>
            <param name="moduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.SaveConfig">
            <summary>
            保存配置信息
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.UnLoadModuleItem(System.Int32)">
            <summary>
            提供外部卸载模块
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.IIModuleItemsCatalog.UnLoadModuleItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            提供外部卸载模块
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.ModuleItemsCatalog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.LoadModuleItem(System.Int32)">
            <summary>
            提供外部加载模块
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.LoadModuleItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            提供外部加载模块
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.UnLoadModuleItem(System.Int32)">
            <summary>
            提供外部卸载模块
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.UnLoadModuleItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            提供外部卸载模块
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.FirstLoad(System.Boolean)">
            <summary>
            第一次加载 模块入口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetLoadModuleSqu(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            获取加载模块的顺序 单个模块加载顺序入口
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.CanLoadAssemblyThatAutoLogin">
            <summary>
            是否模块可正常加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetLostModulesAutoLogin">
            <summary>
            获取启动缺少的模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetCrossModulesAutoLogin">
            <summary>
            获取交叉引用模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.IsAllModuleExistAutoLogin">
            <summary>
            是否所有模块均存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetLoadSquAutoLogin">
            <summary>
            获取启动顺序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.CanLoadAssemblyThatforThisModue(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            是否可以正常加载本模块 CanLoadAssemblyThatforThisModue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.IsAllModuleExistThatforThisModue(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            本模块加载的所有依赖项是否都存在 IsAllModuleExistThatforThisModue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetLostModulesThatforThisModue(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            获取本模块依赖模块缺少的模块 GetLostModulesThatforThisModue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetCrossModuleThatforThisModue(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            获取交叉引用模块 GetCrossModuleThatforThisModue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetLoadSquThatforThisModue(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            获取本模块的正常加载顺序 GetLoadSquThatforThisModue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.InnerItemLoad">
            <summary>
            程序自动装载模块 Modules
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.SaveConfig">
            <summary>
            保存配置信息到数据库
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleItems">
            <summary>
            提供外部读取模块信息
            </summary>
        </member>
        <member name="E:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.CollectionChanged">
            <summary>
            提供外部通知模块内项数发生变法
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.SetModuleItemAutoLoad(System.Int32,System.Boolean)">
            <summary>
            设置模块的自加载设置
            </summary>
        </member>
        <member name="E:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.OnModuleLoadedStateChanged">
            <summary>
            当模块加载状态发生变法
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.SetModuleItemLoadedStateChange(System.Int32,System.Boolean)">
            <summary>
            设置模块的加载状态
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.SetModuleItemLoadedStateChange(System.String,System.Boolean)">
            <summary>
            设置模块的加载状态
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.GetModuleInfoByName(System.String)">
            <summary>
            通过名称获取模块
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.AddModuelItem(System.Reflection.Assembly)">
            <summary>
            动态增加程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.AddModuelItem(System.String)">
            <summary>
            动态增加程序集
            </summary>
            <param name="assemblyPath"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.AddItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            添加模块到
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.RemoveItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            删除指定项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.RemoveItem(System.Int32)">
            <summary>
            删除指定项
            </summary>
            <param name="moduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.AsyItemsDatafromCatalog">
            <summary>
            同步Catalog的加载信息到Item中
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogHelp">
            <summary>
            实现模块的动态装载功能，系统从boot里面到处add delete模块的函数后通过用户添加程序集来进行动态装载
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogHelp.Modules">
            <summary>
            获取所有系统已经加载的模块 
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogHelp.IsModuleCatalogContainModuleInfo(System.String)">
            <summary>
            运行的模块程序集中是否包含指定的模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogHelp.GetAllLoadModuleNames">
            <summary>
            获取已经预加载了的所有模块名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogHelp.IsModuleCatalogAlreadyLoadModuleInfo(System.String)">
            <summary>
            运行的模块程序集中是是否已经加载模块
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver">
            <summary>
            解析器
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.GetDependsMap(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            获取需要家长的模块的模块、依赖项信息
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要计算依赖项的模块</param>
            <returns>所有模块信息</returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.GetCheckModuleDepends(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{System.String})">
            <summary>
            计算模块的依赖项，如果该依赖性不存在依然写入字典 
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要检查依赖性的模块</param>
            <returns>需要检查依赖项的模块的所有依赖性</returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.GetCheckModuleDepends(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            计算模块的依赖项，如果该依赖性不存在依然写入字典 
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要检查依赖性的模块</param>
            <returns>需要检查依赖项的模块的所有依赖性</returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.IsAllDependsModuleExist(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            是否需要计算的模块的所有依赖项均存在于模块中
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要检查是否所有依赖项都存在的的模块</param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.GetThisModuleNotExistIn(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            检查模块的依赖性不存在于给定模块中并将依赖性返回
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要检查依赖项的模块</param>
            <returns>模块正常加载需要的一些系统中不存在的模块列表 如果有的话，无则返回空的list</returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.GetThisModuleCrossRef(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            或许交叉引用模块
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要运行的模块</param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.CanDependsModulesNormalLoad(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            检查模块是否可以正常运行 包括递归检测
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要运行的模块</param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleDependencySolver.GetThisModulesNormalLoadSqu(Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleCatalogItemCollection,System.Collections.Generic.List{Wlst.Cr.Core.Modularity.ModuleItemInfo})">
            <summary>
            获取模块加载顺序
            </summary>
            <param name="items">所有模块</param>
            <param name="needChecks">需要运行的模块</param>
            <returns></returns>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage">
            <summary>
            模块加载控制
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.AddModule">
            <summary>
            获取bootstrapper中模块添加函数；可实现模块的添加
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.RemoveModule">
            <summary>
            获取bootstrapper中模块删除函数；
            </summary>
        </member>
        <member name="E:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.OnLoadModuleCompleted">
            <summary>
            当模块加载成功后发布事件
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.IsModuleCatalogContainModuleInfo(System.String)">
            <summary>
            运行的模块程序集中是否包含指定的模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.IsModuleCatalogAlreadyLoadModuleInfo(System.String)">
            <summary>
            运行的模块程序集中是是否已经加载模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.LoadModuleItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            动态加载模块
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.AddModuleToCatalog(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            将模块预加载到模块Catalog中
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.GetCatalogLoadModuleNames">
            <summary>
            获取Catalog中的信息
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.UnLoadModuleItem(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            卸载模块
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemsCatalog.ModuleControlManage.GetModulesRunDependsOnThisModule(Wlst.Cr.Core.Modularity.ModuleItemInfo)">
            <summary>
            查询是否有正在运行的模块 依赖于本模块
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Wlst.Cr.Core.Modularity.ModuleItemInfo">
            <summary>
            模块信息
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.Modularity.ModuleItemInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            模块信息
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemInfo.Catalog">
            <summary>
            通过路径获取到的程序集处理后的catalog
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemInfo.Aassembly">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemInfo.AssemblyInfo">
            <summary>
            通过路径获取到的模块程序集
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemInfo.AssemblyConfigInfo">
            <summary>
            模块的配置信息
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemInfo.IsLoaded">
            <summary>
            模块是否已经加载
            </summary>
        </member>
        <member name="P:Wlst.Cr.Core.Modularity.ModuleItemInfo.IsAutoLoadAfterLogin">
            <summary>
            是否需要在程序登陆成功时立即加载
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.ModuleServices.DelayEvent">
            <summary>
            延迟事件  待系统启动完毕后需要立即处理的事件   或待系统系统完毕后 一段时间需要处理的事件
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.ModuleServices.DelayEvent.RegisterDelayEvent(System.Action,System.Int32,Wlst.Cr.Core.ModuleServices.DelayEventHappen)">
            <summary>
            
            </summary>
            <param name="ac">延迟任务 程序启动后的1200秒 所有任务将结束</param>
            <param name="delaySeconds">延迟时间 如果为0 则为加载完成后立即执行</param>
            <param name="delayEvent">需要等待事件的发生 默认为等待主界面呈现</param>
        </member>
        <member name="M:Wlst.Cr.Core.ModuleServices.DelayEvent.RaiseEventHappen(Wlst.Cr.Core.ModuleServices.DelayEventHappen)">
            <summary>
            宣布事件发生 等待该事件发生的任务则按照给定的等待时间就要执行
            </summary>
            <param name="delayEvent"></param>
        </member>
        <member name="M:Wlst.Cr.Core.ModuleServices.DelayEvent.ExAction">
            <summary>
            执行函数  外部不得调用
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.ModuleServices.DelayEventHappen">
            <summary>
            预定义可能发生的事件
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.NoneEvent">
            <summary>
            不等待任何事件 直接执行
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.EventOne">
            <summary>
            等待事件1的发送 然后执行
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.EventTwo">
            <summary>
            等待事件2的发送 然后执行
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.EventThree">
            <summary>
            等待事件3的发送 然后执行
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.EventFour">
            <summary>
            等待事件4的发送 然后执行
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.EventFive">
            <summary>
            等待事件5的发送 然后执行
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.DelayEventHappen.EventSvAc">
            <summary>
            系统激活  
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.ModuleServices.ModuleAssemblyEvent">
            <summary>
            模块加载卸载发布事件
            本模块的全局事件发布起始Id，3100000 + 1*100, 每个模块均发放100个Id值。
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.ModuleAssemblyEvent.EventIdAssignBaseId">
            <summary>
            本模块的全局事件发布起始Id，3100000 + 1*100, 每个模块均发放100个Id值。
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.ModuleAssemblyEvent.ModuleLoadedEvent">
            <summary>
            加载模块事件 PublishEventType.Core 发布参数为 第一个： AssemblyConfig 第二个：加载成功与否 bool
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.ModuleAssemblyEvent.ModuleUnLoadedEvent">
            <summary>
            卸载模块事件 PublishEventType.Core 发布参数为 第一个： AssemblyConfig 第二个：卸载成功与否 bool
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.ModuleAssemblyEvent.ModulePreLoadEvent">
            <summary>
            加载模块事件 PublishEventType.Core 发布参数为 AssemblyConfig 
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.ModuleAssemblyEvent.ModulePreUnLoadEvent">
            <summary>
            卸载模块事件 PublishEventType.Core 发布参数为 AssemblyConfig 
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.ModuleServices.ModuleManage">
            <summary>
            模块加载控制入口 核心
            </summary>
        </member>
        <member name="F:Wlst.Cr.Core.ModuleServices.ModuleManage.ModuleMangeInatance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecuteNonQueryInThread(System.String)">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecuteTransactionInThread(System.String[])">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecuteNonQuery(System.String)">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecuteQuery(System.String,System.Object[])">
            <summary>
            执行查询，返回DataSet
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，返回查询结果集中的第一行第一列（主要用于返回统计值）
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.IISQLite.ExecutePage(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="tableName">表明</param>
            <param name="strColumns">列名</param>
            <param name="strWhere">条件</param>
            <param name="strOrder">排序</param>
            <param name="pageSize">每页数量</param>
            <param name="currentIndex">当前页</param>
            <param name="recordOut">总数</param>
            <returns>表</returns>
        </member>
        <member name="T:Wlst.Cr.Core.SqlLite.SqLite">
             <summary>
            SQLite数据库操作类
             </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecuteNonQueryInThread(System.String)">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecuteTransactionInThread(System.String[])">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecuteNonQuery(System.String)">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecuteQuery(System.String,System.Object[])">
            <summary>
            执行查询，返回DataSet
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，返回查询结果集中的第一行第一列（主要用于返回统计值）
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SqLite.ExecutePage(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="tableName">表明</param>
            <param name="strColumns">列名</param>
            <param name="strWhere">条件</param>
            <param name="strOrder">排序</param>
            <param name="pageSize">每页数量</param>
            <param name="currentIndex">当前页</param>
            <param name="recordOut">总数</param>
            <returns>表</returns>
        </member>
        <member name="T:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper">
             <summary>
            SQLite数据库操作类
            确保添加System.Data.SQLite引用 并且版本支持4.0
             </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteNonQueryInThread(System.String)">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteTransactionInThread(System.String[])">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.PrepareCommand(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            准备Command
            </summary>
            <param name="cmd">command</param>
            <param name="cmdText">命令参数</param>
            <param name="p">参数数组</param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.PrepareCommand(System.Data.SQLite.SQLiteCommand,System.String)">
            <summary>
            准备Command
            </summary>
            <param name="cmd">command</param>
            <param name="cmdText">命令参数</param>
            <param name="p">参数数组</param>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteQuery(System.String,System.Object[])">
            <summary>
            执行查询，返回DataSet
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            执行查询，返回DataReader
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，返回查询结果集中的第一行第一列（主要用于返回统计值）
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.SqlLite.SQLiteInstanceHelper.ExecutePage(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="tableName">表明</param>
            <param name="strColumns">列名</param>
            <param name="strWhere">条件</param>
            <param name="strOrder">排序</param>
            <param name="pageSize">每页数量</param>
            <param name="currentIndex">当前页</param>
            <param name="recordOut">总数</param>
            <returns>表</returns>
        </member>
        <member name="F:Wlst.Cr.Core.UtilityFunction.OptionXmlSvr.Data">
            <summary>
            moduleid     27  1 23
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.OptionXmlSvr.SaveXml(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            一个模块 仅允许保存一个选项文件 
            </summary>
            <param name="moduleid"></param>
            <param name="infoset">设置信息</param>
            <param name="infodesc">描述信息 </param>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.OptionXmlSvr.GetOption(System.Int32,System.Int32)">
            <summary>
            获取指定模块的指定序列的  设置选项
            </summary>
            <param name="moduleid"></param>
            <param name="indexkey"></param>
            <returns></returns>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.OptionXmlSvr.GetOptionBool(System.Int32,System.Int32)">
            <summary>
            获取指定模块的指定序列的  设置选项  无设置则返回null
            </summary>
            <param name="moduleid"></param>
            <param name="indexkey"></param>
            <returns>设置了则返回 true or false  否则返回 null</returns>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.OptionXmlSvr.GetOptionInt(System.Int32,System.Int32)">
            <summary>
            获取指定模块的指定序列的  设置选项  无设置则返回 -1
            </summary>
            <param name="moduleid"></param>
            <param name="indexkey"></param>
            <returns>设置了则返回 设置值  否则返回 -1</returns>
        </member>
        <member name="T:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper">
             <summary>
            SQLite数据库操作类
            确保添加System.Data.SQLite引用 并且版本支持4.0
             </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecuteNonQueryInThread(System.String)">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecuteTransactionInThread(System.String[])">
            <summary>
            在后台线程执行耗时的数据写入任务
            </summary>
            <param name="cmdText"></param>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行命令，执行更新和删除时返回影响的行的数目
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecuteQuery(System.String,System.Object[])">
            <summary>
            执行查询，返回DataSet
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，返回查询结果集中的第一行第一列（主要用于返回统计值）
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.SqlLiteHelper.ExecutePage(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="tableName">表明</param>
            <param name="strColumns">列名</param>
            <param name="strWhere">条件</param>
            <param name="strOrder">排序</param>
            <param name="pageSize">每页数量</param>
            <param name="currentIndex">当前页</param>
            <param name="recordOut">总数</param>
            <returns>表</returns>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.UiHelper.UiDoOtherUserEvent">
            <summary>
            暂时 释放UI界面控制权
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.UtilityFunction.WriteLog">
            <summary>
            日志写入 
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.WriteLog.WriteLogInfo(System.String)">
            <summary>
            记录程序运行的一般信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.WriteLog.WriteLogError(System.String)">
            <summary>
            记录程序的出错信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Wlst.Cr.Core.UtilityFunction.WriteLog.WriteLogDebug(System.String)">
            <summary>
            记录程序的调试信息 如Exception信息等
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Wlst.Cr.Core.Config.ConfigFilePath">
            <summary>
            配置文件放置位置 
            Config\log4net.xml
            Config\mydatabase.sqlite
            </summary>
        </member>
        <member name="T:Wlst.Cr.Core.WindowsShowHelper.ControlWinBase">
            <summary>
            控制窗口显示的 基类函数
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.WindowsShowHelper.ControlWinBase.OnUserClosingIng">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlst.Cr.Core.WindowsShowHelper.ControlWinBase.ShowView(System.Collections.Generic.List{System.Int32})">
            <summary>
            显示界面调用的 显示函数  参数最终传递到  IINavOnWindow 接口中 如果不需要传递参数 则空即可
            </summary>
            <param name="para"></param>
        </member>
        <member name="M:Wlst.Cr.Core.WindowsShowHelper.ControlWinBase.GetInstansView">
            <summary>
            必须实现的  获取窗口的函数
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
