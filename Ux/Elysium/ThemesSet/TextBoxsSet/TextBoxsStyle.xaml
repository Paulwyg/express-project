<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing" xmlns:shell="http://schemas.microsoft.com/winfx/2006/xaml/presentation/shell" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:params="clr-namespace:Elysium.Parameters" xmlns:primitives="clr-namespace:Elysium.Controls.Primitives" xmlns:controls="clr-namespace:Elysium.Controls" xmlns:converters="clr-namespace:Elysium.Converters"
                   

                    xmlns:Common="clr-namespace:Elysium.ThemesSet.Common"
                    xmlns:TextBoxsSet="clr-namespace:Elysium.ThemesSet.TextBoxsSet"
                    xmlns:FontSet="clr-namespace:Elysium.ThemesSet.FontSet"
                    xmlns:TextBoxOverride="clr-namespace:Elysium.ControlsOverride.TextBoxOverride">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/Elysium;component/Themes/Brushes.xaml" />
    <ResourceDictionary Source="/Elysium;component/Themes/LightBrushes.xaml" />
        <ResourceDictionary Source="/Elysium;component/ThemesSet/ButtonSet/ButtonStyle.xaml" />
        <!--<ResourceDictionary Source="/Elysium;component/Themes/Scrolls/MacScrollViewer.xaml" />
        <ResourceDictionary Source="/Elysium;component/Themes/Scrolls/MacScrollBar.xaml" />
        <ResourceDictionary Source="/Elysium;component/Themes/ListView/MacListView.xaml" />
        <ResourceDictionary Source="/Elysium;component/Themes/Menus/MacMenu.xaml" />
        <ResourceDictionary Source="/Elysium;component/Themes/DateTimePicker/MacDatePicker.xaml" />
        <ResourceDictionary Source="/Elysium;component/Themes/DateTimePicker/MacTimePicker.xaml" />-->
    </ResourceDictionary.MergedDictionaries>
  <converters:DoubleToGridLengthConverter x:Key="DoubleToGridLengthConverter" />
  <converters:DoubleToThicknessConverter x:Key="DoubleToThicknessConverter" />
  <converters:GridLengthToDoubleConverter x:Key="GridLengthToDoubleConverter" />
  <converters:ThicknessToDoubleConverter x:Key="ThicknessToDoubleConverter" />
  <converters:PercentToAngleConverter x:Key="PercentToAngleConverter" />
  <converters:AngleToCoordinateConverter x:Key="AngleToCoordinateConverter" />
  <converters:NumberPositiveToNegativeConverter x:Key="NumberPositiveToNegativeConverter" />
  <converters:ThicknessPositiveToNegativeConverter x:Key="ThicknessPositiveToNegativeConverter" />
  <converters:ThicknessConverter x:Key="ThicknessConverter" />
    <converters:TabItemNameConverter x:Key="myTabItemNameConverter" />
  <converters:IsGreaterThanConverter x:Key="IsGreaterThanConverter" />


    <ControlTemplate x:Key="ErrorTemplate">
        <DockPanel LastChildFill="true">
            <Border Background="Red" DockPanel.Dock="right" VerticalAlignment="Top"  Margin="1,0,0,0" >
                <TextBlock Text="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" VerticalAlignment="Top" HorizontalAlignment="Left"  Foreground="white">
                </TextBlock>
            </Border>
            <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Top" >
                <Border BorderBrush="red" BorderThickness="1" />
            </AdornedElementPlaceholder>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="FocusVisualStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="{TemplateBinding params:General.DefaultPadding}" Stroke="{StaticResource ForegroundBrush}" StrokeThickness="{TemplateBinding params:General.DefaultThicknessValue}" StrokeDashArray="2 1" RenderOptions.EdgeMode="Aliased" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <GeometryGroup x:Key="AdvancedIcon">
    <EllipseGeometry Center="3,3" RadiusX="2.5" RadiusY="2.5" />
    <EllipseGeometry Center="12,3" RadiusX="2.5" RadiusY="2.5" />
    <EllipseGeometry Center="21,3" RadiusX="2.5" RadiusY="2.5" />
  </GeometryGroup>
  <GeometryGroup x:Key="MinimizeIcon" FillRule="EvenOdd">
    <RectangleGeometry Rect="0,0,10,10" />
    <RectangleGeometry Rect="0,0,10,7" />
  </GeometryGroup>
  <GeometryGroup x:Key="MaximizeIcon">
    <LineGeometry StartPoint="0,0.5" EndPoint="10,0.5" />
    <LineGeometry StartPoint="0,1.5" EndPoint="10,1.5" />
    <LineGeometry StartPoint="0,2.5" EndPoint="10,2.5" />
    <LineGeometry StartPoint="0.5,3" EndPoint="0.5,10" />
    <LineGeometry StartPoint="9.5,3" EndPoint="9.5,10" />
    <LineGeometry StartPoint="1,9.5" EndPoint="9,9.5" />
  </GeometryGroup>
  <GeometryGroup x:Key="RestoreIcon">
    <LineGeometry StartPoint="3,0.5" EndPoint="10,0.5" />
    <LineGeometry StartPoint="3,1.5" EndPoint="10,1.5" />
    <LineGeometry StartPoint="3.5,2" EndPoint="3.5,3" />
    <LineGeometry StartPoint="9.5,2" EndPoint="9.5,7" />
    <LineGeometry StartPoint="7,6.5" EndPoint="10,6.5" />
    <LineGeometry StartPoint="0,3.5" EndPoint="7,3.5" />
    <LineGeometry StartPoint="0,4.5" EndPoint="7,4.5" />
    <LineGeometry StartPoint="0.5,5" EndPoint="0.5,10" />
    <LineGeometry StartPoint="6.5,5" EndPoint="6.5,10" />
    <LineGeometry StartPoint="1,9.5" EndPoint="6,9.5" />
  </GeometryGroup>
  <GeometryGroup x:Key="CloseIcon">
    <LineGeometry StartPoint="1.5,0.5" EndPoint="9.5,8.5" />
    <LineGeometry StartPoint="0.5,1.5" EndPoint="8.5,9.5" />
    <LineGeometry StartPoint="1.5,1.5" EndPoint="8.5,8.5" />
    <LineGeometry StartPoint="8.5,0.5" EndPoint="0.5,8.5" />
    <LineGeometry StartPoint="9.5,1.5" EndPoint="1.5,9.5" />
    <LineGeometry StartPoint="8.5,1.5" EndPoint="1.5,8.5" />
  </GeometryGroup>

    
  <Style x:Key="TextBoxesBaseStyle" TargetType="{x:Type Control}">
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.NormalBackgrounBrush), Mode=OneWay}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.NormalBorderBrush), Mode=OneWay}" />
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.BorderThickness), Mode=OneWay}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.NormalForegroundBrush), Mode=OneWay}" />

        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ErrorTemplate}" />
      
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStretch), Mode=OneWay}" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontFamily), Mode=OneWay}" />
        <Setter Property="FontStyle" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStyle), Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontWeight), Mode=OneWay}" />
    <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
    <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.DefaultPadding), Mode=OneWay}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>

                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid x:Name="root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition  Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Background="{TemplateBinding Background}" x:Name="xgtx" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ScrollViewer x:Name="PART_ContentHost" Background="{x:Null}"  
                          Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"  
                          FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" 
                          FontWeight="{TemplateBinding FontWeight}" TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}" 
                          TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" Margin="{TemplateBinding Padding}" />

                        </Border>
                        <Border x:Name="border"  BorderBrush="#FFDB000C" BorderThickness="1" CornerRadius="1" Visibility="Collapsed"  HorizontalAlignment="Stretch" Margin="0" Width="Auto">

                            <Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0" VerticalAlignment="Top" Width="12">
                                <Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="#FFDC000C" Margin="1,3,0,0"/>
                                <Path Data="M 0,0 L2,0 L 8,6 L8,8" Fill="#ffffff" Margin="1,3,0,0"/>
                            </Grid>
                        </Border>
                        <!--<Border x:Name="border1_Copy" Width="Auto" Margin="2" Grid.Column="1" Visibility="Collapsed"  Height="Auto" Background="Red"  >
                            <TextBlock TextWrapping="NoWrap" Text="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
                        </Border>-->


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="Visibility" TargetName="border" Value="Visible"/>
                        </Trigger>

                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True"/>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="border1_Copy" Value="Visible"/>
                        </MultiTrigger>-->


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=FontSize, Mode=OneWay, Converter={StaticResource IsGreaterThanConverter}, ConverterParameter=18}">
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
      </DataTrigger>


            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.MouseOverBackgroundBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.MouseOverBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.MouseOverForegroundBrush), Mode=OneWay}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.DisableBackgroundBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.DisableBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.DisableForegroundBrush), Mode=OneWay}" />
            </Trigger>
        </Style.Triggers>
  </Style>
  <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource TextBoxesBaseStyle}">
        <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.CaretBrush), Mode=OneWay}" />
        <Setter Property="SelectionBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.SelectionBrush), Mode=OneWay}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="True" />
          <Condition Property="IsReadOnly" Value="False" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.InputingBackgroundBrush), Mode=OneWay}" />
                    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.InputingBorderBrush), Mode=OneWay}" />
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.InputingForegroundBrush), Mode=OneWay}" />
            
                </MultiTrigger.Setters>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBaseStyle}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
  </Style>
  <Style TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource TextBoxBaseStyle}">
    <Style.Resources>
      <Style TargetType="{x:Type FlowDocument}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
      </Style>
    </Style.Resources>
    <Setter Property="OverridesDefaultStyle" Value="True" />
  </Style>
  <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource TextBoxesBaseStyle}">
    <Setter Property="PasswordChar" Value="*" />
        <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.CaretBrush), Mode=OneWay}" />
        <Setter Property="SelectionBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.SelectionBrush), Mode=OneWay}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Style.Triggers>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.InputingBackgroundBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.InputingBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBoxsSet:TextBoxsXaml.InputingForegroundBrush), Mode=OneWay}" />

            </Trigger>
    </Style.Triggers>
  </Style>


    <Style TargetType="{x:Type TextBoxOverride:TextBoxWaterMarked}" BasedOn="{StaticResource TextBoxBaseStyle}">
        <Style.Resources>
            <SolidColorBrush x:Key="WatermaskTextBoxWatermaskForeground" Color="#FF707070" />
        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxOverride:TextBoxWaterMarked}">
                    <Border x:Name="Border"  Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <TextBlock  x:Name="TextPrompt" Text="{TemplateBinding Tag}" Focusable="False"  
                                   Foreground="{DynamicResource WatermaskTextBoxWatermaskForeground}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"
                                   Visibility="Collapsed"  VerticalAlignment="Center"  Margin="3,0,1,0"/>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource TextBoxFocusBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxDisabledBackground}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBoxDisabledBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Border" 
                                    Value="{DynamicResource TextBoxMouseOverBorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>