<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:params="clr-namespace:Elysium.Parameters"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:MenuSet="clr-namespace:Elysium.ThemesSet.MenuSet"
                      xmlns:Custom="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
                     	xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic" 
	xmlns:Microsoft_Windows_Controls_Ribbon_Primitives="clr-namespace:Microsoft.Windows.Controls.Ribbon.Primitives;assembly=RibbonControlsLibrary"
                     xmlns:System="clr-namespace:System;assembly=mscorlib"
                     xmlns:Custom1="clr-namespace:Microsoft.Windows.Shell;assembly=Microsoft.Windows.Shell"
                    xmlns:FontSet="clr-namespace:Elysium.ThemesSet.FontSet"
                    xmlns:ButtonSet="clr-namespace:Elysium.ThemesSet.ButtonSet"
                    xmlns:ListViewSet="clr-namespace:Elysium.ThemesSet.ListViewSet"
                    xmlns:TabSet="clr-namespace:Elysium.ThemesSet.TabSet">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Elysium;component/Themes/SharedResources.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="LayoutRoot"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Grid x:Name="ContentHost"
                  TextBlock.Foreground="{TemplateBinding Foreground}"
                  TextBlock.FontFamily="{TemplateBinding FontFamily}"
                  TextBlock.FontSize="{TemplateBinding FontSize}"
                  TextBlock.FontStretch="{TemplateBinding FontStretch}"
                  TextBlock.FontStyle="{TemplateBinding FontStyle}"
                  TextBlock.FontWeight="{TemplateBinding FontWeight}"
                  TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                  TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                <ContentPresenter x:Name="HeaderHost"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <Popup x:Name="PART_Popup"
                       Grid.IsSharedSizeScope="True"
                       AllowsTransparency="True"
                       Focusable="False"
                       IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSubmenuOpen, Mode=TwoWay}"
                       Placement="Custom"
                       CustomPopupPlacementCallback="{x:Static params:DropDown.PopupPlacementCallback}"
                       PlacementTarget="{Binding ElementName=LayoutRoot}"    >


                    <Border x:Name="PopupRoot"
                            Tag="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"
                            UseLayoutRounding="False"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Border Background="{StaticResource BackgroundBrush}"
                                    BorderThickness="0"
                                    TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=Foreground}"
                                    TextBlock.FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontFamily}"
                                    TextBlock.FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontSize}"
                                    TextBlock.FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStretch}"
                                    TextBlock.FontStyle="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStyle}"
                                    TextBlock.FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontWeight}"
                                    TextOptions.TextFormattingMode="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextFormattingMode)}"
                                    TextOptions.TextRenderingMode="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextRenderingMode)}"
                                    RenderOptions.ClearTypeHint="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(RenderOptions.ClearTypeHint)}"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch">
                                <StackPanel IsItemsHost="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"/>
                            </Border>
                            <Rectangle x:Name="PopupMask"
                                       Fill="{StaticResource BackgroundBrush}"
                                       Margin="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left'}"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Width="{Binding ElementName=ContentHost, Path=ActualWidth}"/>
                        </Grid>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="PART_Popup" Property="params:DropDown.IsOpen" Value="True"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                <!--<Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{StaticResource LowlightBrush}"/>-->
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                    <Condition SourceName="PART_Popup" Property="params:DropDown.IsDefaultHorizontalPosition" Value="True"/>
                    <Condition SourceName="PART_Popup" Property="params:DropDown.IsDefaultVerticalPosition" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <!--<Setter TargetName="LayoutRoot" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:ThicknessSet.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left, Top, Right'}"/>-->
                    <!--<Setter TargetName="PopupMask" Property="Height" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessToDoubleConverter}, ConverterParameter='Top'}"/>-->
                    <Setter TargetName="PopupMask" Property="Height" Value="0"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                    <Condition SourceName="PART_Popup" Property="params:DropDown.IsDefaultHorizontalPosition" Value="True"/>
                    <Condition SourceName="PART_Popup" Property="params:DropDown.IsDefaultVerticalPosition" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <!--<Setter TargetName="LayoutRoot" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:ThicknessSet.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left, Right, Bottom'}"/>-->
                    <!--<Setter TargetName="PopupMask" Property="Height" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessToDoubleConverter}, ConverterParameter='Bottom'}"/>-->
                    <Setter TargetName="PopupMask" Property="VerticalAlignment" Value="Bottom"/>
                    <Setter TargetName="PopupMask" Property="Height" Value="0"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=PopupRoot, Path=Tag}" Value="True"/>
                    <Condition Binding="{Binding ElementName=PART_Popup, Path=(params:DropDown.IsDefaultVerticalPosition)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PopupRoot" Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="Transparent"
                                                          BlurRadius="4" ShadowDepth="2"
                                                          Direction="315"
                                                          Opacity="0.3"/>
                        </Setter.Value>
                    </Setter>
                    <Setter TargetName="PopupRoot" Property="Background" Value="{StaticResource TransparentBrush}"/>
                    <Setter TargetName="PopupRoot" Property="Padding" Value="0,0,6,6"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=PopupRoot, Path=Tag}" Value="True"/>
                    <Condition Binding="{Binding ElementName=PART_Popup, Path=(params:DropDown.IsDefaultVerticalPosition)}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PopupRoot" Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="{StaticResource ForegroundColor}"
                                                          BlurRadius="4" ShadowDepth="0"
                                                          Direction="45"
                                                          Opacity="0.3"/>
                        </Setter.Value>
                    </Setter>
                    <Setter TargetName="PopupRoot" Property="Background" Value="{StaticResource TransparentBrush}"/>
                    <Setter TargetName="PopupRoot" Property="Padding" Value="0,4,4,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="LayoutRoot"
             Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                TextBlock.Foreground="{TemplateBinding Foreground}"
                TextBlock.FontFamily="{TemplateBinding FontFamily}"
                TextBlock.FontSize="{TemplateBinding FontSize}"
                TextBlock.FontStretch="{TemplateBinding FontStretch}"
                TextBlock.FontStyle="{TemplateBinding FontStyle}"
                TextBlock.FontWeight="{TemplateBinding FontWeight}"
                TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <ContentPresenter x:Name="HeaderHost"
                                ContentSource="Header"
                                RecognizesAccessKey="True"
                                Margin="{TemplateBinding Padding}"/>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="LayoutRoot"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Grid TextBlock.Foreground="{TemplateBinding Foreground}"
                  TextBlock.FontFamily="{TemplateBinding FontFamily}"
                  TextBlock.FontSize="{TemplateBinding FontSize}"
                  TextBlock.FontStretch="{TemplateBinding FontStretch}"
                  TextBlock.FontStyle="{TemplateBinding FontStyle}"
                  TextBlock.FontWeight="{TemplateBinding FontWeight}"
                  TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                  TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                  Margin="{TemplateBinding Padding}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"
                                      SharedSizeGroup="ContextMenuIconSizeGroup"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="IconHost"
                                  Grid.Column="0"
                                  ContentSource="Icon"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  MinWidth="16" MinHeight="16"/>
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header" TextBlock.TextAlignment="Left"
                                  RecognizesAccessKey="True"
                                 VerticalAlignment="Center"/>
                <Polygon x:Name="ArrowGlyph"
                         Grid.Column="2"
                         Fill="{StaticResource MiddleLightBrush}"
                         StrokeThickness="0"
                         Stretch="Uniform"
                         Margin="3,0,3,0"
                         HorizontalAlignment="Right" VerticalAlignment="Center"
                         Width="{TemplateBinding params:MenuItem.ArrowSize}"
                         Height="{TemplateBinding params:MenuItem.ArrowSize}">
                    <Polygon.Points>
                        <PointCollection>
                            <Point X="0" Y="0"/>
                            <Point X="2" Y="2"/>
                            <Point X="0" Y="4"/>
                        </PointCollection>
                    </Polygon.Points>
                </Polygon>
                <Popup x:Name="PART_Popup"
                       Grid.IsSharedSizeScope="True"
                       AllowsTransparency="True"
                       Focusable="False"
                       Placement="Right"
                       PlacementTarget="{Binding ElementName=LayoutRoot}"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       Tag="{DynamicResource {x:Static SystemParameters.MenuAnimationKey}}">
                    <Border x:Name="PopupRoot"
                            Tag="{DynamicResource {x:Static SystemParameters.DropShadowKey}}">
                        <Border Background="{StaticResource BackgroundBrush}"
                                BorderThickness="0"
                                TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=Foreground}"
                                TextBlock.FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontFamily}"
                                TextBlock.FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontSize}"
                                TextBlock.FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStretch}"
                                TextBlock.FontStyle="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStyle}"
                                TextBlock.FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontWeight}"
                                TextOptions.TextFormattingMode="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextFormattingMode)}"
                                TextOptions.TextRenderingMode="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextRenderingMode)}"
                                RenderOptions.ClearTypeHint="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(RenderOptions.ClearTypeHint)}"
                                SnapsToDevicePixels="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=SnapsToDevicePixels}">
                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"/>
                        </Border>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="ArrowGlyph" Property="Fill" Value="{StaticResource AccentBrush}"/>
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Tag" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=PopupRoot, Path=Tag}" Value="True">
                <Setter TargetName="PopupRoot" Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="{StaticResource ForegroundColor}"
                                          BlurRadius="4" ShadowDepth="2"
                                          Direction="315"
                                          Opacity="0.3"/>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="PopupRoot" Property="Background" Value="{StaticResource TransparentBrush}"/>
                <Setter TargetName="PopupRoot" Property="Padding" Value="0,0,6,6"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Grid TextBlock.Foreground="{TemplateBinding Foreground}"
                  TextBlock.FontFamily="{TemplateBinding FontFamily}"
                  TextBlock.FontSize="{TemplateBinding FontSize}"
                  TextBlock.FontStretch="{TemplateBinding FontStretch}"
                  TextBlock.FontStyle="{TemplateBinding FontStyle}"
                  TextBlock.FontWeight="{TemplateBinding FontWeight}"
                  TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                  TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                  Margin="{TemplateBinding Padding}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"
                                      SharedSizeGroup="ContextMenuIconSizeGroup"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"
                                      SharedSizeGroup="ContextMenuShortcutSizeGroup"/>
                </Grid.ColumnDefinitions>
                <Path x:Name="CheckBullet"
                      Grid.Column="0"
                      Stroke="{StaticResource LowlightBrush}"
                      StrokeThickness="{TemplateBinding params:General.BoldThickness}"
                      Stretch="Uniform"
                      Visibility="Collapsed"
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      Width="{TemplateBinding params:MenuItem.BulletSize}" Height="{TemplateBinding params:MenuItem.BulletSize}">
                    <Path.Data>
                        <GeometryGroup>
                            <LineGeometry StartPoint="0,3" EndPoint="4,8"/>
                            <LineGeometry StartPoint="4,8" EndPoint="8,0"/>
                        </GeometryGroup>
                    </Path.Data>
                </Path>
                <ContentPresenter x:Name="IconHost"
                                  Grid.Column="0"
                                  ContentSource="Icon"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  MinWidth="16" MinHeight="16"/>
                <ContentPresenter x:Name="HeaderHost"
                                  Grid.Column="1"
                                  ContentSource="Header"  TextBlock.TextAlignment="Left"
                                  RecognizesAccessKey="True"
                                 VerticalAlignment="Center"/>
                <TextBlock Grid.Column="2" 
                           Text="{TemplateBinding InputGestureText}"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="IconHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckBullet" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type MenuItem}">
        <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalItemBackgrounBrush), Mode=OneWay}"/>
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalBorderBrush), Mode=OneWay}"/>-->
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.BorderThickness), Mode=OneWay}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalForegrounBrush), Mode=OneWay}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontFamily, Mode=OneWay}"/>
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStretch, Mode=OneWay}"/>
        <Setter Property="FontStyle" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStyle), Mode=OneWay}" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.RowHeightt), Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontWeight), Mode=OneWay}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextFormattingMode), Mode=OneWay}"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextRenderingMode), Mode=OneWay}"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(RenderOptions.ClearTypeHint), Mode=OneWay}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=HorizontalContentAlignment}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--<Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=Padding, Mode=OneWay}"/>-->
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <!--<Setter Property="BorderThickness" Value="0"/>-->

                <!--<Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:ThicknessSet.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left, Top, Right'}"/>-->
            </Trigger>
            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
                <!--<Setter Property="BorderThickness" Value="0"/>-->
            </Trigger>
            <!-- Role = SubMenuItem : this is a child menu item which has children-->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
                <!--<Setter Property="BorderThickness" Value="0"/>-->
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelHeader"/>
                    <Condition Property="IsHighlighted" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelItem"/>
                    <Condition Property="IsHighlighted" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.DisableForegrounBrush), Mode=OneWay}"/>
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.DisableItemBackgrounBrush), Mode=OneWay}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource LowlightBrush}" />
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.DefaultThickness), Mode=OneWay}" />
        <Setter Property="params:MenuBase.SubmenuBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background, Mode=OneWay}" />
        <Setter Property="params:MenuBase.SubmenuBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush, Mode=OneWay}" />
        <Setter Property="params:MenuBase.SubmenuBorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderThickness, Mode=OneWay}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.ContentFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="Medium" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
        <Setter Property="params:General.ShadowBrush" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.BoldPadding), Mode=OneWay}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="LayoutRoot">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" TextBlock.Foreground="{TemplateBinding Foreground}" TextBlock.FontFamily="{TemplateBinding FontFamily}" TextBlock.FontSize="{TemplateBinding FontSize}" TextBlock.FontStretch="{TemplateBinding FontStretch}" TextBlock.FontStyle="{TemplateBinding FontStyle}" TextBlock.FontWeight="{TemplateBinding FontWeight}" TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}" TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="LayoutRoot" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=(params:General.ShadowBrush).(SolidColorBrush.Color)}" BlurRadius="4" ShadowDepth="2" Direction="315" Opacity="0.3" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="LayoutRoot" Property="Background" Value="{StaticResource TransparentBrush}" />
                            <Setter TargetName="LayoutRoot" Property="Padding" Value="0,0,6,6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=FontSize, Mode=OneWay, Converter={StaticResource IsGreaterThanConverter}, ConverterParameter=18}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <ContextMenu x:Key="ContextMenuKey"  BorderThickness="0" VerticalAlignment="Center"   ItemsSource="{Binding CmItems}">
            <ContextMenu.ItemTemplate>
                <HierarchicalDataTemplate  DataType="{x:Type MenuItem}"    ItemsSource="{Binding CmItems}">
                <MenuItem Header="{Binding Path=TextTmp}"  Command="{Binding Command}"  CommandParameter="{Binding CommandParameter}"
                              IsChecked="{Binding IsChecked}"   IsEnabled="{Binding IsEnabled}"
                               VerticalAlignment="Center" Icon="{Binding Image}" MinHeight="24" />
                </HierarchicalDataTemplate>
            </ContextMenu.ItemTemplate>
        </ContextMenu>

   
    
    <Style x:Key="MenuItemKey" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalItemBackgrounBrush), Mode=OneWay}"/>
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalBorderBrush), Mode=OneWay}"/>
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.BorderThickness), Mode=OneWay}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalForegrounBrush), Mode=OneWay}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontFamily, Mode=OneWay}"/>
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStretch, Mode=OneWay}"/>
        <Setter Property="FontStyle" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStyle), Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontWeight), Mode=OneWay}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextFormattingMode), Mode=OneWay}"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextRenderingMode), Mode=OneWay}"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(RenderOptions.ClearTypeHint), Mode=OneWay}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=HorizontalContentAlignment}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--<Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=Padding, Mode=OneWay}"/>-->
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <!--<Setter Property="BorderThickness" Value="0"/>-->

                <!--<Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:ThicknessSet.DefaultThickness), Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left, Top, Right'}"/>-->
            </Trigger>
            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
                <!--<Setter Property="BorderThickness" Value="0"/>-->
            </Trigger>
            <!-- Role = SubMenuItem : this is a child menu item which has children-->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
                <!--<Setter Property="BorderThickness" Value="0"/>-->
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelHeader"/>
                    <Condition Property="IsHighlighted" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="TopLevelItem"/>
                    <Condition Property="IsHighlighted" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.DisableForegrounBrush), Mode=OneWay}"/>
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.DisableItemBackgrounBrush), Mode=OneWay}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Menu}">
      <!--<Setter Property="MinWidth" Value="1000"/>-->
        <!-- <Setter Property="MaxWidth" Value="600"/>-->
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalBackgrounBrush), Mode=OneWay}"/>
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalBorderBrush), Mode=OneWay}"/>
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.BorderThickness), Mode=OneWay}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalForegrounBrush), Mode=OneWay}"/>
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStretch), Mode=OneWay}" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontFamily), Mode=OneWay}" />
        <Setter Property="FontStyle" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStyle), Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontWeight), Mode=OneWay}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
        <!--<Setter Property="HorizontalAlignment" Value="Left"/>-->
        <Setter Property="VerticalAlignment" Value="Top"/>
        <!--<Setter Property="HorizontalContentAlignment" Value="Stretch"/>-->
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <!--<Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.BoldPadding), Mode=OneWay}"/>-->
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            TextBlock.FontFamily="{TemplateBinding FontFamily}"
                            TextBlock.FontSize="{TemplateBinding FontSize}"
                            TextBlock.FontStretch="{TemplateBinding FontStretch}"
                            TextBlock.FontStyle="{TemplateBinding FontStyle}"
                            TextBlock.FontWeight="{TemplateBinding FontWeight}"
                            TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                            TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                            RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ItemsPresenter Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=FontSize, Mode=OneWay, Converter={StaticResource IsGreaterThanConverter}, ConverterParameter=18}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <Style TargetType="{x:Type Custom:Ribbon}">
        <Style.Resources>
            <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">Fade</PopupAnimation>
        </Style.Resources>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalItemBackgrounBrush), Mode=OneWay}"/>

        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalBorderBrush), Mode=OneWay}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.NormalForegrounBrush), Mode=OneWay}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontFamily, Mode=OneWay}"/>
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStretch, Mode=OneWay}"/>
        <Setter Property="FontStyle" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStyle), Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontWeight), Mode=OneWay}" />



        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
        <Setter Property="MouseOverBackground"  Value="{Binding RelativeSource={RelativeSource Self}, Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}" />
          
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(MenuSet:MenuAttriXaml.DisableForegrounBrush), Mode=OneWay}"/>
        <Setter Property="PressedBackground"  Value="{Binding RelativeSource={RelativeSource Self}, Path=(MenuSet:MenuAttriXaml.DisableItemBackgrounBrush), Mode=OneWay}">
        </Setter>
    
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
        <Setter Property="CheckedBackground"  Value="{Binding RelativeSource={RelativeSource Self}, Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}">
        </Setter>
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
        <Setter Property="FocusedBackground"  Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverItemBackgrounBrush), Mode=OneWay}"/>
       



        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:Ribbon}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border Grid.ColumnSpan="3"  Grid.Row="1">
                            <Popup x:Name="PART_ITEMSPRESENTERPOPUP" AllowsTransparency="True" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" RenderOptions.ClearTypeHint="Enabled" FocusVisualStyle="{x:Null}" Focusable="True" Margin="0,0,5,5">
                                    <Border x:Name="CollapsedPopupBackgroundBorder" Background="{TemplateBinding Background}">
                                        <ContentControl x:Name="popupItemsPresenterHost" KeyboardNavigation.DirectionalNavigation="Cycle" Focusable="False" Margin="0,1,0,0" KeyboardNavigation.TabNavigation="Cycle"/>
                                    </Border>
                                </Microsoft_Windows_Themes:SystemDropShadowChrome>
                            </Popup>
                        </Border>
                        <ContentControl  x:Name="mainItemsPresenterHost" Grid.ColumnSpan="3" Focusable="False" Grid.Row="2">
                            <Border x:Name="groupsBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,1,1" Height="76" SnapsToDevicePixels="True">

                                <Border BorderBrush="#60FFFFFF" BorderThickness="0,0,0,1" Margin="0,0,0,1" SnapsToDevicePixels="True">
                                    <ItemsPresenter x:Name="ItemsPresenter"/>
                                </Border>
                            </Border>
                        </ContentControl>
                        <Border x:Name="QatBottomHost" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="3" Grid.Row="3">
                            <ContentPresenter x:Name="QatBottomHostContentPresenter" HorizontalAlignment="Left" IsHitTestVisible="True" VerticalAlignment="Center"/>
                        </Border>
                        <Border x:Name="titleBarBackground"  Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,0,1" Grid.ColumnSpan="3" Visibility="Collapsed">

                        </Border>
                        <DockPanel Grid.ColumnSpan="3"  Grid.Column="0" Height="{Binding WindowCaptionHeight}" LastChildFill="True">
                            <ContentControl x:Name="windowButtonPlaceHolder" DockPanel.Dock="Right" Focusable="False" IsHitTestVisible="False" Margin="3,0,0,0" Width="{Binding WindowCaptionButtonsLocation.Width}">
                                <!--<ContentControl.Visibility>
                                    <TemplateBinding Property="IsHostedInRibbonMenuXamlWindow">
                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter/>
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </ContentControl.Visibility>-->
                            </ContentControl>
                            <ContentControl x:Name="windowIconPadding" DockPanel.Dock="Left" Focusable="False" IsHitTestVisible="False" Margin="0,0,3,0" Width="{Binding SmallIconSize.Width}"/>
                            <Microsoft_Windows_Controls_Ribbon_Primitives:RibbonTitlePanel x:Name="PART_TitlePanel">
                                <Grid x:Name="QatTopHost">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="QatTopHostLeftBorder" BorderBrush="#66CCCCCC"  BorderThickness="1,0,1,0.9" Background="#77222222" Grid.Column="0"  Margin="8,2,0,2" Width="3"/>
                                    <ContentPresenter x:Name="QatTopHostContentPresenter" Content="{TemplateBinding QuickAccessToolBar}" Grid.Column="1" IsHitTestVisible="True"/>
                                    <Border x:Name="QatTopHostRightBorder" BorderBrush="#66CCCCCC" BorderThickness="1,0,1,0.9" Background="#77222222" Grid.Column="2"  Margin="0,2,1,2" Width="3"/>
                                </Grid>
                                <ContentPresenter x:Name="PART_TitleHost" ContentTemplate="{TemplateBinding TitleTemplate}" Content="{TemplateBinding Title}" 
                                                          ContentSource="Title" TextElement.Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" 
                                                          TextElement.FontWeight="{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}" TextElement.FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}"
                                                          TextElement.FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                          IsHitTestVisible="False" Margin="3,0" MinWidth="75" MinHeight="{Binding WindowCaptionHeight}">
                                    <ContentPresenter.Resources>
                                        <DataTemplate x:Key="{DataTemplateKey DataType={x:Type System:String}}" DataType="{x:Type System:String}">
                                            <TextBlock x:Name="titleTextBlock" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Margin="0,0,0,0"  Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis"/>
                                            <DataTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsGlassEnabled}" Value="True"/>
                                                        <Condition Binding="{Binding IsHostedInRibbonWindow, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:Ribbon}}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Effect" TargetName="titleTextBlock">
                                                        <Setter.Value>
                                                            <DropShadowEffect  Color="White" ShadowDepth="0"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </MultiDataTrigger>
                                                <DataTrigger Binding="{Binding IsGlassEnabled}" Value="False">
                                                    <Setter Property="Margin" TargetName="titleTextBlock" Value="0"/>
                                                    <Setter Property="VerticalAlignment" TargetName="titleTextBlock" Value="Center"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                    <Setter Property="Margin" TargetName="titleTextBlock" Value="0,1,0,0"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                                <Custom:RibbonContextualTabGroupItemsControl x:Name="PART_ContextualTabGroupItemsControl" HorizontalAlignment="Center" IsHitTestVisible="True" Custom1:WindowChrome.IsHitTestVisibleInChrome="True"/>
                            </Microsoft_Windows_Controls_Ribbon_Primitives:RibbonTitlePanel>
                        </DockPanel>
                        <!--<ContentPresenter x:Name="applicationMenu" Content="{TemplateBinding ApplicationMenu}" Grid.Row="1" VerticalAlignment="Top"/>-->
                        <!--<TextBlock Grid.Row="1" Margin="0,-20,0,0" Text="ThisIsAPicture"></TextBlock>-->
                        <Custom:RibbonTabHeaderItemsControl x:Name="TabHeaderItemsControl" Grid.Column="1" HorizontalAlignment="Left" Margin="1,1,1,0" Grid.Row="1" 
                                                            Style="{DynamicResource RibbonTabHeaderItemsControlStyle1}"
                                                            VerticalAlignment="Top"/>
                        <ContentPresenter x:Name="PART_HelpPane" ContentTemplate="{TemplateBinding HelpPaneContentTemplate}" Content="{TemplateBinding HelpPaneContent}" Grid.Column="2" 
                                                  ContentSource="HelpPaneContent" HorizontalAlignment="Right" Grid.Row="1" VerticalAlignment="Top"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed" Value="True">
                            <!--<Setter Property="Visibility" TargetName="applicationMenu" Value="Collapsed"/>-->
                            <Setter Property="Visibility" TargetName="QatBottomHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatTopHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="mainItemsPresenterHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="TabHeaderItemsControl" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_HelpPane" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_ContextualTabGroupItemsControl" Value="Collapsed"/>
                            <Setter Property="MinWidth" TargetName="PART_TitleHost" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCollapsed" Value="True"/>
                                <Condition Property="IsHostedInRibbonWindow" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <Trigger Property="ShowQuickAccessToolBarOnTop" Value="False">
                            <Setter Property="Content" TargetName="QatTopHostContentPresenter" Value="{x:Null}"/>
                            <Setter Property="Visibility" TargetName="QatTopHost" Value="Collapsed"/>
                            <Setter Property="Content" TargetName="QatBottomHostContentPresenter" Value="{Binding QuickAccessToolBar, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0,0,0,1"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding QuickAccessToolBar.HasItems, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding QuickAccessToolBar.CustomizeMenuButton, RelativeSource={RelativeSource Self}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="QatTopHost" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatBottomHost" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter Property="Content" TargetName="mainItemsPresenterHost" Value="{x:Null}"/>
                            <Setter Property="Visibility" TargetName="mainItemsPresenterHost" Value="Collapsed"/>
                            <Setter Property="Content" TargetName="popupItemsPresenterHost" Value="{Binding ElementName=groupsBorder}"/>
                            <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0,0,0,1"/>
                        </Trigger>
                        <Trigger Property="WindowIconVisibility" Value="Collapsed">
                            <Setter Property="Visibility" TargetName="windowIconPadding" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatTopHostLeftBorder" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMinimized" Value="True"/>
                                <Condition Property="ShowQuickAccessToolBarOnTop" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="QatBottomHost" Value="0,1,0,0"/>
                        </MultiTrigger>
                        <Trigger Property="IsHostedInRibbonWindow" Value="False">
                            <Setter Property="Grid.Row" TargetName="BackgroundBorder" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="BackgroundBorder" Value="4"/>
                            <Setter Property="Visibility" TargetName="titleBarBackground" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="windowIconPadding" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="QatTopHostLeftBorder" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="BorderThickness" TargetName="BackgroundBorder" Value="0"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_ITEMSPRESENTERPOPUP" Value="True">
                            <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonWindow}}}" Value="False"/>
                                <Condition Binding="{Binding IsGlassEnabled}" Value="False"/>
                                <Condition Binding="{Binding IsHostedInRibbonWindow, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="PART_TitleHost" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                            <!--<Setter Property="Background" TargetName="BackgroundBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                            <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Background" TargetName="groupsBorder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="groupsBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Height" TargetName="groupsBorder" Value="94"/>
                            <Setter Property="BorderBrush" TargetName="QatBottomHost" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Background" TargetName="titleBarBackground" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="titleBarBackground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <!--<Setter Property="Background" TargetName="CollapsedPopupBackgroundBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                            <Setter Property="PopupAnimation" TargetName="PART_ITEMSPRESENTERPOPUP" Value="None"/>
                            <Setter Property="Margin" TargetName="QatTopHostLeftBorder" Value="10,1,2,2"/>
                            <Setter Property="Width" TargetName="QatTopHostLeftBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="QatTopHostLeftBorder" Value="0"/>
                          
                            <Setter Property="Background" TargetName="QatTopHostLeftBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Margin" TargetName="QatTopHostRightBorder" Value="0,1,2,2"/>
                            <Setter Property="Width" TargetName="QatTopHostRightBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="QatTopHostRightBorder" Value="0"/>
                         
                            <Setter Property="Background" TargetName="QatTopHostRightBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding UxThemeName}" Value="Aero">
                            <Setter Property="Margin" TargetName="QatTopHost" Value="0,-3,0,0"/>
                            <Setter Property="Margin" TargetName="QatTopHostLeftBorder" Value="3,3,0,5"/>
                            <Setter Property="Background" TargetName="QatTopHostLeftBorder" Value="#81444444"/>
                            <Setter Property="BorderBrush" TargetName="QatTopHostLeftBorder" Value="#69EEEEEE"/>
                            <Setter Property="Margin" TargetName="QatTopHostRightBorder" Value="0,3,1,5"/>
                            <Setter Property="Background" TargetName="QatTopHostRightBorder" Value="#81444444"/>
                            <Setter Property="BorderBrush" TargetName="QatTopHostRightBorder" Value="#69EEEEEE"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding UxThemeName}" Value="Aero"/>
                                <Condition Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonWindow}}}" Value="Maximized"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Margin" TargetName="QatTopHost" Value="0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Custom:RibbonGroup}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonGroup}">
                    <Border x:Name="GroupBorder" Background="{TemplateBinding Background}" Margin="1,2,0,0">
                        <Grid x:Name="MainGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="0" />
                            </Grid.RowDefinitions>
                            <Border x:Name="PART_HotBackground" Opacity="0" Grid.RowSpan="3" SnapsToDevicePixels="True"/>
                            <Border x:Name="SeparatorBorder" Background="{TemplateBinding BorderBrush}" Grid.Column="1" Height="75" Grid.RowSpan="3" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="1"/>
                            <Border Margin="2,1,2,0" Padding="3,0">
                                <Grid>
                                    <ItemsPresenter x:Name="ItemsPresenter"/>
                                    <ContentControl x:Name="TemplateContentControl" Focusable="False" Visibility="Collapsed"/>
                                </Grid>
                            </Border>
                            <Border x:Name="LabelSeparatorBorder" Height="1" Margin="5,1,5,-1" Grid.Row="1"/>
                            <Grid Margin="2,0" Grid.Row="2">
                                <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" TextElement.Foreground="#FF9E9E9E" HorizontalAlignment="Center" MaxHeight="16" Margin="2,0" VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="#FF9E9E9E"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="PART_HotBackground" Value="Transparent"/>
                            <Setter Property="Visibility" TargetName="SeparatorBorder" Value="Collapsed"/>
                            <Setter Property="BorderThickness" TargetName="GroupBorder" Value="1"/>
                            <Setter Property="Background" TargetName="GroupBorder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="GroupBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Background" TargetName="LabelSeparatorBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </DataTrigger>
                        <!--<EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HotBackground"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.4" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HotBackground"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource Self}}"/>
        <!--<Setter Property="MouseOverBackground"  Value="#80FFFFFF">


        </Setter>-->
        <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsCollapsed" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Custom:RibbonGroup}">
                            <Grid x:Name="MainGrid">
                                <Custom:RibbonToggleButton x:Name="PART_ToggleButton" Background="{TemplateBinding Background}" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" LargeImageSource="{TemplateBinding LargeImageSource}" Margin="0,3,0,0" SmallImageSource="{TemplateBinding SmallImageSource}">
                                    <Custom:RibbonToggleButton.Style>
                                        <Style TargetType="{x:Type Custom:RibbonToggleButton}">
                                            <Setter Property="Focusable" Value="True"/>
                                            <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonGroup}}}"/>
                                            <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
                                            <Setter Property="MouseOverBackground" Value="#40FFFFFF"/>
                                            <Setter Property="FocusedBackground" Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}"/>
                                            <Setter Property="FocusedBorderBrush" Value="Transparent"/>
                                            <Setter Property="CheckedBackground" Value="Transparent"/>
                                            <Setter Property="CheckedBorderBrush" Value="Transparent"/>
                                            <Setter Property="ClickMode" Value="Press"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Custom:RibbonToggleButton}">
                                                        <ControlTemplate.Resources>
                                                            <DataTemplate x:Key="{DataTemplateKey DataType={x:Type System:String}}" DataType="{x:Type System:String}">
                                                                <Custom:RibbonTwoLineText Custom:RibbonTwoLineText.HasTwoLines="{TemplateBinding Custom:RibbonTwoLineText.HasTwoLines}" LineStackingStrategy="BlockLineHeight" LineHeight="13" Margin="2,4,2,0" PathFill="{TemplateBinding TextElement.Foreground}" Custom:RibbonTwoLineText.PathData="{TemplateBinding Custom:RibbonTwoLineText.PathData}" TextAlignment="Center" Text="{Binding}" VerticalAlignment="Top"/>
                                                            </DataTemplate>
                                                        </ControlTemplate.Resources>
                                                        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                                                            <Border x:Name="ButtonInnerBorder" BorderBrush="#FFEAF1FB" BorderThickness="1" Margin="1"/>
                                                            <Border x:Name="ButtonOuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" />
                                                            <Border x:Name="PART_HotBackground" BorderBrush="{TemplateBinding MouseOverBorderBrush}" BorderThickness="1" Background="{TemplateBinding MouseOverBackground}" Opacity="0"/>
                                                            <Grid Margin="2">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="Auto"/>
                                                                    <RowDefinition/>
                                                                </Grid.RowDefinitions>
                                                                <Border x:Name="ImageOuterBorder" Grid.Row="0">
                                                                    <Border x:Name="ImageMiddleBorder" BorderBrush="#FFAEBECF" BorderThickness="0"  HorizontalAlignment="Center" Height="32" Margin="3" VerticalAlignment="Top" Width="32">
                                                                        <Grid>
                                                                            <Border x:Name="ImageInnerBorder" BorderBrush="#FFFCFCFC" BorderThickness="0" />
                                                                            <Image x:Name="GroupImage" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="Center" Height="32" Source="{TemplateBinding LargeImageSource}" VerticalAlignment="Center" Width="32"/>
                                                                        </Grid>
                                                                    </Border>
                                                                </Border>
                                                                <Border x:Name="LabelBorder" Grid.Row="1" Grid.RowSpan="2">
                                                                    <Border.Background>
                                                                        <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,1" RadiusY="0.5" RadiusX="1">
                                                                            <GradientStop Color="#30FFFFFF" Offset="0"/>
                                                                            <GradientStop Color="#08808080" Offset="1"/>
                                                                        </RadialGradientBrush>
                                                                    </Border.Background>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Custom:RibbonTwoLineText.HasTwoLines="True" Custom:RibbonTwoLineText.PathData="M0,0L2.5,3 5,0z"/>
                                                                </Border>
                                                            </Grid>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="LargeImageSource" Value="{x:Null}">
                                                                <Setter Property="Source" TargetName="GroupImage" Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                <Setter Property="Width" TargetName="GroupImage" Value="16"/>
                                                                <Setter Property="Height" TargetName="GroupImage" Value="16"/>
                                                                <Setter Property="BorderThickness" TargetName="ImageMiddleBorder" Value="1"/>
                                                                <Setter Property="Background" TargetName="ImageMiddleBorder">
                                                                    <Setter.Value>
                                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                            <GradientStop Color="#88FFFFFF" Offset="0"/>
                                                                            <GradientStop Color="#88DBE7F4" Offset="1"/>
                                                                        </LinearGradientBrush>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="BorderThickness" TargetName="ImageInnerBorder" Value="1"/>
                                                                <Setter Property="Background" TargetName="ImageInnerBorder" Value="#50FFFFFF"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="GroupImage" Value="0.5"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="#FF9E9E9E"/>
                                                            </Trigger>
                                                            <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                                                                <Setter Property="Background" TargetName="ImageMiddleBorder" Value="Transparent"/>
                                                                <Setter Property="BorderThickness" TargetName="ImageMiddleBorder" Value="0"/>
                                                                <Setter Property="Background" TargetName="ImageInnerBorder" Value="Transparent"/>
                                                                <Setter Property="BorderThickness" TargetName="ImageInnerBorder" Value="0"/>
                                                                <Setter Property="Background" TargetName="PART_HotBackground" Value="Transparent"/>
                                                                <Setter Property="Background" TargetName="LabelBorder" Value="Transparent"/>
                                                                <Setter Property="Background" TargetName="ButtonOuterBorder" Value="Transparent"/>
                                                                <Setter Property="BorderBrush" TargetName="ButtonOuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>

                                                                <Setter Property="BorderThickness" TargetName="ButtonInnerBorder" Value="0,1,0,0"/>
                                                            </DataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="ButtonInnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                <Setter Property="BorderThickness" TargetName="ButtonInnerBorder" Value="1"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="ButtonInnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                <Setter Property="BorderThickness" TargetName="ButtonInnerBorder" Value="1"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="ButtonOuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                            </MultiDataTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                    <Condition Property="IsChecked" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter Property="Opacity" TargetName="PART_HotBackground" Value="1"/>
                                                            </MultiTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Opacity" TargetName="PART_HotBackground" Value="1"/>
                                                                <Setter Property="Background" TargetName="PART_HotBackground" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                <Setter Property="BorderBrush" TargetName="PART_HotBackground" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Opacity" TargetName="PART_HotBackground" Value="1"/>
                                                                <Setter Property="Background" TargetName="PART_HotBackground" Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                <Setter Property="BorderBrush" TargetName="PART_HotBackground" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                <Setter Property="Background" TargetName="ImageOuterBorder" Value="#20BBBBBB"/>
                                                                <Setter Property="Background" TargetName="LabelBorder">
                                                                    <Setter.Value>
                                                                        <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,0.95" RadiusY="0.5" RadiusX="0.9">
                                                                            <GradientStop Color="#AAFFFFFF" Offset="0"/>
                                                                            <GradientStop Color="#40BBBBBB" Offset="1"/>
                                                                        </RadialGradientBrush>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                                                    <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                            </MultiDataTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Custom:RibbonToggleButton.Style>
                                </Custom:RibbonToggleButton>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" RenderOptions.ClearTypeHint="Enabled"  FocusVisualStyle="{x:Null}" Focusable="True" KeyTipService.IsKeyTipScope="True" SnapsToDevicePixels="True">
                                        <Grid x:Name="PopupGrid" Height="{TemplateBinding ActualHeight}" Margin="0,1.5,0,0">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto" MinHeight="16"/>
                                            </Grid.RowDefinitions>
                                            <Border x:Name="PopupBorder" BorderBrush="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="1" Background="{TemplateBinding Background}" Grid.RowSpan="2"/>
                                            <Border x:Name="PART_HotBackground" BorderBrush="{TemplateBinding MouseOverBorderBrush}" BorderThickness="1" Background="{TemplateBinding MouseOverBackground}" Opacity="0" Grid.RowSpan="2" SnapsToDevicePixels="True"/>
                                            <Border x:Name="PART_RibbonControlsHostBorder" Margin="2,3.5,2,0" Padding="3,0">
                                                <Grid>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Cycle"/>
                                                    <ContentControl x:Name="TemplateContentControl" Focusable="False" Visibility="Collapsed"/>
                                                </Grid>
                                            </Border>
                                            <Grid Margin="2,0,2,1" Grid.Row="1">
                                                <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" TextElement.Foreground="#FF9E9E9E" HorizontalAlignment="Center" MaxHeight="15" Margin="2,0" VerticalAlignment="Center"/>
                                            </Grid>
                                        </Grid>
                                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                        <Condition Binding="{Binding Background, RelativeSource={RelativeSource Self}}" Value="Transparent"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="PopupBorder" Value="{Binding Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="#FF9E9E9E"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                    <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                                    <Setter Property="Background" TargetName="PART_HotBackground" Value="Transparent"/>
                                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                                    <Setter Property="BorderBrush" TargetName="PopupBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                    <!--<Setter Property="Background" TargetName="PopupBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                                    <!--<Setter Property="CornerRadius" TargetName="Shdw" Value="0"/>-->
                                </DataTrigger>
                                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                    <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                                    <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="IsOpen" SourceName="PART_Popup" Value="False">
                                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                                </Trigger>
                                <!--<EventTrigger RoutedEvent="Mouse.MouseEnter" SourceName="Shdw">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HotBackground"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="Mouse.MouseLeave" SourceName="Shdw">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.4" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HotBackground"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>-->
                                <Trigger Property="IsInQuickAccessToolBar" Value="True">
                                    <Setter Property="Height" TargetName="PopupGrid" Value="76"/>
                                    <Setter Property="Style" TargetName="PART_ToggleButton">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type Custom:RibbonToggleButton}">
                                                <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
                                                <Setter Property="Focusable" Value="True"/>
                                                <Setter Property="BorderBrush" Value="#80808080"/>
                                                <Setter Property="Background" Value="#AAFFFFFF"/>
                                                <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
                                                <Setter Property="MouseOverBackground"   Value="#60FFFFFF">

                                                </Setter>
                                                <Setter Property="FocusedBackground" Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}"/>
                                                <Setter Property="FocusedBorderBrush" Value="Transparent"/>
                                                <Setter Property="CheckedBackground" Value="#80808080">

                                                </Setter>
                                                <Setter Property="CheckedBorderBrush" Value="Transparent"/>
                                                <Setter Property="Margin" Value="0,-1,0,0"/>
                                                <Setter Property="ClickMode" Value="Press"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Custom:RibbonToggleButton}">
                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                                                                <Grid>
                                                                    <Border x:Name="InnerBorder" BorderBrush="{TemplateBinding MouseOverBorderBrush}" Background="{TemplateBinding MouseOverBackground}" Opacity="0"/>
                                                                    <Image x:Name="GroupImage" RenderOptions.BitmapScalingMode="{TemplateBinding RenderOptions.BitmapScalingMode}" HorizontalAlignment="Center" Height="16" Margin="3,2" Source="{TemplateBinding SmallImageSource}" VerticalAlignment="Center" Width="16"/>
                                                                </Grid>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Opacity" TargetName="GroupImage" Value="0.5"/>
                                                                </Trigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                        <Condition Binding="{Binding Background, RelativeSource={RelativeSource Self}}" Value="Transparent"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{Binding Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Opacity" TargetName="InnerBorder" Value="1"/>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                        <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Opacity" TargetName="InnerBorder" Value="1"/>
                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                    <Setter Property="Opacity" TargetName="InnerBorder" Value="1"/>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="#AA808080"/>
                                                                </MultiDataTrigger>
                                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                    <!--<Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>-->
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                        <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                </MultiDataTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Margin" TargetName="PART_ToggleButton" Value="0"/>
                                </Trigger>
                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter Property="ToolTipService.IsEnabled" TargetName="MainGrid" Value="False"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="TextElement.Foreground" TargetName="MainGrid" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Custom:RibbonButton}">
        <Style.Resources>
            <Thickness x:Key="{ComponentResourceKey ResourceId=LargeImageMargin, TypeInTargetAssembly={x:Type Custom:Ribbon}}">1,1,1,2</Thickness>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <!--<Setter Property="CornerRadius" Value="2"/>-->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="MouseOverBorderBrush" Value="{Binding Ribbon.MouseOverBorderBrush, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="MouseOverBackground" Value="{Binding Ribbon.MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="PressedBorderBrush" Value="{Binding Ribbon.PressedBorderBrush, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="PressedBackground" Value="{Binding Ribbon.PressedBackground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="FocusedBorderBrush" Value="{Binding Ribbon.FocusedBorderBrush, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="FocusedBackground" Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}"/>





        <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonButton}">
                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}"  Padding="{TemplateBinding Padding}">
                            <StackPanel x:Name="StackPanel">
                                <Image x:Name="PART_Image" RenderOptions.BitmapScalingMode="NearestNeighbor" 
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="32" 
                                       Margin="{DynamicResource {ComponentResourceKey ResourceId=LargeImageMargin, TypeInTargetAssembly={x:Type Custom:Ribbon}}}" 
                                       Source="{TemplateBinding LargeImageSource}" VerticalAlignment="Center" Width="32"/>
                                <Grid x:Name="Grid" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Custom:RibbonTwoLineText x:Name="TwoLineText" HorizontalAlignment="Center" LineStackingStrategy="BlockLineHeight" 
                                                              LineHeight="13" Margin="2,1,2,0" TextAlignment="Center" Text="{TemplateBinding Label}" VerticalAlignment="Top"/>
                                </Grid>
                            </StackPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Large">
                            <Setter Property="MaxWidth" Value="85"/>
                            <Setter Property="MinWidth" Value="70"/>
                            <Setter Property="Height" Value="66"/>
                            <Setter Property="MinHeight" TargetName="Grid" Value="26"/>
                            <Setter Property="Custom:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small">
                            <Setter Property="Height" Value="22"/>
                            <Setter Property="Margin" TargetName="PART_Image" Value="1,0"/>
                            <Setter Property="Source" TargetName="PART_Image" Value="{Binding SmallImageSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Width" TargetName="PART_Image" Value="16"/>
                            <Setter Property="Height" TargetName="PART_Image" Value="16"/>
                            <Setter Property="HorizontalAlignment" TargetName="TwoLineText" Value="Left"/>
                            <Setter Property="Margin" TargetName="TwoLineText" Value="2"/>
                            <!--<Setter Property="Orientation" TargetName="StackPanel" Value="Horizontal"/>-->
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small"/>
                                <Condition Binding="{Binding IsInQuickAccessToolBar, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="Auto"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Visibility" TargetName="TwoLineText" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Collapsed">
                            <Setter Property="Visibility" TargetName="PART_Image" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Foreground" TargetName="TwoLineText" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Foreground" TargetName="TwoLineText" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Foreground" TargetName="TwoLineText" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.MouseOverForegrounBrush), Mode=OneWay}"/>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness" TargetName="OuterBorder" Value="0,0,1,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="PART_Image" Value="0.5"/>
                            <Setter Property="Foreground" TargetName="TwoLineText" Value="{Binding RelativeSource={RelativeSource Self},Path=(MenuSet:MenuAttriXaml.DisableForegrounBrush), Mode=OneWay}"/>
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="Transparent"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
     
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
    
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsInControlGroup, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding HighContrast}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <Custom:RibbonControlSizeDefinition IsLabelVisible="False" ImageSize="Small"/>
            </Setter.Value>
        </Setter>
    </Style>


    <Style  TargetType="{x:Type Custom:RibbonTab}">
        <Setter Property="KeyTipService.IsKeyTipScope" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonTab}">
                    <Grid x:Name="MainGrid" ClipToBounds="True">
                        <Grid.Visibility>
                            <TemplateBinding Property="IsSelected">
                                <TemplateBinding.Converter>
                                    <BooleanToVisibilityConverter/>
                                </TemplateBinding.Converter>
                            </TemplateBinding>
                        </Grid.Visibility>
                        <!--<Line x:Name="OuterLeftLine" Stroke="{Binding ContextualTabGroup.Background, RelativeSource={RelativeSource TemplatedParent}}" 
                                  StrokeThickness="2" X1="0" X2="{Binding TabHeaderLeft, RelativeSource={RelativeSource TemplatedParent}}" Y1="0" Y2="0"/>
                            <Line x:Name="OuterRightLine" Stroke="{Binding ContextualTabGroup.Background, RelativeSource={RelativeSource TemplatedParent}}" 
                                  StrokeThickness="2" X1="{Binding TabHeaderRight, RelativeSource={RelativeSource TemplatedParent}}" 
                                  X2="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" Y1="0" Y2="0"/>-->
                        <ScrollViewer  x:Name="ScrollViewer">
                            <ScrollViewer.Style>
                                <Style TargetType="{x:Type ScrollViewer}">
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
                                    <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
                                    <Setter Property="CanContentScroll" Value="True"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" 
                                                                                Grid.ColumnSpan="3" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                                Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                                                    <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" 
                                                                      Command="ScrollBar.LineLeftCommand" Focusable="False" HorizontalContentAlignment="Left">
                                                        <RepeatButton.Style>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="Width" Value="14"/>
                                                                <Setter Property="Background" Value="{Binding (Custom:RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="BorderBrush" Value="{Binding (Custom:RibbonControlService.Ribbon).BorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                                                                                <Border x:Name="InnerBorder" Background="#80FFFFFF">
                                                                                    <Path x:Name="GlyphPath" Data="M4,0L0,3.5 4,7" Fill="Gray" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                </Border>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="HorizontalContentAlignment" Value="Right">
                                                                                    <Setter Property="Data" TargetName="GlyphPath" Value="M0,0L4,3.5 0,7"/>
                                                                                    <!--<Setter Property="CornerRadius" TargetName="OuterBorder" Value="0,3,3,0"/>
                                                                                    <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0,3,3,0"/>-->
                                                                                </Trigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                       
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                                    <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                                                                                 
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                                    <Setter Property="Fill" TargetName="GlyphPath" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                                </DataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </RepeatButton.Style>
                                                        <RepeatButton.Visibility>
                                                            <MultiBinding ConverterParameter="0" FallbackValue="Visibility.Collapsed" UpdateSourceTrigger="Default">
                                                                <MultiBinding.Converter>
                                                                    <Microsoft_Windows_Controls_Ribbon_Primitives:RibbonScrollButtonVisibilityConverter/>
                                                                </MultiBinding.Converter>
                                                                <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                            </MultiBinding>
                                                        </RepeatButton.Visibility>
                                                    </RepeatButton>
                                                    <RepeatButton Grid.Column="2" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="ScrollBar.LineRightCommand" Focusable="False" HorizontalContentAlignment="Right">
                                                        <RepeatButton.Style>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="Width" Value="14"/>
                                                                <Setter Property="Background" Value="{Binding (Custom:RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="BorderBrush" Value="{Binding (Custom:RibbonControlService.Ribbon).BorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                                                                                <Border x:Name="InnerBorder" Background="#80FFFFFF" >
                                                                                    <Path x:Name="GlyphPath" Data="M4,0L0,3.5 4,7" Fill="Gray" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                </Border>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="HorizontalContentAlignment" Value="Right">
                                                                                    <Setter Property="Data" TargetName="GlyphPath" Value="M0,0L4,3.5 0,7"/>
                                                                                 
                                                                                </Trigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                             
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                                    <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                                                                                 
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                                    <Setter Property="Fill" TargetName="GlyphPath" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                                </DataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </RepeatButton.Style>
                                                        <RepeatButton.Visibility>
                                                            <MultiBinding ConverterParameter="100" FallbackValue="Visibility.Collapsed" UpdateSourceTrigger="Default">
                                                                <MultiBinding.Converter>
                                                                    <Microsoft_Windows_Controls_Ribbon_Primitives:RibbonScrollButtonVisibilityConverter/>
                                                                </MultiBinding.Converter>
                                                                <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                            </MultiBinding>
                                                        </RepeatButton.Visibility>
                                                    </RepeatButton>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ScrollViewer.Style>
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas" HorizontalAlignment="Left" Height="0" Margin="0,1,0,0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" 
                                                   Height="{Binding ActualHeight, ElementName=ScrollViewer}" Width="{Binding ActualWidth, ElementName=ScrollViewer}"/>
                                    <Rectangle x:Name="OverlayRect" Height="{Binding ActualHeight, ElementName=ScrollViewer}" Width="{Binding ActualWidth, ElementName=ScrollViewer}">
                                        <!--<Rectangle.Fill>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#EEFFFFFF" Offset="0"/>
                                                    <GradientStop Color="#BBFFFFFF" Offset="0.1"/>
                                                    <GradientStop Color="#05FFFFFF" Offset="0.5"/>
                                                    <GradientStop Color="#20FFFFFF" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>-->
                                    </Rectangle>
                                    <Rectangle x:Name="InnerOverlayRect"  Height="{Binding ActualHeight, ElementName=ScrollViewer}" Width="{Binding ActualWidth, ElementName=ScrollViewer}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"/>
                            </Grid>
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="CanContentScroll" SourceName="ScrollViewer" Value="False">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=ScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=ScrollViewer}"/>
                                <Setter Property="Canvas.Top" TargetName="OverlayRect" Value="{Binding VerticalOffset, ElementName=ScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OverlayRect" Value="{Binding HorizontalOffset, ElementName=ScrollViewer}"/>
                                <Setter Property="Canvas.Top" TargetName="InnerOverlayRect" Value="{Binding VerticalOffset, ElementName=ScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="InnerOverlayRect" Value="{Binding HorizontalOffset, ElementName=ScrollViewer}"/>
                            </Trigger>-->
                        <!--<MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding HighContrast}" Value="False"/>
                                    <Condition Binding="{Binding ContextualTabGroup, RelativeSource={RelativeSource Self}}" Value="{x:Null}"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="OuterLeftLine" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonTab}}}"/>
                                <Setter Property="Stroke" TargetName="OuterRightLine" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Custom:RibbonTab}}}"/>
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                <Setter Property="Visibility" TargetName="BackgroundCanvas" Value="Collapsed"/>
                                <Setter Property="Stroke" TargetName="OuterLeftLine" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <Setter Property="Stroke" TargetName="OuterRightLine" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </DataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="RibbonTabHeaderItemsControlStyle11" TargetType="{x:Type Custom:RibbonTabHeaderItemsControl}">
            <!--<Setter Property="Background" Value="Red"/>-->
           
        <Setter Property="Template">
            <Setter.Value>
                
                     <ControlTemplate TargetType="{x:Type Custom:RibbonTabHeaderItemsControl}">
                    <Grid Background="Red" >
                        <GridViewRowPresenter  ></GridViewRowPresenter>
                    </Grid>
                </ControlTemplate>
               
               
               
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="RibbonTabHeaderItemsControlStyle1" TargetType="{x:Type Custom:RibbonTabHeaderItemsControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:RibbonTabHeaderItemsControl}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="ScrollViewer">
                            <ScrollViewer.Style>
                                <Style TargetType="{x:Type ScrollViewer}">
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
                                    <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
                                    <Setter Property="CanContentScroll" Value="True"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" 
                                                                            Grid.ColumnSpan="3" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}"  Content="{TemplateBinding Content}" 
                                                                            Margin="{TemplateBinding Padding}"/>
                                                    <RepeatButton Grid.Column="0"  CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="ScrollBar.LineLeftCommand" Focusable="False" 
                                                                  HorizontalContentAlignment="Left">
                                                        <RepeatButton.Style>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="Width" Value="88"/>
                                                                <Setter Property="Background" Value="{Binding (Custom:RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="BorderBrush" Value="{Binding (Custom:RibbonControlService.Ribbon).BorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}">
                                                                                <Border x:Name="InnerBorder" Background="#80FFFFFF">
                                                                                    <Path x:Name="GlyphPath" Data="M4,0L0,3.5 4,7" Fill="Gray" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                </Border>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="HorizontalContentAlignment" Value="Right">
                                                                                    <Setter Property="Data" TargetName="GlyphPath" Value="M0,0L4,3.5 0,7"/>
                                                                                    <!--<Setter Property="CornerRadius" TargetName="OuterBorder" Value="0,3,3,0"/>
                                                                                    <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0,3,3,0"/>-->
                                                                                </Trigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                                    <!--<Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>-->
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                                    <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                                                                                    <!--<Setter Property="CornerRadius" TargetName="InnerBorder" Value="0"/>-->
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                                    <Setter Property="Fill" TargetName="GlyphPath" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                                </DataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </RepeatButton.Style>
                                                        <RepeatButton.Visibility>
                                                            <MultiBinding ConverterParameter="0" FallbackValue="Visibility.Collapsed" UpdateSourceTrigger="Default">
                                                                <MultiBinding.Converter>
                                                                    <Microsoft_Windows_Controls_Ribbon_Primitives:RibbonScrollButtonVisibilityConverter/>
                                                                </MultiBinding.Converter>
                                                                <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                            </MultiBinding>
                                                        </RepeatButton.Visibility>
                                                    </RepeatButton>
                                                    <RepeatButton Grid.Column="2" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="ScrollBar.LineRightCommand" Focusable="False" HorizontalContentAlignment="Right">
                                                        <RepeatButton.Style>
                                                            <Style TargetType="{x:Type RepeatButton}">
                                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="Width" Value="88"/>
                                                                <Setter Property="Background" Value="{Binding (Custom:RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="BorderBrush" Value="{Binding (Custom:RibbonControlService.Ribbon).BorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                                                                                <Border x:Name="InnerBorder" Background="#80FFFFFF">
                                                                                    <Path x:Name="GlyphPath" Data="M4,0L0,3.5 4,7" Fill="Gray" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                </Border>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="HorizontalContentAlignment" Value="Right">
                                                                                    <Setter Property="Data" TargetName="GlyphPath" Value="M0,0L4,3.5 0,7"/>
                                                                                    <!--<Setter Property="CornerRadius" TargetName="OuterBorder" Value="0,3,3,0"/>
                                                                                    <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0,3,3,0"/>-->
                                                                                </Trigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (Custom:RibbonControlService.Ribbon).PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                                                </MultiDataTrigger>
                                                                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                                                                    <!--<Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>-->
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                                    <!--<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>-->
                                                                                    <!--<Setter Property="CornerRadius" TargetName="InnerBorder" Value="0"/>-->
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                                    <Setter Property="Fill" TargetName="GlyphPath" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                                </DataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="Background" TargetName="InnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                                <MultiDataTrigger>
                                                                                    <MultiDataTrigger.Conditions>
                                                                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                                    </MultiDataTrigger.Conditions>
                                                                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                                </MultiDataTrigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </RepeatButton.Style>
                                                        <RepeatButton.Visibility>
                                                            <MultiBinding ConverterParameter="100" FallbackValue="Visibility.Collapsed" UpdateSourceTrigger="Default">
                                                                <MultiBinding.Converter>
                                                                    <Microsoft_Windows_Controls_Ribbon_Primitives:RibbonScrollButtonVisibilityConverter/>
                                                                </MultiBinding.Converter>
                                                                <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                                <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                            </MultiBinding>
                                                        </RepeatButton.Visibility>
                                                    </RepeatButton>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ScrollViewer.Style>
                            <ItemsPresenter  x:Name="ItemsPresenter"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding HighContrast}" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="Transparent"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="ItemContainerStyle" Value="{DynamicResource RibbonTabHeaderItemsControlStyle11}">
        </Setter>-->
    
    </Style>

</ResourceDictionary>