<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elysium</name>
    </assembly>
    <members>
        <member name="T:Elysium.ThemesSet.AppleWindowSet.AppleWindowAttri">
            <summary>
            AppleWindowAttri.xaml 的交互逻辑
            </summary>
            <summary>
            AppleWindowAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.AppleWindowSet.AppleWindowAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.AppleWindowSet.AppleWindowAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.AppleWindowSet.AppleWindowAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.AppleWindowSet.AppleWindowAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ButtonSet.ButtonAttri">
            <summary>
            ButtonStyleAttriSet.xaml 的交互逻辑
            </summary>
            <summary>
            ButtonAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.ButtonSet.ButtonAttri.ShowButton">
            <summary>
            显示效果按钮
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ButtonSet.ButtonAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ButtonSet.ButtonAttriXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ButtonSet.ButtonAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ButtonSet.ButtonAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ButtonSet.ButtonAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ButtonSet.ButtonAttriXaml.CornerRadiusValueProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonAttri">
            <summary>
            CheckBoxRadioButtonAttri.xaml 的交互逻辑
            </summary>
            <summary>
            CheckBoxRadioButtonAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonAttri.ShowCheckBox">
            <summary>
            获取显示按钮
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonAttri.ShowRadioButton">
            <summary>
            获取显示按钮
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.CheckBoxRadioButtonSet.CheckBoxRadioButtonXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttri">
            <summary>
            ComboBoxListBoxAttri.xaml 的交互逻辑
            </summary>
            <summary>
            ComboBoxListBoxAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttri.ShowComboBox">
            <summary>
            显示效果按钮
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttri.ShowListBox">
            <summary>
            显示效果按钮
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttriXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ComboBoxListBoxSet.ComboBoxListBoxAttriXaml.InnerBorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.Common.CommonXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.Common.CommonXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.Common.CommonXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.Common.CommonXaml.ContentFontSizeProperty">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.Common.CommandRelay`1">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The default return value for the CanExecute method is 'true'.
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.Common.CommandRelay`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Elysium.ThemesSet.Common.CommandRelay`1"/> class and the command can always be executed.
            </summary>
            <param name="execute">The execution logic.</param>
        </member>
        <member name="M:Elysium.ThemesSet.Common.CommandRelay`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Elysium.ThemesSet.Common.CommandRelay`1"/> class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="T:Elysium.ThemesSet.Common.CommandRelay">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The default return value for the CanExecute method is 'true'.
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.Common.CommandRelay.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Elysium.ThemesSet.Common.CommandRelay`1"/> class and the command can always be executed.
            </summary>
            <param name="execute">The execution logic.</param>
        </member>
        <member name="M:Elysium.ThemesSet.Common.CommandRelay.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Elysium.ThemesSet.Common.CommandRelay`1"/> class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="T:Elysium.ThemesSet.DatePickerSet.DatePickerAttri">
            <summary>
            TreeViewAttri.xaml 的交互逻辑
            </summary>
            <summary>
            DatePickerAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.DatePickerSet.DatePickerAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.DatePickerSet.DatePickerAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.DatePickerSet.DatePickerAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.DatePickerSet.DatePickerAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.DatePickerSet.DatePickerAttriXaml.CalendarBorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.FontSet.FontAttri">
            <summary>
            FontAttri.xaml 的交互逻辑
            </summary>
            <summary>
            FontAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.FontSet.FontAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.FontSet.FontAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.FontSet.FontAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttri">
            <summary>
            TextBoxsAttri.xaml 的交互逻辑
            </summary>
            <summary>
            GroupBoxAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttri.ShowTextBox">
            <summary>
            获取显示输入框
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="E:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriDataContext.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriDataContext.NormalForeground">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriDataContext.#ctor(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriDataContext.CmdSave">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriDataContext.CmdLook">
            <summary>
            
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.GroupBoxSet.GroupBoxAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.LabelSet.LabelAttri">
            <summary>
            AppleWindowAttri.xaml 的交互逻辑
            </summary>
            <summary>
            LabelAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.LabelSet.LabelAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.LabelSet.LabelAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.LabelSet.LabelAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ListViewSet.ListViewAttri">
            <summary>
            ListViewAttri.xaml 的交互逻辑
            </summary>
            <summary>
            ListViewAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ListViewSet.ListViewAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ListViewSet.ListViewAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ListViewSet.ListViewAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ListViewSet.ListViewAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ListViewSet.ListViewAttriXaml.HeaderSeparatedWidthProperty">
            <summary>
            Scroll宽度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.MenuSet.MenuAttri">
            <summary>
            MenuAttri.xaml 的交互逻辑
            </summary>
            <summary>
            MenuAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.MenuSet.MenuAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.MenuSet.MenuAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.MenuSet.MenuAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.MenuSet.MenuAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.MessageBoxOverrideSet.MessageBoxOverrideAttri">
            <summary>
            AppleWindowAttri.xaml 的交互逻辑
            </summary>
            <summary>
            MessageBoxOverrideAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.MessageBoxOverrideSet.MessageBoxOverrideAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.MessageBoxOverrideSet.MessageBoxOverrideAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.MessageBoxOverrideSet.MessageBoxOverrideAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.RadGridViewSet.RadGridViewAttri">
            <summary>
            RadGridViewAttri.xaml 的交互逻辑
            </summary>
            <summary>
            RadGridViewAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.RadGridViewSet.RadGridViewAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.RadGridViewSet.RadGridViewAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.RadGridViewSet.RadGridViewAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.RadGridViewSet.RadGridViewAttriXaml.RadGridViewBorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.RadTreeViewSet.RadTreeViewAttri">
            <summary>
            RadTreeViewAttri.xaml 的交互逻辑
            </summary>
            <summary>
            RadTreeViewAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.RadTreeViewSet.RadTreeViewAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.RadTreeViewSet.RadTreeViewAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.RadTreeViewSet.RadTreeViewAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.RadTreeViewSet.RadTreeViewAttriXaml.RadTreeViewBorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.RibbonMenuSet.RabbionMenuAttri">
            <summary>
            RabbionMenuAttri.xaml 的交互逻辑
            </summary>
            <summary>
            RabbionMenuAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.RibbonMenuSet.RabbionMenuAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ScrollSet.ScrollAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ScrollSet.ScrollAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ScrollSet.ScrollAttriXaml.MyHeightProperty">
            <summary>
            Scroll高度
            </summary>
            
        </member>
        <member name="F:Elysium.ThemesSet.ScrollSet.ScrollAttriXaml.MyWidthProperty">
            <summary>
            Scroll宽度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ScrollSet.ScrollBarAttri">
            <summary>
            ScrollBarAttri.xaml 的交互逻辑
            </summary>
            <summary>
            ScrollBarAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.ScrollSet.ScrollBarAttri.ShowButton">
            <summary>
            显示效果按钮
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ScrollSet.ScrollBarAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.ScrollViewSet.ScrollVeiwAttri">
            <summary>
            ScrollVeiwAttri.xaml 的交互逻辑
            </summary>
            <summary>
            ScrollVeiwAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ScrollViewSet.ScrollVeiwAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.ScrollViewSet.ScrollViewerAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.ScrollViewSet.ScrollViewerAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TabSet.TabAttri">
            <summary>
            TabAttri.xaml 的交互逻辑
            </summary>
            <summary>
            TabAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TabSet.TabAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TabSet.TabAttriXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TabSet.TabAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TabSet.TabAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TabSet.TabAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TabSet.TabAttriXaml.TabBorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TextBlockSet.TextBlockAttri">
            <summary>
            TextBoxsAttri.xaml 的交互逻辑
            </summary>
            <summary>
            TextBlockAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttri.ShowTextBox">
            <summary>
            获取显示输入框
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TextBlockSet.TextBlockAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="E:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.NormalBackground">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.NormalForeground">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.MouseOverBackground">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.MouseOverForeground">
            <summary>
            
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.#ctor(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.CmdSave">
            <summary>
            
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBlockSet.TextBlockAttriDataContext.CmdLook">
            <summary>
            
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TextBlockSet.TextBlockAttriXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TextBlockSet.TextBlockAttriXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TextBlockSet.TextBlockAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TextBoxsSet.TextBoxsAttri">
            <summary>
            TextBoxsAttri.xaml 的交互逻辑
            </summary>
            <summary>
            TextBoxsAttri
            </summary>
        </member>
        <member name="P:Elysium.ThemesSet.TextBoxsSet.TextBoxsAttri.ShowTextBox">
            <summary>
            获取显示输入框
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TextBoxsSet.TextBoxsAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TextBoxsSet.TextBoxsXaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TextBoxsSet.TextBoxsXaml.ButtonSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TextBoxsSet.TextBoxsXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TextBoxsSet.TextBoxsXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:Elysium.ThemesSet.TreeViewSet.TreeViewAttri">
            <summary>
            TreeViewAttri.xaml 的交互逻辑
            </summary>
            <summary>
            TreeViewAttri
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TreeViewSet.TreeViewAttri.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TreeViewSet.TreeViewAttriXaml.ScrollSetXmlFileName">
            <summary>
            按钮样式存放目录文件名称
            </summary>
        </member>
        <member name="M:Elysium.ThemesSet.TreeViewSet.TreeViewAttriXaml.SaveStyle">
            <summary>
            保存设置的样式
            </summary>
        </member>
        <member name="F:Elysium.ThemesSet.TreeViewSet.TreeViewAttriXaml.BorderThicknessProperty">
            <summary>
            Button边框厚度
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
            <summary>
            Enables writing abbreviations for contracts that get copied to other methods
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
            <summary>
            Allows setting contract and tool options at assembly, type, or method granularity.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method.
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> class.
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition, then the execution continues.
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied.
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
                        public class ComponentAttribute : Attribute
                        {}
            
                        [Component] // ComponentAttribute requires implementing IComponent interface
                        public class MyComponent : IComponent
                        {}
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.BaseTypeRequiredAttribute"/> class.
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax><p>Function definition table syntax:</p>
            <list>
            <item>
            FDT      ::= FDTRow [;FDTRow]*
            </item>
            <item>
            FDTRow   ::= Input =&gt; Output | Output &lt;= Input
            </item>
            <item>
            Input    ::= ParameterName: Value [, Input]*
            </item>
            <item>
            Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}
            </item>
            <item>
            Value    ::= true | false | null | notnull | canbenull
            </item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using "halt" (or "void"/"nothing", which is the same) for method output means that methos doesn't return normally. <br/>
            "canbenull" annotation is only applicable for output parameters. <br/>
            You can use multiple [ContractAnnotation] for each FDT row, or use single attribute with rows separated by semicolon. <br/></syntax><examples>
            <list>
            <item>
            [ContractAnnotation("=&gt; halt")] public void TerminationMethod()
            </item>
            <item>
            [ContractAnnotation("halt &lt;= condition: false")] public void Assert(bool condition, string text) // Regular Assertion method
            </item>
            <item>
            [ContractAnnotation("s:null =&gt; true")] public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </item>
            <item>
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")] public object Transform(object data) // Method which returns null if parameter is null, and not null if parameter is not null
            </item>
            <item>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")] public bool TryParse(string s, out Person result)
            </item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is *pure* linq method, with postponed enumeration.
            C# iterator methods (yield ...) are always LinqTunnel
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value>
            <c>true</c> if a element should be localized; otherwise, <c>false</c>.
            </value>
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
                        <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </returns>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumarable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the function is used to notify class type property value is changed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.StringFormatMethodAttribute"/> class.
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            Indicates the property of some <c>BindingBase</c>-derived type, that is used
            to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
