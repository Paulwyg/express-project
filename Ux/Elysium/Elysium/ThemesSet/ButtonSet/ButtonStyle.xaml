<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:params="clr-namespace:Elysium.Parameters"
                    xmlns:converters="clr-namespace:Elysium.Converters"
                    xmlns:ButtonSet="clr-namespace:Elysium.ThemesSet.ButtonSet"
                    xmlns:Common="clr-namespace:Elysium.ThemesSet.Common"
                    xmlns:FontSet="clr-namespace:Elysium.ThemesSet.FontSet">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Elysium;component/Themes/Brushes.xaml" />
        <ResourceDictionary Source="/Elysium;component/Themes/LightBrushes.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <converters:DoubleToGridLengthConverter x:Key="DoubleToGridLengthConverter" />
    <converters:DoubleToThicknessConverter x:Key="DoubleToThicknessConverter" />
    <converters:GridLengthToDoubleConverter x:Key="GridLengthToDoubleConverter" />
    <converters:ThicknessToDoubleConverter x:Key="ThicknessToDoubleConverter" />
    <converters:PercentToAngleConverter x:Key="PercentToAngleConverter" />
    <converters:AngleToCoordinateConverter x:Key="AngleToCoordinateConverter" />
    <converters:NumberPositiveToNegativeConverter x:Key="NumberPositiveToNegativeConverter" />
    <converters:ThicknessPositiveToNegativeConverter x:Key="ThicknessPositiveToNegativeConverter" />
    <converters:ThicknessConverter x:Key="ThicknessConverter" />
    <converters:TabItemNameConverter x:Key="myTabItemNameConverter" />
    <converters:IsGreaterThanConverter x:Key="IsGreaterThanConverter" />
    <Style x:Key="FocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="{TemplateBinding params:General.DefaultPadding}" 
                               Stroke="{StaticResource ForegroundBrush}" 
                               StrokeThickness="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.BorderThickness), Mode=OneWay}" 
                               StrokeDashArray="2 1" RenderOptions.EdgeMode="Aliased" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonsBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.NormalBackgrounBrush), Mode=OneWay}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.NormalBorderBrush), Mode=OneWay}" />
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.BorderThickness), Mode=OneWay}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.NormalForegroundBrush), Mode=OneWay}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontSize), Mode=OneWay}" />
        <Setter Property="FontStretch" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStretch), Mode=OneWay}" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontFamily), Mode=OneWay}" />
        <Setter Property="FontStyle" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontStyle), Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource Self}, Path=(FontSet:FontAttriXaml.MyFontWeight), Mode=OneWay}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!--<Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.BoldPadding), Mode=OneWay}" />-->
        <Setter Property="Padding" Value="1" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            CornerRadius="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.CornerRadiusValue), Mode=OneWay}" 
                            BorderThickness="{TemplateBinding BorderThickness}" TextBlock.Foreground="{TemplateBinding Foreground}" 
                            TextBlock.FontFamily="{TemplateBinding FontFamily}" TextBlock.FontSize="{TemplateBinding FontSize}" 
                            TextBlock.FontStretch="{TemplateBinding FontStretch}" TextBlock.FontStyle="{TemplateBinding FontStyle}" 
                            TextBlock.FontWeight="{TemplateBinding FontWeight}" TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}" 
                            TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}" 
                            RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=FontSize, Mode=OneWay, Converter={StaticResource IsGreaterThanConverter}, ConverterParameter=18}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.MouseOverBackgroundBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.MouseOverBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.MouseOverForegroundBrush), Mode=OneWay}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.PressedBackgroundBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.PressedBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.PressedForegroundBrush), Mode=OneWay}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.DisableBackgroundBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.DisableBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.DisableForegroundBrush), Mode=OneWay}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonsBaseStyle}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
        </Style.Triggers>
    </Style>





    <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ButtonsBaseStyle}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>
    
    
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ButtonsBaseStyle}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.NormalBackgrounBrush), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.NormalBorderBrush), Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ButtonSet:ButtonAttriXaml.NormalForegroundBrush), Mode=OneWay}" />
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>